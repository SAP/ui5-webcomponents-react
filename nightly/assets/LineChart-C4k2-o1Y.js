import{j as a,r as y,ap as te,o as k}from"./iframe-BuT579UQ.js";import{T as p}from"./ThemingParameters-pyhX3s39.js";import{X as A,Y as b,u as ae,a as ne,C as oe,c as ie,b as _}from"./YAxisTicks-BradKFld.js";import{u as re,C as se}from"./ChartDataLabel-_4nAdbqN.js";import{u as le,x as de,t as ce,a as he,b as pe,c as ue,e as P}from"./staticProps-CmP_BXxM.js";import{u as me}from"./useLongestYAxisLabel-BL_jF45l.js";import{u as fe,a as ge,r as ye}from"./useTooltipFormatter-CAv7gHQf.js";import{k as be,l as Ce,m as we,n as ve,R as xe,T as Le,p as ke}from"./ChartContainer-XEjc7b1U.js";import{C as _e}from"./react-content-loader.es-DNCv1y0U.js";import{L as D}from"./Line-Ccm5xlJA.js";import{u as Ae}from"./useIsRTL-5gvEDkWI.js";var Pe=be({chartName:"LineChart",GraphicalChild:D,axisComponents:[{axisType:"xAxis",AxisComp:A},{axisType:"yAxis",AxisComp:b}],formatAxisMap:Ce});const l=o=>a.jsxs(_e,{viewBox:"0 0 165 145",preserveAspectRatio:"xMidYMid meet",width:"100%",height:"100%",speed:2,backgroundColor:p.sapContent_ImagePlaceholderBackground,foregroundColor:p.sapContent_ImagePlaceholderForegroundColor,backgroundOpacity:p.sapContent_DisabledOpacity,...o,children:[a.jsx("rect",{x:"10",y:"135",width:"135",height:"1"}),a.jsx("path",{d:"M20 135 L40 80 L60 70 L80 30 L100 50 L120 65 L 135 100 L120 67 L100 52 L80 32 L60 72 L40 82 L20 137 Z",fill:"none",strokeWidth:"2"})]});try{l.displayName="LineChartPlaceholder",l.__docgenInfo={description:"",displayName:"LineChartPlaceholder",props:{}}}catch{}try{l.displayName="LineChartPlaceholder",l.__docgenInfo={description:"",displayName:"LineChartPlaceholder",props:{}}}catch{}const De={formatter:P},Ve={formatter:P,width:1,opacity:1},d=y.forwardRef((o,V)=>{const{dataset:c,loading:T,loadingDelay:j,noLegend:q,noAnimation:S,tooltipConfig:C,onDataPointClick:h,onLegendClick:I,onClick:w,style:N,className:z,slot:R,syncId:Y,ChartPlaceholder:F,children:E,...K}=o,e={yAxisVisible:!1,xAxisVisible:!0,gridStroke:p.sapList_BorderColor,gridHorizontal:!0,gridVertical:!1,legendPosition:"bottom",legendHorizontalAlign:"left",zoomingTool:!1,resizeDebounce:250,yAxisTicksVisible:!0,yAxisConfig:{},xAxisConfig:{},secondYAxisConfig:{},...o.chartConfig},{dimensions:v,measures:r}=fe(o.dimensions,o.measures,De,Ve),O=ge(r),u=v[0],{primaryMeasure:M,secondaryMeasure:B}=ye(r,e?.secondYAxis?.dataKey),H=re(u?.formatter),[W,x]=te(V),U=r.map(({accessor:t})=>t),m=e.secondYAxis?U.findIndex(t=>t===e.secondYAxis?.dataKey):0,$=le(I),s=y.useRef(0),L=y.useCallback((t,n)=>{n.dataKey&&typeof h=="function"?(s.current=2,h(k({},{value:n.value,dataKey:n.dataKey,dataIndex:n.index,payload:n.payload}))):typeof w=="function"&&s.current===0&&w(k(n,{payload:t?.activePayload?.[0]?.payload,activePayloads:t?.activePayload})),s.current>0&&(s.current-=1)},[h,s.current]),f=c?.length>30,X=u?.accessor,[G,Z]=me(c,r,e.legendPosition),J=ae(e.margin,e.zoomingTool),Q=ne(x,o.dimensions.length),{chartConfig:Te,dimensions:je,measures:qe,...ee}=K,g=Ae(x),i=e.referenceLine;return a.jsx(we,{dataset:c,loading:T,loadingDelay:j,Placeholder:F??l,ref:W,style:N,className:z,slot:R,resizeDebounce:e.resizeDebounce,...ee,children:a.jsxs(Pe,{syncId:Y,margin:J,data:c,onClick:L,accessibilityLayer:e.accessibilityLayer,className:typeof h=="function"?"has-click-handler":void 0,children:[a.jsx(oe,{vertical:e.gridVertical,horizontal:e.gridHorizontal,stroke:e.gridStroke}),v.map((t,n)=>a.jsx(A,{dataKey:t.accessor,xAxisId:n,interval:t?.interval??(f?"preserveStart":0),tick:a.jsx(ie,{formatter:t?.formatter}),tickLine:n<1,axisLine:n<1,height:e.xAxisVisible?Q[n]:0,padding:de,allowDuplicatedCategory:n===0,reversed:g,...e.xAxisConfig},t.reactKey)),a.jsx(b,{orientation:g===!0?"right":"left",axisLine:e.yAxisVisible,tickLine:ce,yAxisId:"left",interval:0,tick:e.yAxisTicksVisible&&a.jsx(_,{formatter:M?.formatter}),width:G,...e.yAxisConfig}),e.secondYAxis?.dataKey&&a.jsx(b,{dataKey:e.secondYAxis.dataKey,axisLine:{stroke:e.secondYAxis.color??`var(--sapChart_OrderedColor_${m%12+1})`},tick:a.jsx(_,{formatter:B?.formatter,secondYAxisConfig:{color:e.secondYAxis.color??`var(--sapChart_OrderedColor_${m%12+1})`}}),tickLine:{stroke:e.secondYAxis.color??`var(--sapChart_OrderedColor_${m%12+1})`},label:{value:e.secondYAxis.name,offset:2,angle:90,position:"center"},orientation:g===!0?"left":"right",yAxisId:"right",interval:0,...e.secondYAxisConfig}),r.map((t,n)=>a.jsx(D,{dot:t.showDot??!f,yAxisId:e.secondYAxis?.dataKey===t.accessor?"right":"left",name:t.label??t.accessor,strokeOpacity:t.opacity,label:f?!1:a.jsx(se,{config:t,chartType:"line",position:"top"}),type:"monotone",dataKey:t.accessor,stroke:t.color??`var(--sapChart_OrderedColor_${n%12+1})`,strokeWidth:t.width,activeDot:{onClick:L},isAnimationActive:!S,...t.lineConfig},t.reactKey)),!q&&a.jsx(ve,{verticalAlign:e.legendPosition,align:e.legendHorizontalAlign,onClick:$,wrapperStyle:Z,...e.legendConfig}),i&&a.jsx(xe,{...i,stroke:i?.color??i?.stroke,y:i?.value??i?.y,yAxisId:i?.yAxisId??"left",label:i?.label}),C?.active!==!1&&a.jsx(Le,{cursor:pe,formatter:O,contentStyle:he,labelFormatter:H,...C}),!!e.zoomingTool&&a.jsx(ke,{dataKey:X,tickFormatter:u?.formatter,...ue,...typeof e.zoomingTool=="object"?e.zoomingTool:{}}),E]})})});d.displayName="LineChart";try{d.displayName="LineChart",d.__docgenInfo={description:"A `LineChart` is a type of chart used to show information that changes over time - it connects multiple dots.\n\n__Note:__ Charts are custom-built __without__ defined design specifications! They use the Fiori color palette, but functionality and especially accessibility may not meet standard app requirements.",displayName:"LineChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one line in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this line should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this line.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: line width, defaults to `1`\n- `opacity`: line opacity, defaults to `1`\n- `showDot`: Flag whether the line dot should be displayed or not.\n- `lineConfig`: This prop allows passing all [Line Properties](https://recharts.org/en-US/api/Line) of the Recharts library.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},loading:{defaultValue:null,description:"Flag whether the chart should display a loading indicator.\n\nThis can either be a skeleton placeholder shimmer (in case the chart has no data yet) or a `BusyIndicator` on top of the chart (in case the chart has already some data to display).",name:"loading",required:!1,type:{name:"boolean"}},loadingDelay:{defaultValue:{value:"1000"},description:"Defines the delay in milliseconds, after which the `BusyIndicator` will be visible on the screen.",name:"loadingDelay",required:!1,type:{name:"number"}},dataset:{defaultValue:null,description:"The `dataset` is an array of objects that contains all the measures and dimensions.\n\n__Note:__ The values for measure data points must be of type `number`.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n- `accessibilityLayer`: Experimental property to improve accessibility. Not supported by all charts and configurations!\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'ICartesianChartConfig & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | "bottom" | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; legendConfig?: Omit<...>; accessibilityLayer?: boolean; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to override internally used tooltip props, so please use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{d.displayName="LineChart",d.__docgenInfo={description:"A `LineChart` is a type of chart used to show information that changes over time - it connects multiple dots.\n\n__Note:__ Charts are custom-built __without__ defined design specifications! They use the Fiori color palette, but functionality and especially accessibility may not meet standard app requirements.",displayName:"LineChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one line in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this line should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this line.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: line width, defaults to `1`\n- `opacity`: line opacity, defaults to `1`\n- `showDot`: Flag whether the line dot should be displayed or not.\n- `lineConfig`: This prop allows passing all [Line Properties](https://recharts.org/en-US/api/Line) of the Recharts library.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},loading:{defaultValue:null,description:"Flag whether the chart should display a loading indicator.\n\nThis can either be a skeleton placeholder shimmer (in case the chart has no data yet) or a `BusyIndicator` on top of the chart (in case the chart has already some data to display).",name:"loading",required:!1,type:{name:"boolean"}},loadingDelay:{defaultValue:{value:"1000"},description:"Defines the delay in milliseconds, after which the `BusyIndicator` will be visible on the screen.",name:"loadingDelay",required:!1,type:{name:"number"}},dataset:{defaultValue:null,description:"The `dataset` is an array of objects that contains all the measures and dimensions.\n\n__Note:__ The values for measure data points must be of type `number`.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n- `accessibilityLayer`: Experimental property to improve accessibility. Not supported by all charts and configurations!\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'ICartesianChartConfig & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | "bottom" | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; legendConfig?: Omit<...>; accessibilityLayer?: boolean; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to override internally used tooltip props, so please use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}export{d as L};
