import{c as G,l as Z,t as J}from"./DemoProps-DpAHnTHz.js";import{r as C,j as t,ay as K,x as y}from"./iframe-BCRKbB-F.js";import{T as g}from"./ThemingParameters-pyhX3s39.js";import{u as Q}from"./useLongestYAxisLabel-DoF59uZw.js";import{u as X}from"./useTooltipFormatter-ChNLwMsD.js";import{e as l}from"./staticProps-CL5uldzL.js";import{C as L}from"./index-BZrYf-vq.js";import{C as ee}from"./react-content-loader.es-wJYJ4Zmw.js";import{O as te}from"./ChartContainer-C2dQXD77.js";const ne=e=>C.useMemo(()=>{const i=[],o=[];return e==null||e.forEach((n,a)=>{n.type==="bar"&&(i.push({...n,opacity:0,hide:!0,hideDataLabel:!0,showDot:!1,formatter:l}),o.push({color:n.color??`var(--sapChart_OrderedColor_${a%12+1})`,formatter:l,...n})),n.type==="line"&&(i.push({color:n.color??`var(--sapChart_OrderedColor_${a%12+1})`,formatter:l,...n}),o.push({...n,opacity:0,hide:!0,hideDataLabel:!0,showDot:!1,formatter:l}))}),{lineMeasures:i,columnMeasures:o}},[e]),ae="@layer ui5-webcomponents-react{._container_15x19_1{color:var(--sapTextColor);display:flex;flex-direction:column;font-family:var(--sapFontFamily);font-size:var(--sapFontSmallSize);height:400px;min-height:fit-content;position:relative;width:100%}._trendContainer_15x19_15{flex:0 0 20%;height:auto}._chartContainer_15x19_20{flex-grow:1;height:auto}}",b={container:"_container_15x19_1",trendContainer:"_trendContainer_15x19_15",chartContainer:"_chartContainer_15x19_20"},p=e=>t.jsxs(ee,{viewBox:"0 0 165 145",preserveAspectRatio:"xMidYMid meet",width:"100%",height:"100%",speed:2,backgroundColor:g.sapContent_ImagePlaceholderBackground,foregroundColor:g.sapContent_ImagePlaceholderForegroundColor,backgroundOpacity:g.sapContent_DisabledOpacity,...e,children:[t.jsx("path",{d:"M 20 56 L 39 33 L 57 25 L 77 5 L 99 25 L 125 31 L 139 25 L 125 32 L 98 27 L 77 10 L 58 27 L 39 35 L 20 56 Z",fill:"none",strokeWidth:"2"}),t.jsx("rect",{x:"10",y:"135",width:"135",height:"1"}),t.jsx("rect",{x:"20",y:"65",width:"15",height:"70"}),t.jsx("rect",{x:"40",y:"58",width:"15",height:"77"}),t.jsx("rect",{x:"60",y:"68",width:"15",height:"67"}),t.jsx("rect",{x:"80",y:"60",width:"15",height:"75"}),t.jsx("rect",{x:"100",y:"35",width:"15",height:"100"}),t.jsx("rect",{x:"120",y:"75",width:"15",height:"60"})]});try{p.displayName="ColumnChartWithTrendPlaceholder",p.__docgenInfo={description:"",displayName:"ColumnChartWithTrendPlaceholder",props:{}}}catch{}try{p.displayName="ColumnChartWithTrendPlaceholder",p.__docgenInfo={description:"",displayName:"ColumnChartWithTrendPlaceholder",props:{}}}catch{}const oe={formatter:l},ie={formatter:l,opacity:1},r=C.forwardRef((e,i)=>{const{loading:o,loadingDelay:n,dataset:a,className:E,onClick:m,noLegend:R,noAnimation:w,onDataPointClick:f,onLegendClick:M,ChartPlaceholder:F,tooltipConfig:v,...Y}=e,_=C.useId();K(ae,r.displayName);const s={yAxisVisible:!1,xAxisVisible:!0,gridStroke:g.sapList_BorderColor,gridHorizontal:!0,gridVertical:!1,legendPosition:"bottom",legendHorizontalAlign:"left",barGap:3,zoomingTool:!1,resizeDebounce:250,...e.chartConfig},{dimensions:x,measures:B}=X(e.dimensions,e.measures,oe,ie),{lineMeasures:H,columnMeasures:k}=ne(B),[U]=Q(a,k,s.legendPosition),{chartConfig:le,dimensions:de,measures:ce,...$}=Y;return t.jsxs("div",{ref:i,className:y(E,b.container),...$,children:[(a==null?void 0:a.length)!==0&&t.jsx(L,{className:y(typeof f=="function"||typeof m=="function"?"has-click-handler":void 0,b.trendContainer),tooltipConfig:{...v,wrapperStyle:{visibility:"hidden"}},noAnimation:w,loading:o,loadingDelay:n,onClick:m,syncId:_,dataset:a,measures:H,dimensions:x,noLegend:!0,onDataPointClick:f,chartConfig:{xAxisVisible:!1,yAxisVisible:!1,yAxisTicksVisible:!1,gridHorizontal:!1,yAxisLabelsVisible:!1,yAxisWidth:U,accessibilityLayer:s.accessibilityLayer}}),t.jsx(L,{className:y(typeof f=="function"||typeof m=="function"?"has-click-handler":void 0,b.chartContainer),onLegendClick:M,tooltipConfig:{includeHidden:!0,...v},noAnimation:w,noLegend:R,loading:o,loadingDelay:n,onClick:m,onDataPointClick:f,syncId:_,ChartPlaceholder:F??p,dataset:a,measures:k,dimensions:x,chartConfig:{...s,legendConfig:{...s==null?void 0:s.legendConfig,content:t.jsx(z,{})}}})]})});r.displayName="ColumnChartWithTrend";const z=e=>{const i=e.payload.map(o=>({...o,inactive:void 0}));return t.jsx(te,{...e,payload:i})};z.displayName="DefaultLegendContentWithoutInactive";try{r.displayName="ColumnChartWithTrend",r.__docgenInfo={description:"A `ColumnChartWithTrend` is a data visualization where each category is represented by a rectangle, with the height of the rectangle being proportional to the values being plotted amd a trend line which is displayed above the column chart.",displayName:"ColumnChartWithTrend",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x-axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one column in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this column should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: column width, defaults to `auto`\n- `opacity`: column opacity, defaults to `1`\n- `stackId`: columns with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},loading:{defaultValue:null,description:"Flag whether the chart should display a loading indicator.\n\nThis can either be a skeleton placeholder shimmer (in case the chart has no data yet) or a `BusyIndicator` on top of the chart (in case the chart has already some data to display).",name:"loading",required:!1,type:{name:"boolean"}},loadingDelay:{defaultValue:{value:"1000"},description:"Defines the delay in milliseconds, after which the `BusyIndicator` will be visible on the screen.",name:"loadingDelay",required:!1,type:{name:"number"}},dataset:{defaultValue:null,description:"The `dataset` is an array of objects that contains all the measures and dimensions.\n\n__Note:__ The values for measure data points must be of type `number`.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n- `accessibilityLayer`: Experimental property to improve accessibility. Not supported by all charts and configurations!\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'Omit<ICartesianChartConfig, "secondYAxis" | "secondYAxisConfig"> & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | ... 1 more ... | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; legendConfig?: Omit<...>; accessib...'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to override internally used tooltip props, so please use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}}}}}catch{}try{r.displayName="ColumnChartWithTrend",r.__docgenInfo={description:"A `ColumnChartWithTrend` is a data visualization where each category is represented by a rectangle, with the height of the rectangle being proportional to the values being plotted amd a trend line which is displayed above the column chart.",displayName:"ColumnChartWithTrend",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x-axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one column in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this column should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: column width, defaults to `auto`\n- `opacity`: column opacity, defaults to `1`\n- `stackId`: columns with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},loading:{defaultValue:null,description:"Flag whether the chart should display a loading indicator.\n\nThis can either be a skeleton placeholder shimmer (in case the chart has no data yet) or a `BusyIndicator` on top of the chart (in case the chart has already some data to display).",name:"loading",required:!1,type:{name:"boolean"}},loadingDelay:{defaultValue:{value:"1000"},description:"Defines the delay in milliseconds, after which the `BusyIndicator` will be visible on the screen.",name:"loadingDelay",required:!1,type:{name:"number"}},dataset:{defaultValue:null,description:"The `dataset` is an array of objects that contains all the measures and dimensions.\n\n__Note:__ The values for measure data points must be of type `number`.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n- `accessibilityLayer`: Experimental property to improve accessibility. Not supported by all charts and configurations!\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'Omit<ICartesianChartConfig, "secondYAxis" | "secondYAxisConfig"> & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | ... 1 more ... | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; legendConfig?: Omit<...>; accessib...'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to override internally used tooltip props, so please use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}}}}}catch{}const re={title:"ColumnChartWithTrend",component:r,args:{style:{height:"400px"},dataset:G,dimensions:[{accessor:"name",formatter:e=>`${e} 2019`}],measures:[{accessor:"users",label:"Users",type:"line"},{accessor:"sessions",label:"Active Sessions",type:"bar"}]}},d={},c={args:{dataset:[]}},h={args:Z},u={args:J};var D,P,T;d.parameters={...d.parameters,docs:{...(D=d.parameters)==null?void 0:D.docs,source:{originalSource:"{}",...(T=(P=d.parameters)==null?void 0:P.docs)==null?void 0:T.source}}};var V,S,j;c.parameters={...c.parameters,docs:{...(V=c.parameters)==null?void 0:V.docs,source:{originalSource:`{
  args: {
    dataset: []
  }
}`,...(j=(S=c.parameters)==null?void 0:S.docs)==null?void 0:j.source}}};var q,A,N;h.parameters={...h.parameters,docs:{...(q=h.parameters)==null?void 0:q.docs,source:{originalSource:`{
  args: legendConfig
}`,...(N=(A=h.parameters)==null?void 0:A.docs)==null?void 0:N.source}}};var I,W,O;u.parameters={...u.parameters,docs:{...(I=u.parameters)==null?void 0:I.docs,source:{originalSource:`{
  args: tooltipConfig
}`,...(O=(W=u.parameters)==null?void 0:W.docs)==null?void 0:O.source}}};const se=["Default","LoadingPlaceholder","WithCustomLegendConfig","WithCustomTooltipConfig"],we=Object.freeze(Object.defineProperty({__proto__:null,Default:d,LoadingPlaceholder:c,WithCustomLegendConfig:h,WithCustomTooltipConfig:u,__namedExportsOrder:se,default:re},Symbol.toStringTag,{value:"Module"}));export{we as C,d as D,c as L,u as W,h as a};
