import{j as n}from"./jsx-runtime-DEdD30eg.js";import{T as g}from"./ThemingParameters-B358vlzA.js";import{e as D}from"./index-C-Zfmu7Z.js";import{r as w}from"./index-RYns6xqu.js";import{X as j,Y as v,u as ie,a as re,C as se,c as le,b as T}from"./YAxisTicks-DFxutKtd.js";import{u as de,C as ce}from"./ChartDataLabel-zHToOqFM.js";import{u as he,x as pe,t as ue,a as me,b as fe,c as ge,e as S}from"./staticProps-DcXxMJtG.js";import{u as ye}from"./useLongestYAxisLabel-CufyKp2T.js";import{u as be,a as Ce,r as we}from"./useTooltipFormatter--sc6qmng.js";import{k as ve,l as xe,q as ke,r as Ae,R as Le,T as _e,t as Pe}from"./ChartContainer-Hx5HsbpM.js";import{C as Ve}from"./react-content-loader.es-BcmDwNEo.js";import{L as q}from"./Line-DSnn_jsy.js";import{k as De}from"./withWebComponent-m_Fq5lNf.js";import{u as Te}from"./useIsRTL-C5iQ0Bor.js";var je=ve({chartName:"LineChart",GraphicalChild:q,axisComponents:[{axisType:"xAxis",AxisComp:j},{axisType:"yAxis",AxisComp:v}],formatAxisMap:xe});const h=i=>n.jsxs(Ve,{viewBox:"0 0 165 145",preserveAspectRatio:"xMidYMid meet",width:"100%",height:"100%",speed:2,backgroundColor:g.sapContent_ImagePlaceholderBackground,foregroundColor:g.sapContent_ImagePlaceholderForegroundColor,backgroundOpacity:g.sapContent_DisabledOpacity,...i,children:[n.jsx("rect",{x:"10",y:"135",width:"135",height:"1"}),n.jsx("path",{d:"M20 135 L40 80 L60 70 L80 30 L100 50 L120 65 L 135 100 L120 67 L100 52 L80 32 L60 72 L40 82 L20 137 Z",fill:"none",strokeWidth:"2"})]});try{h.displayName="LineChartPlaceholder",h.__docgenInfo={description:"",displayName:"LineChartPlaceholder",props:{}}}catch{}try{h.displayName="LineChartPlaceholder",h.__docgenInfo={description:"",displayName:"LineChartPlaceholder",props:{}}}catch{}const Se={formatter:S},qe={formatter:S,width:1,opacity:1},p=w.forwardRef((i,I)=>{var _,P;const{dataset:s,loading:N,loadingDelay:z,noLegend:R,noAnimation:Y,tooltipConfig:u,onDataPointClick:m,onLegendClick:E,onClick:x,style:F,className:K,slot:O,syncId:B,ChartPlaceholder:H,children:M,...W}=i,e={yAxisVisible:!1,xAxisVisible:!0,gridStroke:g.sapList_BorderColor,gridHorizontal:!0,gridVertical:!1,legendPosition:"bottom",legendHorizontalAlign:"left",zoomingTool:!1,resizeDebounce:250,yAxisTicksVisible:!0,yAxisConfig:{},xAxisConfig:{},secondYAxisConfig:{},...i.chartConfig},{dimensions:k,measures:l}=be(i.dimensions,i.measures,Se,qe),U=Ce(l),r=k[0],{primaryMeasure:f,secondaryMeasure:$}=we(l,(_=e==null?void 0:e.secondYAxis)==null?void 0:_.dataKey),X=de(r),[G,A]=De(I),Z=l.map(({accessor:t})=>t),y=e.secondYAxis?Z.findIndex(t=>{var o;return t===((o=e.secondYAxis)==null?void 0:o.dataKey)}):0,J=he(E),d=w.useRef(0),L=w.useCallback((t,o)=>{var c,V;o.dataKey&&typeof m=="function"?(d.current=2,m(D({},{value:o.value,dataKey:o.dataKey,dataIndex:o.index,payload:o.payload}))):typeof x=="function"&&d.current===0&&x(D(o,{payload:(V=(c=t==null?void 0:t.activePayload)==null?void 0:c[0])==null?void 0:V.payload,activePayloads:t==null?void 0:t.activePayload})),d.current>0&&(d.current-=1)},[m,d.current]),b=(s==null?void 0:s.length)>30,Q=r==null?void 0:r.accessor,[ee,te]=ye(s,l,e.legendPosition),ae=ie(e.margin,e.zoomingTool),ne=re(A,i.dimensions.length),{chartConfig:Ie,dimensions:Ne,measures:ze,...oe}=W,C=Te(A),a=e.referenceLine;return n.jsx(ke,{dataset:s,loading:N,loadingDelay:z,Placeholder:H??h,ref:G,style:F,className:K,slot:O,resizeDebounce:e.resizeDebounce,...oe,children:n.jsxs(je,{syncId:B,margin:ae,data:s,onClick:L,accessibilityLayer:e.accessibilityLayer,className:typeof m=="function"?"has-click-handler":void 0,children:[n.jsx(se,{vertical:e.gridVertical,horizontal:e.gridHorizontal,stroke:e.gridStroke}),k.map((t,o)=>n.jsx(j,{dataKey:t.accessor,xAxisId:o,interval:(t==null?void 0:t.interval)??(b?"preserveStart":0),tick:n.jsx(le,{config:t}),tickLine:o<1,axisLine:o<1,height:e.xAxisVisible?ne[o]:0,padding:pe,allowDuplicatedCategory:o===0,reversed:C,...e.xAxisConfig},t.reactKey)),n.jsx(v,{orientation:C===!0?"right":"left",axisLine:e.yAxisVisible,tickLine:ue,yAxisId:"left",tickFormatter:f==null?void 0:f.formatter,interval:0,tick:e.yAxisTicksVisible&&n.jsx(T,{config:f}),width:ee,...e.yAxisConfig}),((P=e.secondYAxis)==null?void 0:P.dataKey)&&n.jsx(v,{dataKey:e.secondYAxis.dataKey,axisLine:{stroke:e.secondYAxis.color??`var(--sapChart_OrderedColor_${y%12+1})`},tick:n.jsx(T,{config:$,secondYAxisConfig:{color:e.secondYAxis.color??`var(--sapChart_OrderedColor_${y%12+1})`}}),tickLine:{stroke:e.secondYAxis.color??`var(--sapChart_OrderedColor_${y%12+1})`},label:{value:e.secondYAxis.name,offset:2,angle:90,position:"center"},orientation:C===!0?"left":"right",yAxisId:"right",interval:0,...e.secondYAxisConfig}),l.map((t,o)=>{var c;return n.jsx(q,{dot:t.showDot??!b,yAxisId:((c=e.secondYAxis)==null?void 0:c.dataKey)===t.accessor?"right":"left",name:t.label??t.accessor,strokeOpacity:t.opacity,label:b?!1:n.jsx(ce,{config:t,chartType:"line",position:"top"}),type:"monotone",dataKey:t.accessor,stroke:t.color??`var(--sapChart_OrderedColor_${o%12+1})`,strokeWidth:t.width,activeDot:{onClick:L},isAnimationActive:!Y,...t.lineConfig},t.reactKey)}),!R&&n.jsx(Ae,{verticalAlign:e.legendPosition,align:e.legendHorizontalAlign,onClick:J,wrapperStyle:te,...e.legendConfig}),a&&n.jsx(Le,{...a,stroke:(a==null?void 0:a.color)??(a==null?void 0:a.stroke),y:(a==null?void 0:a.value)??(a==null?void 0:a.y),yAxisId:(a==null?void 0:a.yAxisId)??"left",label:a==null?void 0:a.label}),(u==null?void 0:u.active)!==!1&&n.jsx(_e,{cursor:me,formatter:U,contentStyle:fe,labelFormatter:X,...u}),!!e.zoomingTool&&n.jsx(Pe,{dataKey:Q,tickFormatter:r==null?void 0:r.formatter,...ge,...typeof e.zoomingTool=="object"?e.zoomingTool:{}}),M]})})});p.displayName="LineChart";try{p.displayName="LineChart",p.__docgenInfo={description:"A `LineChart` is a type of chart used to show information that changes over time - it connects multiple dots.",displayName:"LineChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one line in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this line should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this line.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: line width, defaults to `1`\n- `opacity`: line opacity, defaults to `1`\n- `showDot`: Flag whether the line dot should be displayed or not.\n- `lineConfig`: This prop allows passing all [Line Properties](https://recharts.org/en-US/api/Line) of the Recharts library.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},loading:{defaultValue:null,description:"Flag whether the chart should display a loading indicator.\n\nThis can either be a skeleton placeholder shimmer (in case the chart has no data yet) or a `BusyIndicator` on top of the chart (in case the chart has already some data to display).",name:"loading",required:!1,type:{name:"boolean"}},loadingDelay:{defaultValue:{value:"1000"},description:"Defines the delay in milliseconds, after which the `BusyIndicator` will be visible on the screen.",name:"loadingDelay",required:!1,type:{name:"number"}},dataset:{defaultValue:null,description:"The `dataset` is an array of objects that contains all the measures and dimensions.\n\n__Note:__ The values for measure data points must be of type `number`.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n- `accessibilityLayer`: Experimental property to improve accessibility. Not supported by all charts and configurations!\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'ICartesianChartConfig & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | "bottom" | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; legendConfig?: Omit<...>; accessibilityLayer?: boolean; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to override internally used tooltip props, so please use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{p.displayName="LineChart",p.__docgenInfo={description:"A `LineChart` is a type of chart used to show information that changes over time - it connects multiple dots.",displayName:"LineChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one line in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this line should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this line.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: line width, defaults to `1`\n- `opacity`: line opacity, defaults to `1`\n- `showDot`: Flag whether the line dot should be displayed or not.\n- `lineConfig`: This prop allows passing all [Line Properties](https://recharts.org/en-US/api/Line) of the Recharts library.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},loading:{defaultValue:null,description:"Flag whether the chart should display a loading indicator.\n\nThis can either be a skeleton placeholder shimmer (in case the chart has no data yet) or a `BusyIndicator` on top of the chart (in case the chart has already some data to display).",name:"loading",required:!1,type:{name:"boolean"}},loadingDelay:{defaultValue:{value:"1000"},description:"Defines the delay in milliseconds, after which the `BusyIndicator` will be visible on the screen.",name:"loadingDelay",required:!1,type:{name:"number"}},dataset:{defaultValue:null,description:"The `dataset` is an array of objects that contains all the measures and dimensions.\n\n__Note:__ The values for measure data points must be of type `number`.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n- `accessibilityLayer`: Experimental property to improve accessibility. Not supported by all charts and configurations!\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'ICartesianChartConfig & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | "bottom" | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; legendConfig?: Omit<...>; accessibilityLayer?: boolean; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to override internally used tooltip props, so please use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}export{p as L};
