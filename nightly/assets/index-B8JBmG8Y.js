import{j as t,r as N,ap as ue,o as R}from"./iframe-CgMbHIkI.js";import{T as C}from"./ThemingParameters-pyhX3s39.js";import{u as pe,t as me,a as fe,b as ge,c as ye,e as E,C as be}from"./staticProps-Dh7sju5C.js";import{u as Ce,a as ve,C as xe,b as L,c as _,Y as j,X as V}from"./YAxisTicks-DasmAhmg.js";import{u as we,C as O}from"./ChartDataLabel-DtQbLLQj.js";import{u as ke}from"./useLongestYAxisLabel-BSwb7Hst.js";import{u as Ae}from"./useOnClickInternal-3XU2-Lth.js";import{u as Le,a as _e,r as je,b as K}from"./useTooltipFormatter-BexaAdh3.js";import{m as Ve,R as Pe,T as Ie,n as De,B as ze,e as qe,o as Te,p as Se}from"./ChartContainer-DDcZh-oS.js";import{C as Ye}from"./react-content-loader.es-D_dLO-iu.js";import{C as Ne,A as Re}from"./ComposedChart-Bd7DGdIW.js";import{L as Oe}from"./Line-l834PRUe.js";import{u as Ke}from"./useIsRTL-CXsGMYTx.js";const Ee=t.jsxs(t.Fragment,{children:[t.jsx("rect",{x:"20",y:"20",width:"85",height:"15"}),t.jsx("rect",{x:"20",y:"40",width:"117",height:"15"}),t.jsx("rect",{x:"20",y:"60",width:"67",height:"15"}),t.jsx("rect",{x:"20",y:"80",width:"75",height:"15"}),t.jsx("rect",{x:"20",y:"100",width:"125",height:"15"}),t.jsx("rect",{x:"20",y:"120",width:"60",height:"15"})]}),Fe=t.jsxs(t.Fragment,{children:[t.jsx("rect",{x:"20",y:"50",width:"15",height:"85"}),t.jsx("rect",{x:"40",y:"18",width:"15",height:"117"}),t.jsx("rect",{x:"60",y:"68",width:"15",height:"67"}),t.jsx("rect",{x:"80",y:"60",width:"15",height:"75"}),t.jsx("rect",{x:"100",y:"10",width:"15",height:"125"}),t.jsx("rect",{x:"120",y:"75",width:"15",height:"60"})]}),Be=t.jsx(t.Fragment,{children:t.jsx("path",{d:"M20 20 L75 40 L85 60 L125 80 L105 100 L90 120 L55 135 L92 120 L107 100 L127 80 L87 60 L77 40 L22 20 Z",fill:"none",strokeWidth:"2"})}),We=t.jsx(t.Fragment,{children:t.jsx("path",{d:"M20 135 L40 80 L60 70 L80 30 L100 50 L120 65 L135 100 L120 67 L100 52 L80 32 L60 72 L40 82 L20 137 Z",fill:"none",strokeWidth:"2"})}),f=({layout:i,measures:v})=>{const c=new Set(v.map(x=>x.type));return t.jsxs(Ye,{viewBox:"0 0 165 145",preserveAspectRatio:"xMidYMid meet",width:"100%",height:"100%",speed:2,backgroundColor:C.sapContent_ImagePlaceholderBackground,foregroundColor:C.sapContent_ImagePlaceholderForegroundColor,backgroundOpacity:C.sapContent_DisabledOpacity,children:[i==="vertical"&&t.jsx("rect",{x:"20",y:"10",width:"1",height:"135"}),i==="horizontal"&&t.jsx("rect",{x:"10",y:"135",width:"135",height:"1"}),i==="vertical"&&c.has("bar")&&Ee,i==="horizontal"&&c.has("bar")&&Fe,i==="vertical"&&(c.has("line")||c.has("area"))&&Be,i==="horizontal"&&(c.has("line")||c.has("area"))&&We]})};try{f.displayName="ComposedChartPlaceholder",f.__docgenInfo={description:"",displayName:"ComposedChartPlaceholder",props:{layout:{defaultValue:null,description:"",name:"layout",required:!0,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},measures:{defaultValue:null,description:"",name:"measures",required:!0,type:{name:"(IChartMeasure & { type: string; })[]"}}}}}catch{}try{f.displayName="ComposedChartPlaceholder",f.__docgenInfo={description:"",displayName:"ComposedChartPlaceholder",props:{layout:{defaultValue:null,description:"",name:"layout",required:!0,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},measures:{defaultValue:null,description:"",name:"measures",required:!0,type:{name:"(IChartMeasure & { type: string; })[]"}}}}}catch{}const Me={formatter:E},He={formatter:E,opacity:1},$e={line:Oe,bar:ze,area:Re},g=N.forwardRef((i,v)=>{const{loading:c,loadingDelay:x,dataset:u,onDataPointClick:y,noLegend:F,noAnimation:B,tooltipConfig:P,onLegendClick:W,onClick:I,layout:r="horizontal",style:M,className:H,slot:$,syncId:U,ChartPlaceholder:X,children:Z,...G}=i,[J,D]=ue(v),a={yAxisLabelsVisible:!0,yAxisVisible:!1,xAxisVisible:!0,gridStroke:C.sapList_BorderColor,gridHorizontal:!0,gridVertical:!1,legendPosition:"bottom",legendHorizontalAlign:"left",zoomingTool:!1,resizeDebounce:250,yAxisWidth:null,yAxisConfig:{},xAxisConfig:{},secondYAxisConfig:{},secondXAxisConfig:{},...i.chartConfig},{referenceLine:s}=a,{dimensions:w,measures:d}=Le(i.dimensions,i.measures,Me,He),Q=_e(d),k=w[0],{primaryMeasure:z,secondaryMeasure:q}=je(d,a?.secondYAxis?.dataKey),ee=we(k?.formatter),te=d.map(({accessor:e})=>e),p=a.secondYAxis?te.findIndex(e=>e===a.secondYAxis?.dataKey):0,ae=e=>({payload:n})=>be.getValueByDataKey(n,e),A=(e,n,h)=>{if(typeof y=="function")if(typeof n=="number"){const o=Array.isArray(e?.value);y(R(h,{value:o?e.value[1]-e.value[0]:e.value,dataIndex:e.index??n,dataKey:o?Object.keys(e).filter(l=>e.value.length?e[l]===e.value[1]-e.value[0]:e[l]===e.value&&l!=="value")[0]:e.dataKey??Object.keys(e).find(l=>e[l]&&e[l]===e.value&&l!=="value"),payload:e.payload}))}else y(R({},{value:Array.isArray(n.value)?n.value[1]-n.value[0]:n.value,dataKey:n.dataKey,dataIndex:n.index,payload:n.payload}))},oe=pe(W),ne=Ae(I),b=u?.length>30,ie=k?.accessor,[T,re]=ke(u,r==="vertical"?w:d,a.legendPosition),se=Ce(a.margin,a.zoomingTool),le=ve(D,r==="vertical"?1:i.dimensions.length),S={axisLine:a.yAxisVisible,tickLine:me,interval:0},ce=N.useCallback(()=>t.jsx(f,{layout:r,measures:d}),[r,d]),{chartConfig:Ue,dimensions:Xe,measures:Ze,...de}=G,m=Ke(D);return t.jsx(Ve,{ref:J,loading:c,loadingDelay:x,dataset:u,Placeholder:X??ce,style:M,className:H,slot:$,resizeDebounce:a.resizeDebounce,...de,children:t.jsxs(Ne,{syncId:U,onClick:ne,stackOffset:"sign",margin:se,data:u,layout:r,accessibilityLayer:a.accessibilityLayer,className:typeof y=="function"||typeof I=="function"?"has-click-handler":void 0,children:[t.jsx(xe,{vertical:a.gridVertical,horizontal:a.gridHorizontal,stroke:a.gridStroke}),w.map((e,n)=>{let h;const o={dataKey:e.accessor,interval:e?.interval??(b?"preserveStart":0),tickLine:n<1,axisLine:n<1,allowDuplicatedCategory:n===0};return r==="vertical"?(o.type="category",o.visible=!1,o.hide=!a.yAxisVisible,o.tick=t.jsx(L,{formatter:e?.formatter}),o.yAxisId=n,o.width=a.yAxisWidth??T,h=j,o.orientation=m?"right":"left"):(o.dataKey=e.accessor,o.tick=t.jsx(_,{formatter:e?.formatter}),o.hide=!a.xAxisVisible,o.xAxisId=n,o.height=le[n],h=V,o.reversed=m),t.jsx(h,{...o},e.reactKey)}),r==="horizontal"&&t.jsx(j,{...S,yAxisId:"primary",width:a.yAxisWidth??T,orientation:m?"right":"left",tick:a.yAxisLabelsVisible?t.jsx(L,{formatter:z?.formatter}):!1,...a.yAxisConfig}),r==="vertical"&&t.jsx(V,{...S,reversed:m,xAxisId:"primary",type:"number",tick:t.jsx(_,{formatter:z?.formatter}),...a.xAxisConfig}),a.secondYAxis?.dataKey&&r==="horizontal"&&t.jsx(j,{dataKey:a.secondYAxis.dataKey,axisLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${p%12+1})`},tick:t.jsx(L,{formatter:q?.formatter,secondYAxisConfig:{color:a.secondYAxis.color??`var(--sapChart_OrderedColor_${p%12+1})`}}),tickLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${p%12+1})`},label:{value:a.secondYAxis.name,offset:2,angle:90,position:"center"},orientation:m?"left":"right",interval:0,yAxisId:"secondary",...a.secondYAxisConfig}),a.secondYAxis?.dataKey&&r==="vertical"&&t.jsx(V,{dataKey:a.secondYAxis.dataKey,axisLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${p%12+1})`},tick:t.jsx(_,{formatter:q?.formatter,secondYAxisConfig:{color:a.secondYAxis.color??`var(--sapChart_OrderedColor_${p%12+1})`}}),tickLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${p%12+1})`},label:{value:a.secondYAxis.name,offset:2,angle:90,position:"center"},orientation:"top",interval:0,xAxisId:"secondary",type:"number",...a.secondXAxisConfig}),s&&t.jsx(Pe,{...s,stroke:s?.color??s?.stroke,y:s?.value?r==="horizontal"?s?.value:void 0:s?.y,x:s?.value?r==="vertical"?s?.value:void 0:s?.x,yAxisId:s?.yAxisId??r==="horizontal"?"primary":void 0,xAxisId:s?.xAxisId??r==="vertical"?"primary":void 0,label:s?.label}),P?.active!==!1&&t.jsx(Ie,{cursor:ge,formatter:Q,contentStyle:fe,labelFormatter:ee,...P}),!F&&t.jsx(De,{verticalAlign:a.legendPosition,align:a.legendHorizontalAlign,onClick:oe,wrapperStyle:re,...a.legendConfig}),d?.map((e,n)=>{const h=$e[e.type],o={isAnimationActive:!B};let l="top";switch(e.type){case"line":o.activeDot={onClick:A},o.strokeWidth=e.width,o.strokeOpacity=e.opacity,o.dot=e.showDot??!b,o.hide=e.hide;break;case"bar":o.hide=e.hide,o.fillOpacity=e.opacity,o.strokeOpacity=e.opacity,o.barSize=e.width,o.onClick=A,o.stackId=e.stackId??void 0,o.labelPosition=e.stackId?"insideTop":"top",r==="vertical"?l="insideRight":l="insideTop";break;case"area":o.dot=!b,o.fillOpacity=.3,o.strokeOpacity=e.opacity,o.strokeWidth=e.width,o.activeDot={onClick:A};break}return r==="vertical"?o.xAxisId=a.secondYAxis?.dataKey===e.accessor?"secondary":"primary":o.yAxisId=a.secondYAxis?.dataKey===e.accessor?"secondary":"primary",t.jsx(h,{name:e.label??e.accessor,label:e.type==="bar"||b?void 0:t.jsx(O,{config:e,chartType:e.type,position:l}),stroke:e.color??`var(--sapChart_OrderedColor_${n%12+1})`,fill:e.color??`var(--sapChart_OrderedColor_${n%12+1})`,type:"monotone",dataKey:e.accessor,...o,children:e.type==="bar"&&t.jsxs(t.Fragment,{children:[t.jsx(qe,{data:u,valueAccessor:ae(e.accessor),content:t.jsx(O,{config:e,chartType:"column",position:"insideTop"})}),u.map((Y,he)=>t.jsx(Te,{fill:K(e,Y,n),stroke:K(e,Y,n)},he))]})},e.reactKey)}),!!a.zoomingTool&&t.jsx(Se,{dataKey:ie,tickFormatter:k?.formatter,...ye,...typeof a.zoomingTool=="object"?a.zoomingTool:{}}),Z]})})});g.displayName="ComposedChart";try{g.displayName="ComposedChart",g.__docgenInfo={description:"The `ComposedChart` enables you to combine different chart types in one chart, e.g. showing bars together with lines.",displayName:"ComposedChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one element in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this element should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n- `type`: string which chart element to show. Possible values: `line`, `bar`, `area`.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this element.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: width of the current chart element, defaults to `1` for `lines` and `20` for bars\n- `opacity`: element opacity, defaults to `1`\n- `stackId`: bars with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},layout:{defaultValue:{value:'`"horizontal"`'},description:"layout for showing measures. `horizontal` bars would equal the column chart, `vertical` would be a bar chart.\nDefault Value: `horizontal`",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},loading:{defaultValue:null,description:"Flag whether the chart should display a loading indicator.\n\nThis can either be a skeleton placeholder shimmer (in case the chart has no data yet) or a `BusyIndicator` on top of the chart (in case the chart has already some data to display).",name:"loading",required:!1,type:{name:"boolean"}},loadingDelay:{defaultValue:{value:"1000"},description:"Defines the delay in milliseconds, after which the `BusyIndicator` will be visible on the screen.",name:"loadingDelay",required:!1,type:{name:"number"}},dataset:{defaultValue:null,description:"The `dataset` is an array of objects that contains all the measures and dimensions.\n\n__Note:__ The values for measure data points must be of type `number`.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n- `accessibilityLayer`: Experimental property to improve accessibility. Not supported by all charts and configurations!\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'ICartesianChartConfig & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | "bottom" | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; legendConfig?: Omit<...>; accessibilityLayer?: boolean; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to override internally used tooltip props, so please use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{g.displayName="ComposedChart",g.__docgenInfo={description:"The `ComposedChart` enables you to combine different chart types in one chart, e.g. showing bars together with lines.",displayName:"ComposedChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one element in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this element should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n- `type`: string which chart element to show. Possible values: `line`, `bar`, `area`.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this element.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: width of the current chart element, defaults to `1` for `lines` and `20` for bars\n- `opacity`: element opacity, defaults to `1`\n- `stackId`: bars with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},layout:{defaultValue:{value:'`"horizontal"`'},description:"layout for showing measures. `horizontal` bars would equal the column chart, `vertical` would be a bar chart.\nDefault Value: `horizontal`",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},loading:{defaultValue:null,description:"Flag whether the chart should display a loading indicator.\n\nThis can either be a skeleton placeholder shimmer (in case the chart has no data yet) or a `BusyIndicator` on top of the chart (in case the chart has already some data to display).",name:"loading",required:!1,type:{name:"boolean"}},loadingDelay:{defaultValue:{value:"1000"},description:"Defines the delay in milliseconds, after which the `BusyIndicator` will be visible on the screen.",name:"loadingDelay",required:!1,type:{name:"number"}},dataset:{defaultValue:null,description:"The `dataset` is an array of objects that contains all the measures and dimensions.\n\n__Note:__ The values for measure data points must be of type `number`.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n- `accessibilityLayer`: Experimental property to improve accessibility. Not supported by all charts and configurations!\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'ICartesianChartConfig & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | "bottom" | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; legendConfig?: Omit<...>; accessibilityLayer?: boolean; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to override internally used tooltip props, so please use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}export{g as C};
