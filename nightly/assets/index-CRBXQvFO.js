import{j as t,r as F,ap as ye,o as B}from"./iframe-CpjYl_X5.js";import{T as k}from"./ThemingParameters-pyhX3s39.js";import{u as be,t as Ce,a as ve,b as xe,c as we,e as $,C as ke}from"./staticProps-mmrlzAOa.js";import{u as Ae,a as _e,C as je,b as V,c as P,Y as I,X as z}from"./YAxisTicks-B6dB2MYc.js";import{u as Le,C as W}from"./ChartDataLabel-DfSnf78_.js";import{u as Ve}from"./useLongestYAxisLabel-C-c47WkD.js";import{u as Pe}from"./useOnClickInternal-DOLmoEA2.js";import{u as Ie,a as ze,r as qe,b as H}from"./useTooltipFormatter-DUQCp58O.js";import{m as De,R as Te,T as Se,n as Ye,B as Ne,e as Re,o as Oe,p as Ke}from"./ChartContainer-Cs7vYMcE.js";import{C as Ee}from"./react-content-loader.es-BcsLvO8G.js";import{C as Fe,A as Be}from"./ComposedChart-D7jQad0I.js";import{L as We}from"./Line-CmZUHR7M.js";import{u as He}from"./useIsRTL-BtNL1jcq.js";const $e=t.jsxs(t.Fragment,{children:[t.jsx("rect",{x:"20",y:"20",width:"85",height:"15"}),t.jsx("rect",{x:"20",y:"40",width:"117",height:"15"}),t.jsx("rect",{x:"20",y:"60",width:"67",height:"15"}),t.jsx("rect",{x:"20",y:"80",width:"75",height:"15"}),t.jsx("rect",{x:"20",y:"100",width:"125",height:"15"}),t.jsx("rect",{x:"20",y:"120",width:"60",height:"15"})]}),Ue=t.jsxs(t.Fragment,{children:[t.jsx("rect",{x:"20",y:"50",width:"15",height:"85"}),t.jsx("rect",{x:"40",y:"18",width:"15",height:"117"}),t.jsx("rect",{x:"60",y:"68",width:"15",height:"67"}),t.jsx("rect",{x:"80",y:"60",width:"15",height:"75"}),t.jsx("rect",{x:"100",y:"10",width:"15",height:"125"}),t.jsx("rect",{x:"120",y:"75",width:"15",height:"60"})]}),Xe=t.jsx(t.Fragment,{children:t.jsx("path",{d:"M20 20 L75 40 L85 60 L125 80 L105 100 L90 120 L55 135 L92 120 L107 100 L127 80 L87 60 L77 40 L22 20 Z",fill:"none",strokeWidth:"2"})}),Me=t.jsx(t.Fragment,{children:t.jsx("path",{d:"M20 135 L40 80 L60 70 L80 30 L100 50 L120 65 L135 100 L120 67 L100 52 L80 32 L60 72 L40 82 L20 137 Z",fill:"none",strokeWidth:"2"})}),b=({layout:r,measures:A})=>{const h=new Set(A.map(_=>_.type));return t.jsxs(Ee,{viewBox:"0 0 165 145",preserveAspectRatio:"xMidYMid meet",width:"100%",height:"100%",speed:2,backgroundColor:k.sapContent_ImagePlaceholderBackground,foregroundColor:k.sapContent_ImagePlaceholderForegroundColor,backgroundOpacity:k.sapContent_DisabledOpacity,children:[r==="vertical"&&t.jsx("rect",{x:"20",y:"10",width:"1",height:"135"}),r==="horizontal"&&t.jsx("rect",{x:"10",y:"135",width:"135",height:"1"}),r==="vertical"&&h.has("bar")&&$e,r==="horizontal"&&h.has("bar")&&Ue,r==="vertical"&&(h.has("line")||h.has("area"))&&Xe,r==="horizontal"&&(h.has("line")||h.has("area"))&&Me]})};try{b.displayName="ComposedChartPlaceholder",b.__docgenInfo={description:"",displayName:"ComposedChartPlaceholder",props:{layout:{defaultValue:null,description:"",name:"layout",required:!0,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},measures:{defaultValue:null,description:"",name:"measures",required:!0,type:{name:"(IChartMeasure & { type: string; })[]"}}}}}catch{}try{b.displayName="ComposedChartPlaceholder",b.__docgenInfo={description:"",displayName:"ComposedChartPlaceholder",props:{layout:{defaultValue:null,description:"",name:"layout",required:!0,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},measures:{defaultValue:null,description:"",name:"measures",required:!0,type:{name:"(IChartMeasure & { type: string; })[]"}}}}}catch{}const Ze={formatter:$},Ge={formatter:$,opacity:1},Je={line:We,bar:Ne,area:Be},C=F.forwardRef((r,A)=>{var Y,N,R;const{loading:h,loadingDelay:_,dataset:u,onDataPointClick:v,noLegend:U,noAnimation:X,tooltipConfig:x,onLegendClick:M,onClick:q,layout:s="horizontal",style:Z,className:G,slot:J,syncId:Q,ChartPlaceholder:ee,children:te,...ae}=r,[oe,D]=ye(A),a={yAxisLabelsVisible:!0,yAxisVisible:!1,xAxisVisible:!0,gridStroke:k.sapList_BorderColor,gridHorizontal:!0,gridVertical:!1,legendPosition:"bottom",legendHorizontalAlign:"left",zoomingTool:!1,resizeDebounce:250,yAxisWidth:null,yAxisConfig:{},xAxisConfig:{},secondYAxisConfig:{},secondXAxisConfig:{},...r.chartConfig},{referenceLine:n}=a,{dimensions:j,measures:c}=Ie(r.dimensions,r.measures,Ze,Ge),ne=ze(c),d=j[0],{primaryMeasure:m,secondaryMeasure:f}=qe(c,(Y=a==null?void 0:a.secondYAxis)==null?void 0:Y.dataKey),ie=Le(d==null?void 0:d.formatter),re=c.map(({accessor:e})=>e),g=a.secondYAxis?re.findIndex(e=>{var i;return e===((i=a.secondYAxis)==null?void 0:i.dataKey)}):0,se=e=>({payload:i})=>ke.getValueByDataKey(i,e),L=(e,i,p)=>{if(typeof v=="function")if(typeof i=="number"){const o=Array.isArray(e==null?void 0:e.value);v(B(p,{value:o?e.value[1]-e.value[0]:e.value,dataIndex:e.index??i,dataKey:o?Object.keys(e).filter(l=>e.value.length?e[l]===e.value[1]-e.value[0]:e[l]===e.value&&l!=="value")[0]:e.dataKey??Object.keys(e).find(l=>e[l]&&e[l]===e.value&&l!=="value"),payload:e.payload}))}else v(B({},{value:Array.isArray(i.value)?i.value[1]-i.value[0]:i.value,dataKey:i.dataKey,dataIndex:i.index,payload:i.payload}))},le=be(M),ce=Pe(q),w=(u==null?void 0:u.length)>30,de=d==null?void 0:d.accessor,[T,he]=Ve(u,s==="vertical"?j:c,a.legendPosition),ue=Ae(a.margin,a.zoomingTool),pe=_e(D,s==="vertical"?1:r.dimensions.length),S={axisLine:a.yAxisVisible,tickLine:Ce,interval:0},me=F.useCallback(()=>t.jsx(b,{layout:s,measures:c}),[s,c]),{chartConfig:Qe,dimensions:et,measures:tt,...fe}=ae,y=He(D);return t.jsx(De,{ref:oe,loading:h,loadingDelay:_,dataset:u,Placeholder:ee??me,style:Z,className:G,slot:J,resizeDebounce:a.resizeDebounce,...fe,children:t.jsxs(Fe,{syncId:Q,onClick:ce,stackOffset:"sign",margin:ue,data:u,layout:s,accessibilityLayer:a.accessibilityLayer,className:typeof v=="function"||typeof q=="function"?"has-click-handler":void 0,children:[t.jsx(je,{vertical:a.gridVertical,horizontal:a.gridHorizontal,stroke:a.gridStroke}),j.map((e,i)=>{let p;const o={dataKey:e.accessor,interval:(e==null?void 0:e.interval)??(w?"preserveStart":0),tickLine:i<1,axisLine:i<1,allowDuplicatedCategory:i===0};return s==="vertical"?(o.type="category",o.visible=!1,o.hide=!a.yAxisVisible,o.tick=t.jsx(V,{formatter:e==null?void 0:e.formatter}),o.yAxisId=i,o.width=a.yAxisWidth??T,p=I,o.orientation=y?"right":"left"):(o.dataKey=e.accessor,o.tick=t.jsx(P,{formatter:e==null?void 0:e.formatter}),o.hide=!a.xAxisVisible,o.xAxisId=i,o.height=pe[i],p=z,o.reversed=y),t.jsx(p,{...o},e.reactKey)}),s==="horizontal"&&t.jsx(I,{...S,yAxisId:"primary",width:a.yAxisWidth??T,orientation:y?"right":"left",tick:a.yAxisLabelsVisible?t.jsx(V,{formatter:m==null?void 0:m.formatter}):!1,...a.yAxisConfig}),s==="vertical"&&t.jsx(z,{...S,reversed:y,xAxisId:"primary",type:"number",tick:t.jsx(P,{formatter:m==null?void 0:m.formatter}),...a.xAxisConfig}),((N=a.secondYAxis)==null?void 0:N.dataKey)&&s==="horizontal"&&t.jsx(I,{dataKey:a.secondYAxis.dataKey,axisLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${g%12+1})`},tick:t.jsx(V,{formatter:f==null?void 0:f.formatter,secondYAxisConfig:{color:a.secondYAxis.color??`var(--sapChart_OrderedColor_${g%12+1})`}}),tickLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${g%12+1})`},label:{value:a.secondYAxis.name,offset:2,angle:90,position:"center"},orientation:y?"left":"right",interval:0,yAxisId:"secondary",...a.secondYAxisConfig}),((R=a.secondYAxis)==null?void 0:R.dataKey)&&s==="vertical"&&t.jsx(z,{dataKey:a.secondYAxis.dataKey,axisLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${g%12+1})`},tick:t.jsx(P,{formatter:f==null?void 0:f.formatter,secondYAxisConfig:{color:a.secondYAxis.color??`var(--sapChart_OrderedColor_${g%12+1})`}}),tickLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${g%12+1})`},label:{value:a.secondYAxis.name,offset:2,angle:90,position:"center"},orientation:"top",interval:0,xAxisId:"secondary",type:"number",...a.secondXAxisConfig}),n&&t.jsx(Te,{...n,stroke:(n==null?void 0:n.color)??(n==null?void 0:n.stroke),y:n!=null&&n.value?s==="horizontal"?n==null?void 0:n.value:void 0:n==null?void 0:n.y,x:n!=null&&n.value?s==="vertical"?n==null?void 0:n.value:void 0:n==null?void 0:n.x,yAxisId:(n==null?void 0:n.yAxisId)??s==="horizontal"?"primary":void 0,xAxisId:(n==null?void 0:n.xAxisId)??s==="vertical"?"primary":void 0,label:n==null?void 0:n.label}),(x==null?void 0:x.active)!==!1&&t.jsx(Se,{cursor:xe,formatter:ne,contentStyle:ve,labelFormatter:ie,...x}),!U&&t.jsx(Ye,{verticalAlign:a.legendPosition,align:a.legendHorizontalAlign,onClick:le,wrapperStyle:he,...a.legendConfig}),c==null?void 0:c.map((e,i)=>{var O,K;const p=Je[e.type],o={isAnimationActive:!X};let l="top";switch(e.type){case"line":o.activeDot={onClick:L},o.strokeWidth=e.width,o.strokeOpacity=e.opacity,o.dot=e.showDot??!w,o.hide=e.hide;break;case"bar":o.hide=e.hide,o.fillOpacity=e.opacity,o.strokeOpacity=e.opacity,o.barSize=e.width,o.onClick=L,o.stackId=e.stackId??void 0,o.labelPosition=e.stackId?"insideTop":"top",s==="vertical"?l="insideRight":l="insideTop";break;case"area":o.dot=!w,o.fillOpacity=.3,o.strokeOpacity=e.opacity,o.strokeWidth=e.width,o.activeDot={onClick:L};break}return s==="vertical"?o.xAxisId=((O=a.secondYAxis)==null?void 0:O.dataKey)===e.accessor?"secondary":"primary":o.yAxisId=((K=a.secondYAxis)==null?void 0:K.dataKey)===e.accessor?"secondary":"primary",t.jsx(p,{name:e.label??e.accessor,label:e.type==="bar"||w?void 0:t.jsx(W,{config:e,chartType:e.type,position:l}),stroke:e.color??`var(--sapChart_OrderedColor_${i%12+1})`,fill:e.color??`var(--sapChart_OrderedColor_${i%12+1})`,type:"monotone",dataKey:e.accessor,...o,children:e.type==="bar"&&t.jsxs(t.Fragment,{children:[t.jsx(Re,{data:u,valueAccessor:se(e.accessor),content:t.jsx(W,{config:e,chartType:"column",position:"insideTop"})}),u.map((E,ge)=>t.jsx(Oe,{fill:H(e,E,i),stroke:H(e,E,i)},ge))]})},e.reactKey)}),!!a.zoomingTool&&t.jsx(Ke,{dataKey:de,tickFormatter:d==null?void 0:d.formatter,...we,...typeof a.zoomingTool=="object"?a.zoomingTool:{}}),te]})})});C.displayName="ComposedChart";try{C.displayName="ComposedChart",C.__docgenInfo={description:"The `ComposedChart` enables you to combine different chart types in one chart, e.g. showing bars together with lines.",displayName:"ComposedChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one element in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this element should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n- `type`: string which chart element to show. Possible values: `line`, `bar`, `area`.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this element.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: width of the current chart element, defaults to `1` for `lines` and `20` for bars\n- `opacity`: element opacity, defaults to `1`\n- `stackId`: bars with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},layout:{defaultValue:{value:'`"horizontal"`'},description:"layout for showing measures. `horizontal` bars would equal the column chart, `vertical` would be a bar chart.\nDefault Value: `horizontal`",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},loading:{defaultValue:null,description:"Flag whether the chart should display a loading indicator.\n\nThis can either be a skeleton placeholder shimmer (in case the chart has no data yet) or a `BusyIndicator` on top of the chart (in case the chart has already some data to display).",name:"loading",required:!1,type:{name:"boolean"}},loadingDelay:{defaultValue:{value:"1000"},description:"Defines the delay in milliseconds, after which the `BusyIndicator` will be visible on the screen.",name:"loadingDelay",required:!1,type:{name:"number"}},dataset:{defaultValue:null,description:"The `dataset` is an array of objects that contains all the measures and dimensions.\n\n__Note:__ The values for measure data points must be of type `number`.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n- `accessibilityLayer`: Experimental property to improve accessibility. Not supported by all charts and configurations!\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'ICartesianChartConfig & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | "bottom" | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; legendConfig?: Omit<...>; accessibilityLayer?: boolean; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to override internally used tooltip props, so please use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{C.displayName="ComposedChart",C.__docgenInfo={description:"The `ComposedChart` enables you to combine different chart types in one chart, e.g. showing bars together with lines.",displayName:"ComposedChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one element in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this element should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n- `type`: string which chart element to show. Possible values: `line`, `bar`, `area`.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this element.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: width of the current chart element, defaults to `1` for `lines` and `20` for bars\n- `opacity`: element opacity, defaults to `1`\n- `stackId`: bars with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},layout:{defaultValue:{value:'`"horizontal"`'},description:"layout for showing measures. `horizontal` bars would equal the column chart, `vertical` would be a bar chart.\nDefault Value: `horizontal`",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},loading:{defaultValue:null,description:"Flag whether the chart should display a loading indicator.\n\nThis can either be a skeleton placeholder shimmer (in case the chart has no data yet) or a `BusyIndicator` on top of the chart (in case the chart has already some data to display).",name:"loading",required:!1,type:{name:"boolean"}},loadingDelay:{defaultValue:{value:"1000"},description:"Defines the delay in milliseconds, after which the `BusyIndicator` will be visible on the screen.",name:"loadingDelay",required:!1,type:{name:"number"}},dataset:{defaultValue:null,description:"The `dataset` is an array of objects that contains all the measures and dimensions.\n\n__Note:__ The values for measure data points must be of type `number`.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n- `accessibilityLayer`: Experimental property to improve accessibility. Not supported by all charts and configurations!\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'ICartesianChartConfig & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | "bottom" | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; legendConfig?: Omit<...>; accessibilityLayer?: boolean; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to override internally used tooltip props, so please use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}export{C};
