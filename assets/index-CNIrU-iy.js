import{j as s}from"./useIsomorphicLayoutEffect-VT0hzFUo.js";import{c as x}from"./clsx-B-dksMZM.js";import{r as b}from"./index-BP8_t0zE.js";import{u as w,E as T}from"./i18n-defaults-DgugUEvt.js";import{u as g}from"./useStylesheet-DovReOaw.js";const k={packageName:"@ui5/webcomponents-react",fileName:"Text.module.css",content:".Text_text_b95k2_1{box-sizing:border-box;color:var(--sapTextColor);display:inline-block;font-family:var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;white-space:pre-line;word-wrap:break-word;max-width:100%}.Text_text_b95k2_1::selection{background:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}.Text_renderWhitespace_b95k2_19{white-space:pre-wrap}.Text_noWrap_b95k2_24{text-overflow:ellipsis;white-space:nowrap;word-wrap:normal;overflow:hidden}.Text_noWrap_b95k2_24.Text_renderWhitespace_b95k2_19{white-space:pre}.Text_maxLines_b95k2_36{display:-webkit-box;-webkit-box-orient:vertical;overflow:hidden;-webkit-line-clamp:var(--_ui5wcr_maxLines)}.Text_hyphenated_b95k2_44{hyphens:auto}.Text_emptyIndicator_b95k2_49{color:var(--sapTextColor);line-height:normal}.Text_pseudoInvisibleText_b95k2_55{font-size:0;left:0;position:absolute;top:0;user-select:none}"},e={text:"Text_text_b95k2_1",renderWhitespace:"Text_renderWhitespace_b95k2_19",noWrap:"Text_noWrap_b95k2_24",maxLines:"Text_maxLines_b95k2_36",hyphenated:"Text_hyphenated_b95k2_44",emptyIndicator:"Text_emptyIndicator_b95k2_49",pseudoInvisibleText:"Text_pseudoInvisibleText_b95k2_55"},t=b.forwardRef((n,o)=>{const{children:i,renderWhitespace:p,wrapping:l=!0,className:d,style:c,maxLines:a,hyphenated:h,emptyIndicator:m,...u}=n;g(k,t.displayName);const _=w("@ui5/webcomponents-react"),f=x(e.text,l===!1&&e.noWrap,p&&e.renderWhitespace,typeof a=="number"&&e.maxLines,h&&e.hyphenated,d),r=m&&!i,y=r?s.jsx("span",{"aria-hidden":r,"data-component-name":"TextEmptyIndicator",className:e.emptyIndicator,children:"â€“"}):i;return s.jsxs("span",{ref:o,style:{"--_ui5wcr_maxLines":typeof a=="number"?a:void 0,...c},className:f,...u,children:[y,r&&s.jsx("span",{className:e.pseudoInvisibleText,"data-component-name":"TextEmptyTextContainer",children:_.getText(T)})]})});t.displayName="Text";try{t.displayName="Text",t.__docgenInfo={description:"The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n\n__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.",displayName:"Text",props:{children:{defaultValue:null,description:`Pass the text as direct child of Text.

__Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.`,name:"children",required:!1,type:{name:"ReactNode"}},renderWhitespace:{defaultValue:null,description:"Defines how white-space inside <code>Text</code> is handled. If set to true, sequences of white space are preserved.",name:"renderWhitespace",required:!1,type:{name:"boolean"}},wrapping:{defaultValue:null,description:"Defines whether the text wraps when there is not enough space.",name:"wrapping",required:!1,type:{name:"boolean"}},maxLines:{defaultValue:null,description:"Limits the number of lines for wrapping texts.",name:"maxLines",required:!1,type:{name:"number"}},emptyIndicator:{defaultValue:null,description:`Specifies if an empty indicator should be displayed when there is no text.
@since 1.23.0`,name:"emptyIndicator",required:!1,type:{name:"boolean"}},hyphenated:{defaultValue:null,description:"Defines the type of text wrapping to be used (hyphenated or normal).\n\n__Note:__ This prop only takes effect if the `wrapping` prop is set to `true`.\n@since 1.23.0",name:"hyphenated",required:!1,type:{name:"boolean"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}}}}}catch{}try{t.displayName="Text",t.__docgenInfo={description:"The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n\n__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.",displayName:"Text",props:{children:{defaultValue:null,description:`Pass the text as direct child of Text.

__Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.`,name:"children",required:!1,type:{name:"ReactNode"}},renderWhitespace:{defaultValue:null,description:"Defines how white-space inside <code>Text</code> is handled. If set to true, sequences of white space are preserved.",name:"renderWhitespace",required:!1,type:{name:"boolean"}},wrapping:{defaultValue:null,description:"Defines whether the text wraps when there is not enough space.",name:"wrapping",required:!1,type:{name:"boolean"}},maxLines:{defaultValue:null,description:"Limits the number of lines for wrapping texts.",name:"maxLines",required:!1,type:{name:"number"}},emptyIndicator:{defaultValue:null,description:`Specifies if an empty indicator should be displayed when there is no text.
@since 1.23.0`,name:"emptyIndicator",required:!1,type:{name:"boolean"}},hyphenated:{defaultValue:null,description:"Defines the type of text wrapping to be used (hyphenated or normal).\n\n__Note:__ This prop only takes effect if the `wrapping` prop is set to `true`.\n@since 1.23.0",name:"hyphenated",required:!1,type:{name:"boolean"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}}}}}catch{}export{t as T};
