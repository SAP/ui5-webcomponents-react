{"version":3,"file":"api-3e6c898a.js","sources":["../../packages/cypress-commands/CommandsAndQueries.tsx"],"sourcesContent":["import { Heading, Markdown } from '@storybook/blocks';\nimport React, { Fragment } from 'react';\n\ninterface CommandsAndQueries {\n  id: number;\n  name: string;\n  kind: number;\n  kindString: string;\n  flags: CommandsAndQueriesFlags;\n  sources: Source[];\n  signatures: Signature[];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface CommandsAndQueriesFlags {}\n\ninterface Signature {\n  id: number;\n  name: string;\n  kind: number;\n  kindString: string;\n  flags: CommandsAndQueriesFlags;\n  comment: SignatureComment;\n  parameters: Parameter[];\n  type: Type;\n}\n\ninterface SignatureComment {\n  summary: Summary[];\n  blockTags: BlockTag[];\n}\n\ninterface BlockTag {\n  tag: string;\n  content: Summary[];\n}\n\ninterface Summary {\n  kind: string;\n  text: string;\n}\n\ninterface Parameter {\n  id: number;\n  name: string;\n  kind: number;\n  kindString: string;\n  flags: ParameterFlags;\n  comment?: ParameterComment;\n  type: Type;\n}\n\ninterface ParameterComment {\n  summary: Summary[];\n}\n\ninterface ParameterFlags {\n  isOptional?: boolean;\n}\n\ninterface Type {\n  type: string;\n  name: string;\n  typeArguments?: Type[];\n  qualifiedName?: string;\n  package?: string;\n}\n\ninterface Source {\n  fileName: string;\n  line: number;\n  character: number;\n  url: string;\n}\n\nfunction typeArgumentsString(typeArguments: Type[] | undefined) {\n  if (!typeArguments) {\n    return '';\n  }\n  return typeArguments.map((args, index, arr) => {\n    let str = args.name;\n    if (arr.length > 1 && index + 1 !== arr.length) {\n      str += ', ';\n    }\n    return str;\n  });\n}\n\nexport const CommandsAndQueries = ({ api }: { api: CommandsAndQueries[] }) => {\n  return api.map((item) => {\n    const { signatures } = item;\n    const { parameters } = signatures[0];\n    return (\n      <Fragment key={item.name}>\n        <Heading>{item.name}</Heading>\n        <code>\n          {item.name}(\n          {parameters\n            ?.map(\n              (param) =>\n                `${param.name}:${param.type.name}${\n                  param.type?.typeArguments?.length ? `<${typeArgumentsString(param.type.typeArguments)}>` : ''\n                }`\n            )\n            .join(', ')}\n          ):\n          {signatures[0]?.type?.name}\n          {`<${typeArgumentsString(signatures[0].type?.typeArguments)}>`}\n        </code>\n        <div>\n          <Markdown>\n            {signatures[0]?.comment.summary.reduce((acc, cur) => `${acc}${cur.text.replaceAll('\\n', '<br>')}`, '')}\n          </Markdown>\n          {signatures[0]?.comment?.blockTags\n            ?.filter((blockTag) => {\n              return blockTag.tag === '@example';\n            })\n            .map((example, index) => {\n              return (\n                <Fragment key={`${example.tag}${index}`}>\n                  {index === 0 && <b>Example</b>}\n                  <Markdown>{example.content.reduce((acc, cur) => `${acc}${cur.text}`, '')}</Markdown>\n                </Fragment>\n              );\n            })}\n          {parameters?.length && (\n            <>\n              <b>Parameters</b>\n              <table>\n                <thead>\n                  <tr>\n                    <td>Name</td>\n                    <td>Type</td>\n                    <td>Description</td>\n                  </tr>\n                </thead>\n                <tbody>\n                  {parameters?.map((param) => (\n                    <tr key={param.name}>\n                      <td>\n                        {param.name}\n                        {param.flags?.isOptional && '?'}\n                      </td>\n                      <td>\n                        <code>\n                          {param.type?.name}\n                          {param.type?.typeArguments &&\n                            `<${param.type?.typeArguments && typeArgumentsString(param.type.typeArguments)}>`}\n                        </code>\n                      </td>\n                      <td>\n                        {param.comment?.summary.reduce((acc, cur) => `${acc}${cur.text.replaceAll('\\n', '<br>')}`, '')}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </>\n          )}\n          <p>\n            <b>Source:</b> <a href={item.sources[0].url}>{`${item.sources[0].fileName}:${item.sources[0].line}`}</a>\n          </p>\n        </div>\n        <br />\n        <br />\n      </Fragment>\n    );\n  });\n};\n\nCommandsAndQueries.displayName = 'CommandsAndQueries';\n"],"names":["typeArgumentsString","typeArguments","args","index","arr","str","CommandsAndQueries","api","item","signatures","parameters","jsxs","Fragment2","jsx","Heading","param","_b","_a","_c","Markdown","_d","acc","cur","_g","_f","_e","blockTag","example","Fragment"],"mappings":"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"}