{"version":3,"file":"BulletChart.stories-92d4e7dc.js","sources":["../../packages/charts/src/components/BulletChart/ComparisonLine.tsx","../../packages/charts/src/components/BulletChart/Placeholder.tsx","../../packages/charts/src/components/BulletChart/BulletChart.tsx"],"sourcesContent":["import type { CSSProperties } from 'react';\nimport React from 'react';\n\ninterface ComparisonLine {\n  x?: number;\n  y?: number;\n  width?: number;\n  height?: number;\n  index?: number;\n  strokeWidth?: number;\n  fill?: CSSProperties['fill'];\n  layout: 'vertical' | 'horizontal';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const ComparisonLine = (props: ComparisonLine) => {\n  const { x, y, width, height, index, fill, strokeWidth, layout } = props;\n\n  const horizontalCalc = {\n    x1: strokeWidth ? x + (width - strokeWidth) / 2 - 1 : x - 3,\n    x2: strokeWidth ? x + strokeWidth + (width - strokeWidth) / 2 : x + width + 3\n  };\n\n  const verticalCalc = {\n    y1: strokeWidth ? y + (height - strokeWidth) / 2 - 1 : y - 3,\n    y2: strokeWidth ? y + strokeWidth + (height - strokeWidth) / 2 : y + height + 3\n  };\n\n  if (layout === 'horizontal') {\n    return (\n      <line\n        key={`target-${index}`}\n        x1={horizontalCalc.x1}\n        x2={horizontalCalc.x2}\n        y1={y}\n        y2={y}\n        stroke={fill}\n        strokeWidth={3}\n      />\n    );\n  }\n\n  return (\n    <line\n      key={`target-${index}`}\n      x1={x + width}\n      x2={x + width}\n      y1={verticalCalc.y1}\n      y2={verticalCalc.y2}\n      stroke={fill}\n      strokeWidth={3}\n    />\n  );\n};\n","import { ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React from 'react';\nimport ContentLoader from 'react-content-loader/dist/react-content-loader.es.js';\nimport type { IChartMeasure } from '../../interfaces/IChartMeasure.js';\n\nconst barContentVertical = (\n  <>\n    <rect x=\"20\" y=\"20\" width=\"85\" height=\"15\" />\n    <rect x=\"20\" y=\"40\" width=\"117\" height=\"15\" />\n    <rect x=\"20\" y=\"60\" width=\"67\" height=\"15\" />\n    <rect x=\"20\" y=\"80\" width=\"75\" height=\"15\" />\n    <rect x=\"20\" y=\"100\" width=\"125\" height=\"15\" />\n    <rect x=\"20\" y=\"120\" width=\"60\" height=\"15\" />\n\n    <rect x=\"115\" y=\"17.5\" width=\"2\" height=\"20\" />\n    <rect x=\"150\" y=\"37.5\" width=\"2\" height=\"20\" />\n    <rect x=\"90\" y=\"57.5\" width=\"2\" height=\"20\" />\n    <rect x=\"100\" y=\"77.5\" width=\"2\" height=\"20\" />\n    <rect x=\"120\" y=\"97.5\" width=\"2\" height=\"20\" />\n    <rect x=\"87\" y=\"117.5\" width=\"2\" height=\"20\" />\n  </>\n);\n\nconst barContentHorizontal = (\n  <>\n    <rect x=\"20\" y=\"50\" width=\"15\" height=\"85\" />\n    <rect x=\"40\" y=\"70\" width=\"15\" height=\"65\" />\n    <rect x=\"60\" y=\"68\" width=\"15\" height=\"67\" />\n    <rect x=\"80\" y=\"60\" width=\"15\" height=\"75\" />\n    <rect x=\"100\" y=\"10\" width=\"15\" height=\"125\" />\n    <rect x=\"120\" y=\"75\" width=\"15\" height=\"60\" />\n\n    <rect x=\"17.5\" y=\"35\" width=\"20\" height=\"2\" />\n    <rect x=\"37.5\" y=\"62\" width=\"20\" height=\"2\" />\n    <rect x=\"57.5\" y=\"56\" width=\"20\" height=\"2\" />\n    <rect x=\"77.5\" y=\"37\" width=\"20\" height=\"2\" />\n    <rect x=\"97.5\" y=\"45\" width=\"20\" height=\"2\" />\n    <rect x=\"117.5\" y=\"70\" width=\"20\" height=\"2\" />\n  </>\n);\n\ninterface BulletChartPlaceholderPropTypes {\n  layout: 'vertical' | 'horizontal';\n  measures: (IChartMeasure & { type: string })[];\n}\n\nexport const BulletChartPlaceholder = ({ layout, measures }: BulletChartPlaceholderPropTypes) => {\n  const distinctElements = new Set(measures.map((item) => item.type));\n\n  return (\n    <ContentLoader\n      viewBox=\"0 0 165 145\"\n      preserveAspectRatio=\"xMidYMid meet\"\n      width=\"100%\"\n      height=\"100%\"\n      speed={2}\n      backgroundColor={ThemingParameters.sapContent_ImagePlaceholderBackground}\n      foregroundColor={ThemingParameters.sapContent_ImagePlaceholderForegroundColor}\n      backgroundOpacity={ThemingParameters.sapContent_DisabledOpacity as any}\n    >\n      {layout === 'vertical' && <rect x=\"20\" y=\"10\" width=\"1\" height=\"135\" />}\n      {layout === 'horizontal' && <rect x=\"10\" y=\"135\" width=\"135\" height=\"1\" />}\n      {layout === 'vertical' && distinctElements.has('primary') && barContentVertical}\n      {layout === 'horizontal' && distinctElements.has('primary') && barContentHorizontal}\n    </ContentLoader>\n  );\n};\n","'use client';\n\nimport { enrichEventWithDetails, ThemingParameters, useIsRTL, useSyncRef } from '@ui5/webcomponents-react-base';\nimport type { CSSProperties } from 'react';\nimport React, { forwardRef, useCallback, useMemo } from 'react';\nimport {\n  Bar,\n  Brush,\n  CartesianGrid,\n  Cell,\n  ComposedChart as ComposedChartLib,\n  Legend,\n  ReferenceLine,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { useChartMargin } from '../../hooks/useChartMargin.js';\nimport { useLabelFormatter } from '../../hooks/useLabelFormatter.js';\nimport { useLegendItemClick } from '../../hooks/useLegendItemClick.js';\nimport { useLongestYAxisLabel } from '../../hooks/useLongestYAxisLabel.js';\nimport { useObserveXAxisHeights } from '../../hooks/useObserveXAxisHeights.js';\nimport { useOnClickInternal } from '../../hooks/useOnClickInternal.js';\nimport { usePrepareDimensionsAndMeasures } from '../../hooks/usePrepareDimensionsAndMeasures.js';\nimport { useTooltipFormatter } from '../../hooks/useTooltipFormatter.js';\nimport type { IChartBaseProps } from '../../interfaces/IChartBaseProps.js';\nimport type { IChartDimension } from '../../interfaces/IChartDimension.js';\nimport type { IChartMeasure } from '../../interfaces/IChartMeasure.js';\nimport { ChartContainer } from '../../internal/ChartContainer.js';\nimport { ChartDataLabel } from '../../internal/ChartDataLabel.js';\nimport { defaultFormatter } from '../../internal/defaults.js';\nimport { tickLineConfig, tooltipContentStyle, tooltipFillOpacity } from '../../internal/staticProps.js';\nimport { getCellColors, resolvePrimaryAndSecondaryMeasures } from '../../internal/Utils.js';\nimport { XAxisTicks } from '../../internal/XAxisTicks.js';\nimport { YAxisTicks } from '../../internal/YAxisTicks.js';\nimport { ComparisonLine } from './ComparisonLine.js';\nimport { BulletChartPlaceholder } from './Placeholder.js';\n\nconst dimensionDefaults = {\n  formatter: defaultFormatter\n};\n\nconst measureDefaults = {\n  formatter: defaultFormatter,\n  opacity: 1\n};\n\ninterface MeasureConfig extends IChartMeasure {\n  /**\n   * width of the current chart element, defaults to `1` for `lines` and `20` for bars\n   */\n  width?: number;\n  /**\n   * Opacity\n   * @default 1\n   */\n  opacity?: number;\n  /**\n   * Chart type\n   */\n  type: AvailableChartTypes;\n  /**\n   * Highlight color of defined elements\n   * @param value {string | number} Current value of the highlighted measure\n   * @param measure {IChartMeasure} Current measure object\n   * @param dataElement {object} Current data element\n   */\n  highlightColor?: (value: number, measure: MeasureConfig, dataElement: Record<string, any>) => CSSProperties['color'];\n}\n\ninterface DimensionConfig extends IChartDimension {\n  interval?: number;\n}\n\nexport interface BulletChartProps extends IChartBaseProps {\n  /**\n   * An array of config objects. Each object will define one dimension of the chart.\n   *\n   * **Required Properties**\n   * - `accessor`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * **Optional Properties**\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `interval`: number that controls how many ticks are rendered on the x axis\n   *\n   */\n  dimensions: DimensionConfig[];\n  /**\n   * An array of config objects. Each object is defining one element in the chart.\n   *\n   * **Required properties**\n   * - `accessor`: string containing the path to the dataset key this element should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   * - `type`: string which chart element (value type) to show. Possible values: `primary`, `comparison`, `additional`.\n   *\n   * **Optional properties**\n   *\n   * - `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n   * - `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `hideDataLabel`: flag whether the data labels should be hidden in the chart for this element.\n   * - `DataLabel`: a custom component to be used for the data label\n   * - `width`: width of the current chart element, defaults to `1` for `lines` and `20` for bars\n   * - `opacity`: element opacity, defaults to `1`\n   * - `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   *    defined condition. Overwrites code>color</code> of the element.\n   *\n   */\n  measures: MeasureConfig[];\n  /**\n   * layout for showing measures. `horizontal` bars would equal the column chart, `vertical` would be a bar chart.\n   * Default Value: `horizontal`\n   */\n  layout?: 'horizontal' | 'vertical';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\ntype AvailableChartTypes = 'primary' | 'comparison' | 'additional' | string;\n\n/**\n * The `BulletChart` is used to compare primary and secondary (comparison) values. The primary and additional values\n * are rendered as a stacked Bar Chart while the comparison value is displayed as a line above.\n */\nconst BulletChart = forwardRef<HTMLDivElement, BulletChartProps>((props, ref) => {\n  const {\n    loading,\n    dataset,\n    onDataPointClick,\n    noLegend,\n    noAnimation,\n    tooltipConfig,\n    onLegendClick,\n    onClick,\n    layout,\n    style,\n    className,\n    slot,\n    syncId,\n    ChartPlaceholder,\n    children,\n    ...rest\n  } = props;\n\n  const [componentRef, chartRef] = useSyncRef<any>(ref);\n\n  const chartConfig = {\n    yAxisVisible: false,\n    xAxisVisible: true,\n    gridStroke: ThemingParameters.sapList_BorderColor,\n    gridHorizontal: true,\n    gridVertical: false,\n    legendPosition: 'bottom',\n    legendHorizontalAlign: 'left',\n    zoomingTool: false,\n    resizeDebounce: 250,\n    yAxisConfig: {},\n    xAxisConfig: {},\n    secondYAxisConfig: {},\n    secondXAxisConfig: {},\n    ...props.chartConfig\n  };\n  const { referenceLine } = chartConfig;\n\n  const { dimensions, measures } = usePrepareDimensionsAndMeasures(\n    props.dimensions,\n    props.measures,\n    dimensionDefaults,\n    measureDefaults\n  );\n\n  const sortedMeasures = useMemo(() => {\n    return measures.sort((measure) => {\n      if (measure.type === 'comparison') {\n        return 1;\n      }\n\n      if (measure.type === 'primary') {\n        return -1;\n      }\n\n      return 0;\n    });\n  }, [measures]);\n\n  const tooltipValueFormatter = useTooltipFormatter(sortedMeasures);\n\n  const primaryDimension = dimensions[0];\n\n  const { primaryMeasure, secondaryMeasure } = resolvePrimaryAndSecondaryMeasures(\n    sortedMeasures,\n    chartConfig?.secondYAxis?.dataKey\n  );\n\n  const labelFormatter = useLabelFormatter(primaryDimension);\n\n  const dataKeys = sortedMeasures.map(({ accessor }) => accessor);\n  const colorSecondY = chartConfig.secondYAxis\n    ? dataKeys.findIndex((key) => key === chartConfig.secondYAxis?.dataKey)\n    : 0;\n\n  const onDataPointClickInternal = useCallback(\n    (payload, eventOrIndex, event) => {\n      if (typeof onDataPointClick === 'function') {\n        if (payload.name) {\n          const payloadValueLength = payload?.value?.length;\n          onDataPointClick(\n            enrichEventWithDetails(event ?? eventOrIndex, {\n              value: payloadValueLength ? payload.value[1] - payload.value[0] : payload.value,\n              dataIndex: payload.index ?? eventOrIndex,\n              dataKey: payloadValueLength\n                ? Object.keys(payload).filter((key) =>\n                    payload.value.length\n                      ? payload[key] === payload.value[1] - payload.value[0]\n                      : payload[key] === payload.value && key !== 'value'\n                  )[0]\n                : payload.dataKey ??\n                  Object.keys(payload).find((key) => payload[key] === payload.value && key !== 'value'),\n              payload: payload.payload\n            })\n          );\n        } else {\n          onDataPointClick(\n            enrichEventWithDetails({} as any, {\n              value: eventOrIndex.value,\n              dataKey: eventOrIndex.dataKey,\n              dataIndex: eventOrIndex.index,\n              payload: eventOrIndex.payload\n            })\n          );\n        }\n      }\n    },\n    [onDataPointClick]\n  );\n\n  const onItemLegendClick = useLegendItemClick(onLegendClick);\n  const onClickInternal = useOnClickInternal(onClick);\n\n  const isBigDataSet = dataset?.length > 30 ?? false;\n  const primaryDimensionAccessor = primaryDimension?.accessor;\n\n  const [yAxisWidth, legendPosition] = useLongestYAxisLabel(\n    dataset,\n    layout === 'vertical' ? dimensions : sortedMeasures,\n    chartConfig.legendPosition\n  );\n\n  const marginChart = useChartMargin(chartConfig.margin, chartConfig.zoomingTool);\n  const xAxisHeights = useObserveXAxisHeights(chartRef, layout === 'vertical' ? 1 : props.dimensions.length);\n\n  const measureAxisProps = {\n    axisLine: chartConfig.yAxisVisible,\n    tickLine: tickLineConfig,\n    tickFormatter: primaryMeasure?.formatter,\n    interval: 0\n  };\n\n  const isRTL = useIsRTL(chartRef);\n\n  const Placeholder = useCallback(() => {\n    return <BulletChartPlaceholder layout={layout} measures={measures} />;\n  }, [layout, measures]);\n\n  const { chartConfig: _0, dimensions: _1, measures: _2, ...propsWithoutOmitted } = rest;\n\n  return (\n    <ChartContainer\n      ref={componentRef}\n      loading={loading}\n      dataset={dataset}\n      Placeholder={ChartPlaceholder ?? Placeholder}\n      style={style}\n      className={className}\n      slot={slot}\n      resizeDebounce={chartConfig.resizeDebounce}\n      {...propsWithoutOmitted}\n    >\n      <ComposedChartLib\n        syncId={syncId}\n        onClick={onClickInternal}\n        stackOffset=\"sign\"\n        margin={marginChart}\n        data={dataset}\n        layout={layout}\n        className={\n          typeof onDataPointClick === 'function' || typeof onClick === 'function' ? 'has-click-handler' : undefined\n        }\n      >\n        <CartesianGrid\n          vertical={chartConfig.gridVertical}\n          horizontal={chartConfig.gridHorizontal}\n          stroke={chartConfig.gridStroke}\n        />\n        {chartConfig.xAxisVisible &&\n          dimensions.map((dimension, index) => {\n            let AxisComponent;\n            const axisProps: any = {\n              dataKey: dimension.accessor,\n              interval: dimension?.interval ?? (isBigDataSet ? 'preserveStart' : 0),\n              tickLine: index < 1,\n              axisLine: index < 1,\n              allowDuplicatedCategory: index === 0\n            };\n\n            if (layout === 'vertical') {\n              axisProps.type = 'category';\n              axisProps.tick = <YAxisTicks config={dimension} />;\n              axisProps.yAxisId = index;\n              axisProps.width = yAxisWidth;\n              AxisComponent = YAxis;\n              axisProps.orientation = isRTL ? 'right' : 'left';\n            } else {\n              axisProps.dataKey = dimension.accessor;\n              axisProps.tick = <XAxisTicks config={dimension} />;\n              axisProps.xAxisId = index;\n              axisProps.height = xAxisHeights[index];\n              AxisComponent = XAxis;\n              axisProps.reversed = isRTL;\n            }\n\n            return <AxisComponent key={dimension.accessor} {...axisProps} />;\n          })}\n        {layout === 'horizontal' && (\n          <YAxis\n            {...measureAxisProps}\n            yAxisId=\"primary\"\n            width={yAxisWidth}\n            orientation={isRTL ? 'right' : 'left'}\n            tick={<YAxisTicks config={primaryMeasure} />}\n            {...chartConfig.yAxisConfig}\n          />\n        )}\n        {layout === 'vertical' && (\n          <XAxis\n            {...measureAxisProps}\n            reversed={isRTL}\n            xAxisId=\"primary\"\n            type=\"number\"\n            tick={<XAxisTicks config={primaryMeasure} />}\n            {...chartConfig.xAxisConfig}\n          />\n        )}\n        {chartConfig.secondYAxis?.dataKey && layout === 'horizontal' && (\n          <YAxis\n            dataKey={chartConfig.secondYAxis.dataKey}\n            axisLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            tick={\n              <YAxisTicks\n                config={secondaryMeasure}\n                secondYAxisConfig={{\n                  color: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n                }}\n              />\n            }\n            tickLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            label={{\n              value: chartConfig.secondYAxis.name,\n              offset: 2,\n              angle: +90,\n              position: 'center'\n            }}\n            orientation={isRTL ? 'left' : 'right'}\n            interval={0}\n            yAxisId=\"secondary\"\n            {...chartConfig.secondYAxisConfig}\n          />\n        )}\n        {chartConfig.secondYAxis?.dataKey && layout === 'vertical' && (\n          <XAxis\n            dataKey={chartConfig.secondYAxis.dataKey}\n            axisLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            tick={\n              <XAxisTicks\n                config={secondaryMeasure}\n                secondYAxisConfig={{\n                  color: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n                }}\n              />\n            }\n            tickLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            label={{ value: chartConfig.secondYAxis.name, offset: 2, angle: +90, position: 'center' }}\n            orientation=\"top\"\n            interval={0}\n            xAxisId=\"secondary\"\n            type=\"number\"\n            {...chartConfig.secondXAxisConfig}\n          />\n        )}\n        {layout === 'horizontal' && <XAxis xAxisId={'comparisonXAxis'} hide />}\n        {layout === 'vertical' && <YAxis yAxisId={'comparisonYAxis'} type={'category'} hide />}\n        {referenceLine && (\n          <ReferenceLine\n            {...referenceLine}\n            stroke={referenceLine?.color ?? referenceLine?.stroke}\n            y={referenceLine?.value ? (layout === 'horizontal' ? referenceLine?.value : undefined) : referenceLine?.y}\n            x={referenceLine?.value ? (layout === 'vertical' ? referenceLine?.value : undefined) : referenceLine?.x}\n            yAxisId={referenceLine?.yAxisId ?? layout === 'horizontal' ? 'primary' : undefined}\n            xAxisId={referenceLine?.xAxisId ?? layout === 'vertical' ? 'primary' : undefined}\n            label={referenceLine?.label}\n          />\n        )}\n        {/*ToDo: remove conditional rendering once `active` is working again (https://github.com/recharts/recharts/issues/2703)*/}\n        {tooltipConfig?.active !== false && (\n          <Tooltip\n            cursor={tooltipFillOpacity}\n            formatter={tooltipValueFormatter}\n            contentStyle={tooltipContentStyle}\n            labelFormatter={labelFormatter}\n            {...tooltipConfig}\n          />\n        )}\n        {!noLegend && (\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          <Legend\n            verticalAlign={chartConfig.legendPosition}\n            align={chartConfig.legendHorizontalAlign}\n            onClick={onItemLegendClick}\n            wrapperStyle={legendPosition}\n          />\n        )}\n        {sortedMeasures?.map((element, index) => {\n          const chartElementProps: any = {\n            isAnimationActive: noAnimation === false\n          };\n          let labelPosition = 'top';\n          switch (element.type) {\n            case 'primary':\n            case 'additional':\n              chartElementProps.fillOpacity = element.opacity;\n              chartElementProps.strokeOpacity = element.opacity;\n              chartElementProps.barSize = element.width;\n              chartElementProps.onClick = onDataPointClickInternal;\n              chartElementProps.stackId = 'A';\n              chartElementProps.labelPosition = element.stackId ? 'insideTop' : 'top';\n              if (layout === 'vertical') {\n                labelPosition = 'insideRight';\n              } else {\n                labelPosition = 'insideTop';\n              }\n              break;\n            case 'comparison':\n              chartElementProps.onClick = onDataPointClickInternal;\n              chartElementProps.fill = element.color ?? 'black';\n              chartElementProps.strokeWidth = element.width;\n              chartElementProps.shape = <ComparisonLine layout={layout} />;\n              chartElementProps.strokeOpacity = element.opacity;\n              chartElementProps.label = false;\n              chartElementProps.xAxisId = 'comparisonXAxis';\n              chartElementProps.yAxisId = 'comparisonYAxis';\n              chartElementProps.dot = !isBigDataSet;\n              break;\n          }\n\n          if (layout === 'vertical') {\n            chartElementProps.xAxisId = chartConfig.secondYAxis?.dataKey === element.accessor ? 'secondary' : 'primary';\n          } else {\n            chartElementProps.yAxisId = chartConfig.secondYAxis?.dataKey === element.accessor ? 'secondary' : 'primary';\n          }\n\n          return (\n            <Bar\n              key={element.accessor}\n              name={element.label ?? element.accessor}\n              label={\n                isBigDataSet ? null : <ChartDataLabel config={element} chartType={'bar'} position={labelPosition} />\n              }\n              stroke={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n              fill={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n              type=\"monotone\"\n              dataKey={element.accessor}\n              {...chartElementProps}\n            >\n              {element.type !== 'comparison' &&\n                dataset.map((data, i) => {\n                  return (\n                    <Cell\n                      key={i}\n                      fill={getCellColors(element, data, index)}\n                      stroke={getCellColors(element, data, index)}\n                    />\n                  );\n                })}\n            </Bar>\n          );\n        })}\n        {chartConfig.zoomingTool && (\n          <Brush\n            y={10}\n            dataKey={primaryDimensionAccessor}\n            tickFormatter={primaryDimension?.formatter}\n            stroke={ThemingParameters.sapObjectHeader_BorderColor}\n            travellerWidth={10}\n            height={20}\n          />\n        )}\n        {children}\n      </ComposedChartLib>\n    </ChartContainer>\n  );\n});\n\nBulletChart.defaultProps = {\n  noLegend: false,\n  noAnimation: false,\n  layout: 'horizontal'\n};\n\nBulletChart.displayName = 'BulletChart';\n\nexport { BulletChart };\n"],"names":["ComparisonLine","props","x","y","width","height","index","fill","strokeWidth","layout","horizontalCalc","verticalCalc","jsx","barContentVertical","jsxs","Fragment","barContentHorizontal","BulletChartPlaceholder","measures","distinctElements","item","ContentLoader","ThemingParameters","dimensionDefaults","defaultFormatter","measureDefaults","BulletChart","forwardRef","ref","loading","dataset","onDataPointClick","noLegend","noAnimation","tooltipConfig","onLegendClick","onClick","style","className","slot","syncId","ChartPlaceholder","children","rest","componentRef","chartRef","useSyncRef","chartConfig","referenceLine","dimensions","usePrepareDimensionsAndMeasures","sortedMeasures","useMemo","measure","tooltipValueFormatter","useTooltipFormatter","primaryDimension","primaryMeasure","secondaryMeasure","resolvePrimaryAndSecondaryMeasures","_a","labelFormatter","useLabelFormatter","dataKeys","accessor","colorSecondY","key","onDataPointClickInternal","useCallback","payload","eventOrIndex","event","payloadValueLength","enrichEventWithDetails","onItemLegendClick","useLegendItemClick","onClickInternal","useOnClickInternal","isBigDataSet","primaryDimensionAccessor","yAxisWidth","legendPosition","useLongestYAxisLabel","marginChart","useChartMargin","xAxisHeights","useObserveXAxisHeights","measureAxisProps","tickLineConfig","isRTL","useIsRTL","Placeholder","_0","_1","_2","propsWithoutOmitted","ChartContainer","ComposedChartLib","CartesianGrid","dimension","AxisComponent","axisProps","YAxisTicks","YAxis","XAxisTicks","XAxis","_b","_c","ReferenceLine","Tooltip","tooltipFillOpacity","tooltipContentStyle","Legend","element","chartElementProps","labelPosition","Bar","ChartDataLabel","data","i","Cell","getCellColors","Brush"],"mappings":"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"}