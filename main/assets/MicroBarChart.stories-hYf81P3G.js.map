{"version":3,"file":"MicroBarChart.stories-hYf81P3G.js","sources":["../../packages/charts/src/components/MicroBarChart/MicroBarChart.tsx"],"sourcesContent":["'use client';\n\nimport { enrichEventWithDetails, ThemingParameters } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport type { CSSProperties } from 'react';\nimport React, { createElement, forwardRef, useCallback, useMemo } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { getValueByDataKey } from 'recharts/lib/util/ChartUtils.js';\nimport type { IChartBaseProps } from '../../interfaces/IChartBaseProps.js';\nimport type { IChartDimension } from '../../interfaces/IChartDimension.js';\nimport type { IChartMeasure } from '../../interfaces/IChartMeasure.js';\nimport { ChartContainer } from '../../internal/ChartContainer.js';\nimport { defaultFormatter } from '../../internal/defaults.js';\nimport { BarChartPlaceholder } from '../BarChart/Placeholder.js';\n\ninterface MeasureConfig extends Omit<IChartMeasure, 'color'> {\n  /**\n   * array of any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n   */\n  colors?: CSSProperties['color'][];\n  /**\n   * Bar Opacity\n   * @default 1\n   */\n  opacity?: number;\n  /**\n   * Bar Width\n   * @default auto\n   */\n  width?: number;\n}\n\nexport interface MicroBarChartProps\n  extends Omit<\n    IChartBaseProps,\n    | 'noLegend'\n    | 'onLegendClick'\n    | 'noAnimation'\n    | 'chartConfig'\n    | 'children'\n    | 'tooltipConfig'\n    | 'onClick'\n    | 'measures'\n    | 'dimensions'\n  > {\n  /**\n   * A object which contains the configuration of the dimension.\n   *\n   * **Required Properties**\n   * - `accessor`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * **Optional Properties**\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   *\n   */\n  dimension: IChartDimension;\n  /**\n   * An array of config objects. Each object is defining one bar in the chart.\n   *\n   * **Required properties**\n   * - `accessor`: string containing the path to the dataset key this bar should display. Supports object structures by using <code>'parent.child'</code>.\n   * Can also be a getter.\n   *\n   * **Optional properties**\n   *\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `colors`: array of any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n   * - `width`: bar width in pixel, defaults to `4`\n   * - `opacity`: bar opacity, defaults to `1`\n   * - `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n   * - `DataLabel`: a custom component to be used for the data label\n   */\n  measure: MeasureConfig;\n  /**\n   * An optional number for the maxValue of the valueBar.\n   * Default is the highest number of the corresponding accessor in the dataset.\n   */\n  maxValue?: number;\n}\n\nconst resolveColor = (index: number, color = null) => {\n  if (color) {\n    return ThemingParameters[color] ?? color;\n  }\n  return ThemingParameters[`sapChart_Sequence_${(index % 11) + 1}`];\n};\n\nconst MicroBarChartStyles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontWeight: 'normal',\n    width: '100%',\n    height: '100%',\n    justifyContent: 'space-around'\n  },\n  barContainer: {\n    cursor: 'auto'\n  },\n  barContainerActive: {\n    '&:active': { opacity: '0.3 !important' },\n    cursor: 'pointer'\n  },\n  labelContainer: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  valueContainer: {\n    display: 'flex',\n    backgroundColor: ThemingParameters.sapContent_Placeholderloading_Background\n  },\n  valueBar: { height: '100%' },\n  label: {\n    color: ThemingParameters.sapContent_LabelColor,\n    display: 'block',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    fontSize: ThemingParameters.sapFontSmallSize,\n    maxWidth: '70%'\n  },\n  text: {\n    paddingLeft: '6px',\n    display: 'inline-block',\n    overflow: 'hidden',\n    fontSize: ThemingParameters.sapFontSmallSize,\n    boxSizing: 'border-box',\n\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    color: ThemingParameters.sapTextColor,\n    textAlign: 'right'\n  }\n};\n\nconst useStyles = createUseStyles(MicroBarChartStyles, { name: 'MicroBarChart' });\n\n/**\n * The `MicroBarChart` compares different values of the same category to each other by displaying them in a compact way.\n */\nconst MicroBarChart = forwardRef<HTMLDivElement, MicroBarChartProps>((props, ref) => {\n  const { loading, dataset, onDataPointClick, style, className, slot, ChartPlaceholder, ...rest } = props;\n\n  const classes = useStyles();\n\n  const dimension = useMemo<IChartDimension>(\n    () => ({\n      formatter: defaultFormatter,\n      ...props.dimension\n    }),\n    [props.dimension]\n  );\n  const measure: MeasureConfig = useMemo(\n    () => ({\n      formatter: defaultFormatter,\n      ...props.measure\n    }),\n    [props.measure]\n  );\n\n  const maxValue = useMemo(() => {\n    if (dataset) {\n      const maxDatasetValue = Math.max(...dataset?.map((item) => getValueByDataKey(item, measure.accessor)));\n      return props.maxValue ?? maxDatasetValue;\n    }\n    return 0;\n  }, [dataset, measure, props.maxValue]);\n\n  const barHeight = measure?.width ? `${measure.width}px` : '4px';\n\n  const onBarClick = useCallback(\n    (item, index) => (e) => {\n      if (typeof onDataPointClick === 'function') {\n        onDataPointClick(\n          enrichEventWithDetails(e, {\n            dataKey: measure.accessor,\n            value: getValueByDataKey(item, measure.accessor),\n            payload: item,\n            dataIndex: index\n          })\n        );\n      }\n    },\n    [measure.accessor, onDataPointClick]\n  );\n  const barContainerClasses = clsx(classes.barContainer, onDataPointClick && classes.barContainerActive);\n  const { maxValue: _0, dimension: _1, measure: _2, ...propsWithoutOmitted } = rest;\n  return (\n    <ChartContainer\n      dataset={dataset}\n      loading={loading}\n      Placeholder={ChartPlaceholder ?? BarChartPlaceholder}\n      ref={ref}\n      style={style}\n      className={className}\n      slot={slot}\n      resizeDebounce={250}\n      {...propsWithoutOmitted}\n    >\n      <div className={classes.container}>\n        {dataset?.map((item, index) => {\n          const dimensionValue = getValueByDataKey(item, dimension.accessor);\n          const measureValue = getValueByDataKey(item, measure.accessor);\n          const formattedDimension = dimension.formatter(dimensionValue);\n          let formattedMeasure: any = '';\n          if (!measure.hideDataLabel) {\n            if (measure.DataLabel) {\n              formattedMeasure = createElement(measure.DataLabel, {\n                value: measureValue,\n                config: measure,\n                formattedValue: measure.formatter(measureValue)\n              });\n            } else {\n              formattedMeasure = measure.formatter(measureValue);\n            }\n          }\n          return (\n            <div key={dimensionValue} className={barContainerClasses} onClick={onBarClick(item, index)}>\n              <div className={classes.labelContainer}>\n                <span className={classes.label} title={formattedDimension}>\n                  {formattedDimension}\n                </span>\n                <span className={classes.text} title={formattedMeasure}>\n                  {measure.hideDataLabel ? '' : formattedMeasure}\n                </span>\n              </div>\n              <div\n                className={classes.valueContainer}\n                style={{\n                  opacity: measure?.opacity ?? 1,\n                  height: barHeight\n                }}\n              >\n                <div\n                  className={classes.valueBar}\n                  style={{\n                    width: `${(measureValue / maxValue) * 100}%`,\n                    backgroundColor: resolveColor(index, measure?.colors?.[index])\n                  }}\n                />\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </ChartContainer>\n  );\n});\n\nMicroBarChart.displayName = 'MicroBarChart';\n\nexport { MicroBarChart };\n"],"names":["resolveColor","index","color","ThemingParameters","MicroBarChartStyles","useStyles","createUseStyles","MicroBarChart","forwardRef","props","ref","loading","dataset","onDataPointClick","style","className","slot","ChartPlaceholder","rest","classes","dimension","useMemo","defaultFormatter","measure","maxValue","maxDatasetValue","item","getValueByDataKey","barHeight","onBarClick","useCallback","e","enrichEventWithDetails","barContainerClasses","clsx","_0","_1","_2","propsWithoutOmitted","jsx","ChartContainer","BarChartPlaceholder","dimensionValue","measureValue","formattedDimension","formattedMeasure","createElement","jsxs","_a"],"mappings":"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"}