{"version":3,"file":"LineChart-8c25b759.js","sources":["../../node_modules/recharts/es6/chart/LineChart.js","../../packages/charts/src/components/LineChart/Placeholder.tsx","../../packages/charts/src/components/LineChart/LineChart.tsx"],"sourcesContent":["/**\n * @fileOverview Line Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Line } from '../cartesian/Line';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var LineChart = generateCategoricalChart({\n  chartName: 'LineChart',\n  GraphicalChild: Line,\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import { ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React from 'react';\nimport ContentLoader from 'react-content-loader/dist/react-content-loader.es.js';\n\nexport const LineChartPlaceholder = (props) => {\n  return (\n    <ContentLoader\n      viewBox=\"0 0 165 145\"\n      preserveAspectRatio=\"xMidYMid meet\"\n      width=\"100%\"\n      height=\"100%\"\n      speed={2}\n      backgroundColor={ThemingParameters.sapContent_ImagePlaceholderBackground}\n      foregroundColor={ThemingParameters.sapContent_ImagePlaceholderForegroundColor}\n      backgroundOpacity={ThemingParameters.sapContent_DisabledOpacity as any}\n      {...props}\n    >\n      <rect x=\"10\" y=\"135\" width=\"135\" height=\"1\" />\n      <path\n        d=\"M20 135 L40 80 L60 70 L80 30 L100 50 L120 65 L 135 100 L120 67 L100 52 L80 32 L60 72 L40 82 L20 137 Z\"\n        fill=\"none\"\n        strokeWidth=\"2\"\n      />\n    </ContentLoader>\n  );\n};\n","'use client';\n\nimport { enrichEventWithDetails, ThemingParameters, useIsRTL, useSyncRef } from '@ui5/webcomponents-react-base';\nimport React, { forwardRef, useCallback, useRef } from 'react';\nimport type { LineProps } from 'recharts';\nimport {\n  Brush,\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart as LineChartLib,\n  ReferenceLine,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { useChartMargin } from '../../hooks/useChartMargin.js';\nimport { useLabelFormatter } from '../../hooks/useLabelFormatter.js';\nimport { useLegendItemClick } from '../../hooks/useLegendItemClick.js';\nimport { useLongestYAxisLabel } from '../../hooks/useLongestYAxisLabel.js';\nimport { useObserveXAxisHeights } from '../../hooks/useObserveXAxisHeights.js';\nimport { usePrepareDimensionsAndMeasures } from '../../hooks/usePrepareDimensionsAndMeasures.js';\nimport { useTooltipFormatter } from '../../hooks/useTooltipFormatter.js';\nimport type { IChartBaseProps } from '../../interfaces/IChartBaseProps.js';\nimport type { IChartDimension } from '../../interfaces/IChartDimension.js';\nimport type { IChartMeasure } from '../../interfaces/IChartMeasure.js';\nimport { ChartContainer } from '../../internal/ChartContainer.js';\nimport { ChartDataLabel } from '../../internal/ChartDataLabel.js';\nimport { defaultFormatter } from '../../internal/defaults.js';\nimport { tickLineConfig, tooltipContentStyle, tooltipFillOpacity, xAxisPadding } from '../../internal/staticProps.js';\nimport { resolvePrimaryAndSecondaryMeasures } from '../../internal/Utils.js';\nimport { XAxisTicks } from '../../internal/XAxisTicks.js';\nimport { YAxisTicks } from '../../internal/YAxisTicks.js';\nimport { LineChartPlaceholder } from './Placeholder.js';\n\ninterface MeasureConfig extends IChartMeasure {\n  /**\n   * Line Width\n   * @default 1\n   */\n  width?: number;\n  /**\n   * Line Opacity\n   * @default 1\n   */\n  opacity?: number;\n\n  /**\n   * Flag whether the line dot should be displayed or not.\n   */\n  showDot?: boolean;\n  /**\n   * This prop allows passing all [Line Properties](https://recharts.org/en-US/api/Line) of the Recharts library.\n   *\n   * __Note:__ It is possible to overwrite internal implementations. Please use with caution!\n   */\n  lineConfig?: LineProps;\n}\n\ninterface DimensionConfig extends IChartDimension {\n  interval?: number;\n}\n\nexport interface LineChartProps extends IChartBaseProps {\n  /**\n   * An array of config objects. Each object will define one dimension of the chart.\n   *\n   * **Required Properties**\n   * - `accessor`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * **Optional Properties**\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `interval`: number that controls how many ticks are rendered on the x axis\n   *\n   */\n  dimensions: DimensionConfig[];\n  /**\n   * An array of config objects. Each object is defining one line in the chart.\n   *\n   * **Required properties**\n   * - `accessor`: string containing the path to the dataset key this line should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * **Optional properties**\n   *\n   * - `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n   * - `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `hideDataLabel`: flag whether the data labels should be hidden in the chart for this line.\n   * - `DataLabel`: a custom component to be used for the data label\n   * - `width`: line width, defaults to `1`\n   * - `opacity`: line opacity, defaults to `1`\n   * - `showDot`: Flag whether the line dot should be displayed or not.\n   * - `lineConfig`: This prop allows passing all [Line Properties](https://recharts.org/en-US/api/Line) of the Recharts library.\n   *\n   */\n  measures: MeasureConfig[];\n}\n\nconst dimensionDefaults = {\n  formatter: defaultFormatter\n};\n\nconst measureDefaults = {\n  formatter: defaultFormatter,\n  width: 1,\n  opacity: 1\n};\n\n/**\n * A `LineChart` is a type of chart used to show information that changes over time - it connects multiple dots.\n */\nconst LineChart = forwardRef<HTMLDivElement, LineChartProps>((props, ref) => {\n  const {\n    dataset,\n    loading,\n    noLegend,\n    noAnimation,\n    tooltipConfig,\n    onDataPointClick,\n    onLegendClick,\n    onClick,\n    style,\n    className,\n    slot,\n    syncId,\n    ChartPlaceholder,\n    children,\n    ...rest\n  } = props;\n\n  const chartConfig = {\n    yAxisVisible: false,\n    xAxisVisible: true,\n    gridStroke: ThemingParameters.sapList_BorderColor,\n    gridHorizontal: true,\n    gridVertical: false,\n    legendPosition: 'bottom',\n    legendHorizontalAlign: 'left',\n    zoomingTool: false,\n    resizeDebounce: 250,\n    yAxisTicksVisible: true,\n    yAxisConfig: {},\n    xAxisConfig: {},\n    secondYAxisConfig: {},\n    ...props.chartConfig\n  };\n\n  const { dimensions, measures } = usePrepareDimensionsAndMeasures(\n    props.dimensions,\n    props.measures,\n    dimensionDefaults,\n    measureDefaults\n  );\n\n  const tooltipValueFormatter = useTooltipFormatter(measures);\n\n  const primaryDimension = dimensions[0];\n  const { primaryMeasure, secondaryMeasure } = resolvePrimaryAndSecondaryMeasures(\n    measures,\n    chartConfig?.secondYAxis?.dataKey\n  );\n\n  const labelFormatter = useLabelFormatter(primaryDimension);\n\n  const [componentRef, chartRef] = useSyncRef<any>(ref);\n\n  const dataKeys = measures.map(({ accessor }) => accessor);\n  const colorSecondY = chartConfig.secondYAxis\n    ? dataKeys.findIndex((key) => key === chartConfig.secondYAxis?.dataKey)\n    : 0;\n\n  const onItemLegendClick = useLegendItemClick(onLegendClick);\n  const preventOnClickCall = useRef(0);\n  const onDataPointClickInternal = useCallback(\n    (payload, eventOrIndex) => {\n      if (eventOrIndex.dataKey && typeof onDataPointClick === 'function') {\n        preventOnClickCall.current = 2;\n        onDataPointClick(\n          enrichEventWithDetails({} as any, {\n            value: eventOrIndex.value,\n            dataKey: eventOrIndex.dataKey,\n            dataIndex: eventOrIndex.index,\n            payload: eventOrIndex.payload\n          })\n        );\n      } else if (typeof onClick === 'function' && preventOnClickCall.current === 0) {\n        onClick(\n          enrichEventWithDetails(eventOrIndex, {\n            payload: payload?.activePayload?.[0]?.payload,\n            activePayloads: payload?.activePayload\n          })\n        );\n      }\n      if (preventOnClickCall.current > 0) {\n        preventOnClickCall.current -= 1;\n      }\n    },\n    [onDataPointClick, preventOnClickCall.current]\n  );\n\n  const isBigDataSet = dataset?.length > 30 ?? false;\n  const primaryDimensionAccessor = primaryDimension?.accessor;\n\n  const [yAxisWidth, legendPosition] = useLongestYAxisLabel(dataset, measures, chartConfig.legendPosition);\n  const marginChart = useChartMargin(chartConfig.margin, chartConfig.zoomingTool);\n  const xAxisHeights = useObserveXAxisHeights(chartRef, props.dimensions.length);\n  const { chartConfig: _0, dimensions: _1, measures: _2, ...propsWithoutOmitted } = rest;\n  const isRTL = useIsRTL(chartRef);\n  const referenceLine = chartConfig.referenceLine;\n\n  return (\n    <ChartContainer\n      dataset={dataset}\n      loading={loading}\n      Placeholder={ChartPlaceholder ?? LineChartPlaceholder}\n      ref={componentRef}\n      style={style}\n      className={className}\n      slot={slot}\n      resizeDebounce={chartConfig.resizeDebounce}\n      {...propsWithoutOmitted}\n    >\n      <LineChartLib\n        syncId={syncId}\n        margin={marginChart}\n        data={dataset}\n        onClick={onDataPointClickInternal}\n        className={typeof onDataPointClick === 'function' ? 'has-click-handler' : undefined}\n      >\n        <CartesianGrid\n          vertical={chartConfig.gridVertical}\n          horizontal={chartConfig.gridHorizontal}\n          stroke={chartConfig.gridStroke}\n        />\n        {dimensions.map((dimension, index) => {\n          return (\n            <XAxis\n              key={dimension.accessor}\n              dataKey={dimension.accessor}\n              xAxisId={index}\n              interval={dimension?.interval ?? (isBigDataSet ? 'preserveStart' : 0)}\n              tick={<XAxisTicks config={dimension} />}\n              tickLine={index < 1}\n              axisLine={index < 1}\n              height={chartConfig.xAxisVisible ? xAxisHeights[index] : 0}\n              padding={xAxisPadding}\n              allowDuplicatedCategory={index === 0}\n              reversed={isRTL}\n              {...chartConfig.xAxisConfig}\n            />\n          );\n        })}\n        <YAxis\n          orientation={isRTL === true ? 'right' : 'left'}\n          axisLine={chartConfig.yAxisVisible}\n          tickLine={tickLineConfig}\n          yAxisId=\"left\"\n          tickFormatter={primaryMeasure?.formatter}\n          interval={0}\n          tick={chartConfig.yAxisTicksVisible && <YAxisTicks config={primaryMeasure} />}\n          width={yAxisWidth}\n          {...chartConfig.yAxisConfig}\n        />\n        {chartConfig.secondYAxis?.dataKey && (\n          <YAxis\n            dataKey={chartConfig.secondYAxis.dataKey}\n            axisLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            tick={\n              <YAxisTicks\n                config={secondaryMeasure}\n                secondYAxisConfig={{\n                  color: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n                }}\n              />\n            }\n            tickLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            label={{ value: chartConfig.secondYAxis.name, offset: 2, angle: +90, position: 'center' }}\n            orientation={isRTL === true ? 'left' : 'right'}\n            yAxisId=\"right\"\n            interval={0}\n            {...chartConfig.secondYAxisConfig}\n          />\n        )}\n        {measures.map((element, index) => {\n          return (\n            <Line\n              dot={element.showDot ?? !isBigDataSet}\n              yAxisId={chartConfig.secondYAxis?.dataKey === element.accessor ? 'right' : 'left'}\n              key={element.accessor}\n              name={element.label ?? element.accessor}\n              strokeOpacity={element.opacity}\n              // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              // @ts-ignore\n              label={isBigDataSet ? false : <ChartDataLabel config={element} chartType=\"line\" position=\"top\" />}\n              type=\"monotone\"\n              dataKey={element.accessor}\n              stroke={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n              strokeWidth={element.width}\n              activeDot={{ onClick: onDataPointClickInternal } as any}\n              isAnimationActive={noAnimation === false}\n              {...element.lineConfig}\n            />\n          );\n        })}\n        {!noLegend && (\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          <Legend\n            verticalAlign={chartConfig.legendPosition}\n            align={chartConfig.legendHorizontalAlign}\n            onClick={onItemLegendClick}\n            wrapperStyle={legendPosition}\n          />\n        )}\n        {referenceLine && (\n          <ReferenceLine\n            {...referenceLine}\n            stroke={referenceLine?.color ?? referenceLine?.stroke}\n            y={referenceLine?.value ?? referenceLine?.y}\n            yAxisId={referenceLine?.yAxisId ?? 'left'}\n            label={referenceLine?.label}\n          />\n        )}\n        {/*ToDo: remove conditional rendering once `active` is working again (https://github.com/recharts/recharts/issues/2703)*/}\n        {tooltipConfig?.active !== false && (\n          <Tooltip\n            cursor={tooltipFillOpacity}\n            formatter={tooltipValueFormatter}\n            contentStyle={tooltipContentStyle}\n            labelFormatter={labelFormatter}\n            {...tooltipConfig}\n          />\n        )}\n        {chartConfig.zoomingTool && (\n          <Brush\n            y={10}\n            dataKey={primaryDimensionAccessor}\n            tickFormatter={primaryDimension?.formatter}\n            stroke={ThemingParameters.sapObjectHeader_BorderColor}\n            travellerWidth={10}\n            height={20}\n          />\n        )}\n        {children}\n      </LineChartLib>\n    </ChartContainer>\n  );\n});\n\nLineChart.defaultProps = {\n  noLegend: false,\n  noAnimation: false\n};\n\nLineChart.displayName = 'LineChart';\n\nexport { LineChart };\n"],"names":["LineChart","generateCategoricalChart","Line","XAxis","YAxis","formatAxisMap","LineChartPlaceholder","props","jsxs","ContentLoader","ThemingParameters","jsx","dimensionDefaults","defaultFormatter","measureDefaults","forwardRef","ref","dataset","loading","noLegend","noAnimation","tooltipConfig","onDataPointClick","onLegendClick","onClick","style","className","slot","syncId","ChartPlaceholder","children","rest","chartConfig","dimensions","measures","usePrepareDimensionsAndMeasures","tooltipValueFormatter","useTooltipFormatter","primaryDimension","primaryMeasure","secondaryMeasure","resolvePrimaryAndSecondaryMeasures","_a","labelFormatter","useLabelFormatter","componentRef","chartRef","useSyncRef","dataKeys","accessor","colorSecondY","key","onItemLegendClick","useLegendItemClick","preventOnClickCall","useRef","onDataPointClickInternal","useCallback","payload","eventOrIndex","enrichEventWithDetails","_b","isBigDataSet","primaryDimensionAccessor","yAxisWidth","legendPosition","useLongestYAxisLabel","marginChart","useChartMargin","xAxisHeights","useObserveXAxisHeights","_0","_1","_2","propsWithoutOmitted","isRTL","useIsRTL","referenceLine","ChartContainer","LineChartLib","CartesianGrid","dimension","index","XAxisTicks","xAxisPadding","tickLineConfig","YAxisTicks","element","ChartDataLabel","Legend","ReferenceLine","Tooltip","tooltipFillOpacity","tooltipContentStyle","Brush"],"mappings":"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","x_google_ignoreList":[0]}