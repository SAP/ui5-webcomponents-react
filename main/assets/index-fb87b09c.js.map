{"version":3,"mappings":"iLAiMA,MAAAA,EAAAC,EAAc,YACZ,oGACyG,mFACnB,6BAC1D,sEAC2C,IAAAC,EAAA,uCAAAC,KAAA,25BAEzE,EAEAH,EAAA,oBAEAA,EAAA,cAAqB,KAAAI,EAAA,KACH,WAAAC,EAAA,IAElB","names":["Input","withWebComponent","__vitePreload","n","InputType","ValueState"],"sources":["../../packages/main/src/webComponents/Input/index.tsx"],"sourcesContent":["'use client';\n\nimport '@ui5/webcomponents/dist/Input.js';\nimport type {\n  InputSuggestionItemPreviewEventDetail,\n  InputSuggestionItemSelectEventDetail\n} from '@ui5/webcomponents/dist/Input.js';\nimport type { ReactNode } from 'react';\nimport { InputType, ValueState } from '../../enums/index.js';\nimport type { Ui5CustomEvent, CommonProps, Ui5DomRef } from '../../interfaces/index.js';\nimport { withWebComponent } from '../../internal/withWebComponent.js';\nimport type { UI5WCSlotsNode } from '../../types/index.js';\n\ninterface InputAttributes {\n  /**\n   * Defines the accessible ARIA name of the component.\n   */\n  accessibleName?: string;\n  /**\n   * Receives id(or many ids) of the elements that label the input.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Defines whether the component is in disabled state.\n   *\n   * **Note:** A disabled component is completely noninteractive.\n   */\n  disabled?: boolean;\n  /**\n   * Sets the maximum number of characters available in the input field.\n   *\n   * **Note:** This property is not compatible with the Input type InputType.Number. If the Input type is set to Number, the maxlength value is ignored.\n   */\n  maxlength?: number;\n  /**\n   * Determines the name with which the component will be submitted in an HTML form.\n   *\n   * **Important:** For the `name` property to have effect, you must add the following import to your project: `import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n   *\n   * **Note:** When set, a native `input` HTML element will be created inside the component so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit a form.\n   */\n  name?: string;\n  /**\n   * Defines whether the value will be autcompleted to match an item\n   */\n  noTypeahead?: boolean;\n  /**\n   * Defines a short hint intended to aid the user with data entry when the component has no value.\n   */\n  placeholder?: string;\n  /**\n   * Defines whether the component is read-only.\n   *\n   * **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.\n   */\n  readonly?: boolean;\n  /**\n   * Defines whether the component is required.\n   */\n  required?: boolean;\n  /**\n   * Defines whether the clear icon of the input will be shown.\n   */\n  showClearIcon?: boolean;\n  /**\n   * Defines whether the component should show suggestions, if such are present.\n   *\n   * **Note:** You need to import the `InputSuggestions` module from `\"@ui5/webcomponents/dist/features/InputSuggestions.js\"` to enable this functionality.\n   */\n  showSuggestions?: boolean;\n  /**\n   * Defines the HTML type of the component. Available options are: `Text`, `Email`, `Number`, `Password`, `Tel`, and `URL`.\n   *\n   * **Notes:**\n   *\n   * *   The particular effect of this property differs depending on the browser and the current language settings, especially for type `Number`.\n   * *   The property is mostly intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.\n   */\n  type?: InputType | keyof typeof InputType;\n  /**\n   * Defines the value of the component.\n   *\n   * **Note:** The property is updated upon typing.\n   */\n  value?: string;\n  /**\n   * Defines the value state of the component.\n   *\n   * Available options are:\n   *\n   * *   `None`\n   * *   `Error`\n   * *   `Warning`\n   * *   `Success`\n   * *   `Information`\n   */\n  valueState?: ValueState | keyof typeof ValueState;\n}\n\nexport interface InputDomRef extends InputAttributes, Ui5DomRef {\n  /**\n   * The suggestion item on preview.\n   */\n  readonly previewItem: ReactNode;\n  /**\n   * Manually opens the suggestions popover, assuming suggestions are enabled. Items must be preloaded for it to open.\n   */\n  openPicker: () => void;\n}\n\nexport interface InputPropTypes extends InputAttributes, Omit<CommonProps, 'onChange' | 'onInput'> {\n  /**\n   * Defines the suggestion items.\n   *\n   * Example:\n   *\n   * <pre>\n   *   <code>\n   *    &lt;Input showSuggestions><br />\n   *    &nbsp;&nbsp;&lt;SuggestionItem text=\"Item #1\" /><br />\n   *    &nbsp;&nbsp;&lt;SuggestionItem text=\"Item #2\" /><br />\n   *    &lt;/Input>\n   *  </code>\n   * </pre>\n   *\n   *\n   * **Note:** The suggestions would be displayed only if the `showSuggestions` property is set to `true`.\n   *\n   * **Note:** The `<SuggestionItem>` and `<SuggestionGroupItem>` are recommended to be used as suggestion items.\n   *\n   * **Note:** Importing the Input Suggestions Support feature:\n   * `import \"@ui5/webcomponents/dist/features/InputSuggestions.js\";`\n   * automatically imports the `<SuggestionItem>` and `<SuggestionGroupItem>` for your convenience.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the icon to be displayed in the component.\n   *\n   * __Note:__ This prop will be rendered as [slot](https://www.w3schools.com/tags/tag_slot.asp) (`slot=\"icon\"`).\n   * Since you can't change the DOM order of slots when declaring them within a prop, it might prove beneficial to manually mount them as part of the component's children, especially when facing problems with the reading order of screen readers.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-handling-slots--docs).\n   */\n  icon?: UI5WCSlotsNode | UI5WCSlotsNode[];\n  /**\n   * Defines the value state message that will be displayed as pop up under the component.\n   *\n   * **Note:** If not specified, a default text (in the respective language) will be displayed.\n   *\n   * **Note:** The `valueStateMessage` would be displayed, when the component is in `Information`, `Warning` or `Error` value state.\n   *\n   * **Note:** If the component has `suggestionItems`, the `valueStateMessage` would be displayed as part of the same popover, if used on desktop, or dialog - on phone.\n   *\n   * __Note:__ This prop will be rendered as [slot](https://www.w3schools.com/tags/tag_slot.asp) (`slot=\"valueStateMessage\"`).\n   * Since you can't change the DOM order of slots when declaring them within a prop, it might prove beneficial to manually mount them as part of the component's children, especially when facing problems with the reading order of screen readers.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-handling-slots--docs).\n   */\n  valueStateMessage?: UI5WCSlotsNode | UI5WCSlotsNode[];\n  /**\n   * Fired when the input operation has finished by pressing Enter or on focusout.\n   *\n   *__Note:__ This event is NOT the same as the native `onChange` [event of React](https://reactjs.org/docs/dom-elements.html#onchange). If you want to simulate that behavior, please use `onInput` instead.\n   */\n  onChange?: (event: Ui5CustomEvent<InputDomRef>) => void;\n  /**\n   * Fired when the value of the component changes at each keystroke, and when a suggestion item has been selected.\n   */\n  onInput?: (event: Ui5CustomEvent<InputDomRef>) => void;\n  /**\n   * Fired when the user navigates to a suggestion item via the ARROW keys, as a preview, before the final selection.\n   */\n  onSuggestionItemPreview?: (event: Ui5CustomEvent<InputDomRef, InputSuggestionItemPreviewEventDetail>) => void;\n  /**\n   * Fired when a suggestion item, that is displayed in the suggestion popup, is selected.\n   */\n  onSuggestionItemSelect?: (event: Ui5CustomEvent<InputDomRef, InputSuggestionItemSelectEventDetail>) => void;\n}\n\n/**\n * The `Input` component allows the user to enter and edit text or numeric values in one line.\n * Additionally, you can provide `suggestionItems`, that are displayed in a popover right under the input.\n *\n * The text field can be editable or read-only (`readonly` property), and it can be enabled or disabled (`disabled` property). To visualize semantic states, such as \"error\" or \"warning\", the `valueState` property is provided. When the user makes changes to the text, the change event is fired, which enables you to react on any text change.\n *\n * **Note:** If you are using the `Input` as a single npm module, don't forget to import the `InputSuggestions` module from \"@ui5/webcomponents/dist/features/InputSuggestions.js\" to enable the suggestions functionality.\n *\n * __Note:__ This component is a web component developed by the UI5 Web Componentsâ€™ team.\n *\n * [UI5 Web Components Storybook](https://sap.github.io/ui5-webcomponents/playground/?path=/docs/main-Input)\n */\nconst Input = withWebComponent<InputPropTypes, InputDomRef>(\n  'ui5-input',\n  ['accessibleName', 'accessibleNameRef', 'maxlength', 'name', 'placeholder', 'type', 'value', 'valueState'],\n  ['disabled', 'noTypeahead', 'readonly', 'required', 'showClearIcon', 'showSuggestions'],\n  ['icon', 'valueStateMessage'],\n  ['change', 'input', 'suggestion-item-preview', 'suggestion-item-select'],\n  () => import('@ui5/webcomponents/dist/Input.js')\n);\n\nInput.displayName = 'Input';\n\nInput.defaultProps = {\n  type: InputType.Text,\n  valueState: ValueState.None\n};\n\nexport { Input };\n"],"file":"assets/index-fb87b09c.js"}