{"version":3,"file":"VariantItem-47913cb0.js","sources":["../../packages/main/src/internal/VariantManagementContext.ts","../../packages/main/src/components/VariantManagement/ManageViewsTableRows.tsx","../../packages/main/src/components/VariantManagement/ManageViewsDialog.tsx","../../packages/main/src/components/VariantManagement/SaveViewDialog.tsx","../../packages/main/src/components/VariantManagement/index.tsx","../../packages/main/src/components/VariantManagement/VariantItem.tsx"],"sourcesContent":["import { createContext } from 'react';\nimport type { VariantItemPropTypes } from '../components/VariantManagement/VariantItem.js';\nimport type { StandardListItemDomRef } from '../webComponents/StandardListItem/index.js';\n\nexport interface SelectedVariant extends VariantItemPropTypes {\n  variantItem: StandardListItemDomRef;\n}\n\nexport const VariantManagementContext = createContext({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  selectVariantItem: (_selectedVariant: SelectedVariant) => {}\n});\n","import declineIcon from '@ui5/webcomponents-icons/dist/decline.js';\nimport favoriteIcon from '@ui5/webcomponents-icons/dist/favorite.js';\nimport unfavoriteIcon from '@ui5/webcomponents-icons/dist/unfavorite.js';\nimport { ThemingParameters, useI18nBundle } from '@ui5/webcomponents-react-base';\nimport React, { useReducer, useRef, useState } from 'react';\nimport { ButtonDesign, ValueState } from '../../enums/index.js';\nimport {\n  APPLY_AUTOMATICALLY,\n  DELETE_VIEW,\n  VARIANT_MANAGEMENT_ERROR_DUPLICATE,\n  MARK_AS_FAVORITE,\n  MARK_AS_STANDARD,\n  PRIVATE,\n  PUBLIC,\n  SELECTED_AS_FAVORITE,\n  SPECIFY_VIEW_NAME,\n  UNSELECTED_AS_FAVORITE,\n  VIEW\n} from '../../i18n/i18n-defaults.js';\nimport { trimAndRemoveSpaces } from '../../internal/utils.js';\nimport { Button, CheckBox, Icon, Input, RadioButton, TableCell, TableRow } from '../../webComponents/index.js';\nimport { Text } from '../Text/index.js';\nimport type { VariantItemPropTypes } from './VariantItem.js';\n\ninterface ManageViewsTableRowsProps extends VariantItemPropTypes {\n  variantNames: string[];\n  handleRowChange: (e: Event, payload: any) => void;\n  handleDelete: (e: any) => void;\n  defaultView: string;\n  setDefaultView: (view: string) => void;\n  showShare: boolean;\n  showApplyAutomatically: boolean;\n  showSetAsDefault: boolean;\n  showCreatedBy: boolean;\n  showOnlyFavorites?: boolean;\n  changedVariantNames: Map<string, any>;\n  setChangedVariantNames: (varNames: any) => void;\n  setInvalidVariants: (invalidVars: any) => void;\n}\n\nexport const ManageViewsTableRows = (props: ManageViewsTableRowsProps) => {\n  const {\n    variantNames,\n    changedVariantNames,\n    setChangedVariantNames,\n    handleRowChange,\n    handleDelete,\n    defaultView,\n    setDefaultView,\n    showShare,\n    showApplyAutomatically,\n    showSetAsDefault,\n    showCreatedBy,\n    labelReadOnly,\n    favorite,\n    children,\n    global,\n    isDefault,\n    applyAutomatically,\n    applyAutomaticallyText,\n    author,\n    setInvalidVariants,\n    hideDelete,\n    showOnlyFavorites\n  } = props;\n\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n  const errorTextAlreadyExists = i18nBundle.getText(VARIANT_MANAGEMENT_ERROR_DUPLICATE);\n  const errorTextEmpty = i18nBundle.getText(SPECIFY_VIEW_NAME);\n  const publicText = i18nBundle.getText(PUBLIC);\n  const privateText = i18nBundle.getText(PRIVATE);\n  const a11yFavoriteText = i18nBundle.getText(MARK_AS_FAVORITE);\n  const a11yStandardText = i18nBundle.getText(MARK_AS_STANDARD);\n  const a11yDeleteText = i18nBundle.getText(DELETE_VIEW);\n  const a11yApplyAutomaticallyText = i18nBundle.getText(APPLY_AUTOMATICALLY);\n  const favoriteIconTitleText = i18nBundle.getText(SELECTED_AS_FAVORITE);\n  const unfavoriteIconTitleText = i18nBundle.getText(UNSELECTED_AS_FAVORITE);\n  const inputPlaceHolder = i18nBundle.getText(VIEW);\n\n  const [internalFavorite, setFavorite] = useReducer((prev) => {\n    return !prev;\n  }, !!favorite);\n  const iconName = internalFavorite ? favoriteIcon : unfavoriteIcon;\n  const inputRef = useRef(undefined);\n\n  const [variantNameInvalid, setVariantNameInvalid] = useState<boolean | string>(false);\n\n  const onFavoriteClick = (e) => {\n    setFavorite();\n    handleRowChange(e, { currentVariant: children, favorite: !internalFavorite });\n  };\n  const handleVariantInput = (e) => {\n    if (typeof props.manageViewsInputProps?.onInput === 'function') {\n      props.manageViewsInputProps?.onInput(e);\n    }\n    const trimmedValue = trimAndRemoveSpaces(e.target.value);\n    if (variantNames.includes(trimmedValue) || Array.from(changedVariantNames.values()).includes(trimmedValue)) {\n      setVariantNameInvalid(errorTextAlreadyExists);\n      setInvalidVariants((prev) => ({ ...prev, [`${children}`]: inputRef.current }));\n      handleRowChange(e, { currentVariant: children, children: trimmedValue });\n    } else if (trimmedValue.length === 0) {\n      setVariantNameInvalid(errorTextEmpty);\n      setInvalidVariants((prev) => ({ ...prev, [children]: inputRef.current }));\n      handleRowChange(e, { currentVariant: children, children: trimmedValue });\n    } else if (e.isInvalid) {\n      setInvalidVariants((prev) => ({ ...prev, [`${children}`]: inputRef.current }));\n    } else {\n      setVariantNameInvalid(false);\n      setInvalidVariants((prev) => {\n        const invalidRows = { ...prev };\n        if (prev.hasOwnProperty(children)) {\n          delete invalidRows[children];\n        }\n        return invalidRows;\n      });\n      handleRowChange(e, { currentVariant: children, children: trimmedValue });\n    }\n  };\n\n  const handleVariantChange = (e) => {\n    if (typeof props.manageViewsInputProps?.onChange === 'function') {\n      props.manageViewsInputProps?.onChange(e);\n    }\n    const trimmedValue = trimAndRemoveSpaces(e.target.value);\n    setChangedVariantNames((prev) => {\n      const currentChangedVariants = new Map(prev);\n      currentChangedVariants.set(children, trimmedValue);\n      return currentChangedVariants;\n    });\n  };\n\n  const handleDefaultChange = () => {\n    setDefaultView(children);\n  };\n\n  const handleApplyAutomaticallyChange = (e) => {\n    handleRowChange(e, { currentVariant: children, applyAutomatically: e.target.checked });\n  };\n\n  const renderView = () => {\n    if (labelReadOnly) {\n      return (\n        <Text\n          style={{\n            fontFamily: isDefault ? ThemingParameters.sapFontBoldFamily : ThemingParameters.sapFontFamily\n          }}\n        >\n          {children}\n        </Text>\n      );\n    }\n    return (\n      <Input\n        placeholder={inputPlaceHolder}\n        ref={inputRef}\n        {...props.manageViewsInputProps}\n        valueStateMessage={props.manageViewsInputProps?.valueStateMessage ?? <div>{variantNameInvalid}</div>}\n        valueState={\n          props.manageViewsInputProps?.valueState ?? (!variantNameInvalid ? ValueState.None : ValueState.Error)\n        }\n        value={children}\n        onInput={handleVariantInput}\n        onChange={handleVariantChange}\n      />\n    );\n  };\n  return (\n    <TableRow data-id={children} key={`${children}`}>\n      {showOnlyFavorites && (\n        <TableCell>\n          {isDefault ? (\n            <Icon name={favoriteIcon} style={{ color: ThemingParameters.sapContent_NonInteractiveIconColor }} />\n          ) : (\n            <Icon\n              accessibleName={a11yFavoriteText}\n              title={iconName === favoriteIcon ? favoriteIconTitleText : unfavoriteIconTitleText}\n              name={iconName}\n              interactive\n              style={{ color: ThemingParameters.sapContent_MarkerIconColor, cursor: 'pointer' }}\n              onClick={onFavoriteClick}\n            />\n          )}\n        </TableCell>\n      )}\n      <TableCell>{renderView()}</TableCell>\n      {showShare && <TableCell>{global ? publicText : privateText}</TableCell>}\n      {showSetAsDefault && (\n        <TableCell>\n          <RadioButton\n            accessibleName={a11yStandardText}\n            checked={defaultView !== undefined ? defaultView === children : isDefault}\n            onChange={handleDefaultChange}\n          />\n        </TableCell>\n      )}\n      {showApplyAutomatically && (\n        <TableCell>\n          <CheckBox\n            accessibleName={a11yApplyAutomaticallyText}\n            checked={applyAutomatically}\n            onChange={handleApplyAutomaticallyChange}\n            text={applyAutomaticallyText}\n          />\n        </TableCell>\n      )}\n      {showCreatedBy && (\n        <TableCell>\n          <Text>{author}</Text>\n        </TableCell>\n      )}\n      <TableCell>\n        {!(hideDelete ?? global) && (\n          <Button\n            tooltip={a11yDeleteText}\n            accessibleName={a11yDeleteText}\n            icon={declineIcon}\n            design={ButtonDesign.Transparent}\n            onClick={handleDelete}\n            data-children={children}\n          />\n        )}\n      </TableCell>\n    </TableRow>\n  );\n};\n","import { isPhone, isTablet } from '@ui5/webcomponents-base/dist/Device.js';\nimport searchIcon from '@ui5/webcomponents-icons/dist/search.js';\nimport { ThemingParameters, useI18nBundle } from '@ui5/webcomponents-react-base';\nimport type { MouseEventHandler, ReactNode } from 'react';\nimport React, { Children, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { createUseStyles } from 'react-jss';\nimport { BarDesign, FlexBoxAlignItems, FlexBoxDirection, ButtonDesign } from '../../enums/index.js';\nimport {\n  APPLY_AUTOMATICALLY,\n  CANCEL,\n  CREATED_BY,\n  DEFAULT,\n  MANAGE_VIEWS,\n  SAVE,\n  SHARING,\n  VIEW,\n  SEARCH\n} from '../../i18n/i18n-defaults.js';\nimport { useCanRenderPortal } from '../../internal/ssr.js';\nimport { cssVarVersionInfoPrefix } from '../../internal/utils.js';\nimport { Bar } from '../../webComponents/Bar/index.js';\nimport { Button } from '../../webComponents/Button/index.js';\nimport { Dialog } from '../../webComponents/Dialog/index.js';\nimport { Icon, Input } from '../../webComponents/index.js';\nimport { Table } from '../../webComponents/Table/index.js';\nimport { TableColumn } from '../../webComponents/TableColumn/index.js';\nimport { FlexBox } from '../FlexBox/index.js';\nimport { ManageViewsTableRows } from './ManageViewsTableRows.js';\nimport type { VariantItemPropTypes } from './VariantItem.js';\n\nconst _popupDefaultHeaderHeight = `var(${cssVarVersionInfoPrefix}popup_default_header_height)`;\nconst _popupHeaderFontFamily = `var(${cssVarVersionInfoPrefix}popup_header_font_family)`;\n\nconst styles = {\n  manageViewsDialog: {\n    width: isPhone() || isTablet() ? '100%' : '70vw',\n    '&::part(content), &::part(header)': {\n      padding: 0\n    },\n    '&::part(footer)': {\n      padding: 0,\n      borderBlockStart: 'none'\n    }\n  },\n  headerText: {\n    margin: 0,\n    textAlign: 'center',\n    alignSelf: 'start',\n    minHeight: _popupDefaultHeaderHeight,\n    maxHeight: _popupDefaultHeaderHeight,\n    lineHeight: _popupDefaultHeaderHeight,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    maxWidth: '100%',\n    display: 'inline-block',\n    paddingInlineStart: '1rem',\n    fontFamily: `\"72override\",${_popupHeaderFontFamily}`,\n    fontSize: '1rem'\n  },\n  search: { width: 'calc(100% - 2rem)', marginBlockEnd: '0.5rem' },\n  inputIcon: { cursor: 'pointer', color: ThemingParameters.sapContent_IconColor }\n};\n\nconst useStyles = createUseStyles(styles, { name: 'ManageViewsDialog' });\n\ninterface ManageViewsDialogPropTypes {\n  children: ReactNode | ReactNode[];\n  onAfterClose: any;\n  handleSaveManageViews: (\n    e: MouseEventHandler<HTMLElement>,\n    payload: {\n      updatedRows: any;\n      defaultView: string;\n      deletedRows: any;\n    }\n  ) => void;\n  showShare: boolean;\n  showApplyAutomatically: boolean;\n  showSetAsDefault: boolean;\n  showCreatedBy: boolean;\n  variantNames: string[];\n  portalContainer: Element;\n  showOnlyFavorites?: boolean;\n}\n\nexport const ManageViewsDialog = (props: ManageViewsDialogPropTypes) => {\n  const {\n    children,\n    onAfterClose,\n    handleSaveManageViews,\n    showShare,\n    showApplyAutomatically,\n    showSetAsDefault,\n    showCreatedBy,\n    variantNames,\n    portalContainer,\n    showOnlyFavorites\n  } = props;\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n  const cancelText = i18nBundle.getText(CANCEL);\n  const saveText = i18nBundle.getText(SAVE);\n  const viewHeaderText = i18nBundle.getText(VIEW);\n  const sharingHeaderText = i18nBundle.getText(SHARING);\n  const defaultHeaderText = i18nBundle.getText(DEFAULT);\n  const applyAutomaticallyHeaderText = i18nBundle.getText(APPLY_AUTOMATICALLY);\n  const createdByHeaderText = i18nBundle.getText(CREATED_BY);\n  const manageViewsText = i18nBundle.getText(MANAGE_VIEWS);\n  const searchText = i18nBundle.getText(SEARCH);\n\n  const [changedVariantNames, setChangedVariantNames] = useState(new Map());\n  const [invalidVariants, setInvalidVariants] = useState<Record<string, HTMLInputElement>>({});\n\n  const classes = useStyles();\n\n  const columns = (\n    <>\n      {showOnlyFavorites && <TableColumn key=\"favorite-variant-item\" />}\n      <TableColumn>{viewHeaderText}</TableColumn>\n      {showShare && (\n        <TableColumn demandPopin minWidth={600}>\n          {sharingHeaderText}\n        </TableColumn>\n      )}\n      {showSetAsDefault && (\n        <TableColumn demandPopin minWidth={600} popinText={defaultHeaderText}>\n          {defaultHeaderText}\n        </TableColumn>\n      )}\n      {showApplyAutomatically && (\n        <TableColumn demandPopin minWidth={600} popinText={applyAutomaticallyHeaderText}>\n          {applyAutomaticallyHeaderText}\n        </TableColumn>\n      )}\n      {showCreatedBy && (\n        <TableColumn demandPopin minWidth={600} popinText={createdByHeaderText}>\n          {createdByHeaderText}\n        </TableColumn>\n      )}\n      <TableColumn key=\"delete-variant-item\" />\n    </>\n  );\n\n  const [childrenProps, setChildrenProps] = useState(\n    Children.map(children, (child) => {\n      if (!React.isValidElement(child)) {\n        return {};\n      }\n      return child.props;\n    })\n  );\n  useEffect(() => {\n    setChildrenProps(\n      Children.map(children, (child) => {\n        if (!React.isValidElement(child)) {\n          return {};\n        }\n        return child.props;\n      })\n    );\n  }, [children]);\n\n  const [filteredProps, setFilteredProps] = useState(childrenProps);\n  useEffect(() => {\n    setFilteredProps(childrenProps);\n  }, [childrenProps]);\n\n  const [defaultView, setDefaultView] = useState<string>();\n\n  const changedTableRows = useRef({});\n  const handleTableRowChange = (e, payload) => {\n    if (payload) {\n      changedTableRows.current[payload.currentVariant] = {\n        ...(changedTableRows.current[payload.currentVariant] ?? {}),\n        ...payload\n      };\n    }\n  };\n  const deletedTableRows = useRef(new Set([]));\n  const handleDelete = (e) => {\n    deletedTableRows.current.add(e.target.dataset.children);\n    setChildrenProps((prev) =>\n      prev\n        .filter((item) => item.children !== e.target.dataset.children)\n        .map((item) => {\n          if (changedTableRows.current.hasOwnProperty(item.children)) {\n            return { ...item, ...changedTableRows.current[item.children] };\n          }\n          return item;\n        })\n    );\n  };\n\n  const handleSave = (e) => {\n    if (Object.keys(invalidVariants).length === 0) {\n      handleSaveManageViews(e, {\n        updatedRows: changedTableRows.current,\n        defaultView,\n        deletedRows: deletedTableRows.current\n      });\n    } else {\n      Object.values(invalidVariants)[0].focus();\n    }\n  };\n\n  const handleSearchInput = (e) => {\n    const lowerCaseVal = e.target.value.toLowerCase();\n    setFilteredProps(\n      childrenProps.filter(\n        (item) =>\n          item.children?.toLowerCase()?.includes(lowerCaseVal) || item.author?.toLowerCase()?.includes(lowerCaseVal)\n      )\n    );\n  };\n\n  const canRenderPortal = useCanRenderPortal();\n  if (!canRenderPortal) {\n    return null;\n  }\n\n  return createPortal(\n    <Dialog\n      open\n      className={classes.manageViewsDialog}\n      data-component-name=\"VariantManagementManageViewsDialog\"\n      onAfterClose={onAfterClose}\n      headerText={manageViewsText}\n      header={\n        <FlexBox direction={FlexBoxDirection.Column} style={{ width: '100%' }} alignItems={FlexBoxAlignItems.Center}>\n          <h2 className={classes.headerText}>{manageViewsText}</h2>\n          <Input\n            className={classes.search}\n            placeholder={searchText}\n            showClearIcon\n            icon={<Icon name={searchIcon} className={classes.inputIcon} />}\n            onInput={handleSearchInput}\n          />\n        </FlexBox>\n      }\n      resizable\n      footer={\n        <Bar\n          design={BarDesign.Footer}\n          endContent={\n            <>\n              <Button design={ButtonDesign.Emphasized} onClick={handleSave}>\n                {saveText}\n              </Button>\n              <Button design={ButtonDesign.Transparent} onClick={onAfterClose}>\n                {cancelText}\n              </Button>\n            </>\n          }\n        />\n      }\n    >\n      <Table columns={columns} stickyColumnHeader role=\"table\">\n        {filteredProps.map((itemProps: VariantItemPropTypes) => {\n          return (\n            <ManageViewsTableRows\n              {...itemProps}\n              setInvalidVariants={setInvalidVariants}\n              setChangedVariantNames={setChangedVariantNames}\n              changedVariantNames={changedVariantNames}\n              variantNames={variantNames}\n              handleRowChange={handleTableRowChange}\n              handleDelete={handleDelete}\n              defaultView={defaultView}\n              setDefaultView={setDefaultView}\n              showShare={showShare}\n              showApplyAutomatically={showApplyAutomatically}\n              showSetAsDefault={showSetAsDefault}\n              showCreatedBy={showCreatedBy}\n              key={itemProps?.children}\n              showOnlyFavorites={showOnlyFavorites}\n            />\n          );\n        })}\n      </Table>\n    </Dialog>,\n    portalContainer ?? document.body\n  );\n};\n","import { useI18nBundle, useIsomorphicId } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport React, { useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { createUseStyles } from 'react-jss';\nimport { BarDesign, ButtonDesign, FlexBoxAlignItems, FlexBoxDirection } from '../../enums/index.js';\nimport {\n  APPLY_AUTOMATICALLY,\n  CANCEL,\n  VARIANT_MANAGEMENT_ERROR_DUPLICATE,\n  PUBLIC,\n  SAVE,\n  SAVE_VIEW,\n  SET_AS_DEFAULT,\n  SPECIFY_VIEW_NAME,\n  VIEW\n} from '../../i18n/i18n-defaults.js';\nimport type { Ui5CustomEvent } from '../../interfaces/index.js';\nimport { useCanRenderPortal } from '../../internal/ssr.js';\nimport { trimAndRemoveSpaces } from '../../internal/utils.js';\nimport type { SelectedVariant } from '../../internal/VariantManagementContext.js';\nimport type { ButtonDomRef, DialogDomRef, InputPropTypes } from '../../webComponents/index.js';\nimport { Bar, Button, CheckBox, Dialog, Input, Label } from '../../webComponents/index.js';\nimport { FlexBox } from '../FlexBox/index.js';\n\nconst useStyles = createUseStyles(\n  {\n    dialog: {\n      '&::part(footer)': {\n        borderBlockStart: 'none',\n        padding: 0\n      }\n    },\n    input: { width: '100%', marginBlock: '0.1875rem' },\n    checkBoxesContainer: { paddingInline: '0.5rem' }\n  },\n  { name: 'SaveViewDialogStyles' }\n);\n\ninterface SaveViewDialogPropTypes {\n  onAfterClose: (event: Ui5CustomEvent<DialogDomRef>) => void;\n  handleSave: (event: Ui5CustomEvent<ButtonDomRef>, selectedVariant: SelectedVariant) => void;\n  selectedVariant: SelectedVariant;\n  showShare: boolean;\n  showApplyAutomatically: boolean;\n  showSetAsDefault: boolean;\n  variantNames: string[];\n  portalContainer: Element;\n  saveViewInputProps?: Omit<InputPropTypes, 'value'>;\n}\n\nexport const SaveViewDialog = (props: SaveViewDialogPropTypes) => {\n  const {\n    onAfterClose,\n    handleSave,\n    selectedVariant,\n    showShare,\n    showApplyAutomatically,\n    showSetAsDefault,\n    variantNames,\n    portalContainer,\n    saveViewInputProps\n  } = props;\n  const saveViewDialogRef = useRef<DialogDomRef>(null);\n  const inputRef = useRef(undefined);\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n  const classes = useStyles();\n  const uniqueId = useIsomorphicId();\n\n  const cancelText = i18nBundle.getText(CANCEL);\n  const saveText = i18nBundle.getText(SAVE);\n  const headingText = i18nBundle.getText(SAVE_VIEW);\n  const defaultCbLabel = i18nBundle.getText(SET_AS_DEFAULT);\n  const publicCbLabel = i18nBundle.getText(PUBLIC);\n  const applyAutomaticallyCbLabel = i18nBundle.getText(APPLY_AUTOMATICALLY);\n  const inputLabelText = i18nBundle.getText(VIEW);\n  const errorTextAlreadyExists = i18nBundle.getText(VARIANT_MANAGEMENT_ERROR_DUPLICATE);\n  const errorTextEmpty = i18nBundle.getText(SPECIFY_VIEW_NAME);\n\n  const [isDefault, setDefault] = useState(selectedVariant.isDefault);\n  const [isPublic, setPublic] = useState(selectedVariant.global);\n  const [applyAutomatically, setApplyAutomatically] = useState(selectedVariant.applyAutomatically);\n  const [variantName, setVariantName] = useState(selectedVariant.children);\n  const [variantNameInvalid, setVariantNameInvalid] = useState<string | boolean>(false);\n  const [isInvalid, setIsInvalid] = useState(false);\n\n  const handleInputChange = (e) => {\n    if (typeof saveViewInputProps?.onInput === 'function') {\n      saveViewInputProps.onInput(e);\n    }\n    const trimmedValue = trimAndRemoveSpaces(e.target.value);\n    setVariantName(trimmedValue);\n    if (variantNames.includes(trimmedValue)) {\n      setVariantNameInvalid(errorTextAlreadyExists);\n    } else if (trimmedValue.length === 0) {\n      setVariantNameInvalid(errorTextEmpty);\n    } else if (e.isInvalid) {\n      setIsInvalid(true);\n    } else {\n      setVariantNameInvalid(false);\n      setIsInvalid(false);\n    }\n  };\n\n  const onSave = (e) => {\n    if (variantNames.includes(variantName)) {\n      setVariantNameInvalid(errorTextAlreadyExists);\n      inputRef.current?.focus();\n    } else if (variantName.length === 0) {\n      setVariantNameInvalid(errorTextEmpty);\n      inputRef.current?.focus();\n    } else if (isInvalid) {\n      inputRef.current?.focus();\n    } else {\n      setVariantNameInvalid(false);\n      handleSave(e, { ...selectedVariant, children: variantName, isDefault, global: isPublic, applyAutomatically });\n    }\n  };\n\n  const handleCancel = () => {\n    saveViewDialogRef.current.close();\n  };\n\n  const handleChangeDefault = (e) => {\n    setDefault(e.target.checked);\n  };\n  const handleChangePublic = (e) => {\n    setPublic(e.target.checked);\n  };\n  const handleChangeApplyAutomatically = (e) => {\n    setApplyAutomatically(e.target.checked);\n  };\n\n  const canRenderPortal = useCanRenderPortal();\n  if (!canRenderPortal) {\n    return null;\n  }\n\n  return createPortal(\n    <Dialog\n      open\n      className={classes.dialog}\n      ref={saveViewDialogRef}\n      headerText={headingText}\n      onAfterClose={onAfterClose}\n      footer={\n        <Bar\n          design={BarDesign.Footer}\n          endContent={\n            <>\n              <Button design={ButtonDesign.Emphasized} onClick={onSave}>\n                {saveText}\n              </Button>\n              <Button design={ButtonDesign.Transparent} onClick={handleCancel}>\n                {cancelText}\n              </Button>\n            </>\n          }\n        />\n      }\n    >\n      <FlexBox direction={FlexBoxDirection.Column} alignItems={FlexBoxAlignItems.Start}>\n        <Label for={`view-${uniqueId}`} showColon>\n          {inputLabelText}\n        </Label>\n        <Input\n          accessibleName={inputLabelText}\n          ref={inputRef}\n          {...saveViewInputProps}\n          valueState={saveViewInputProps?.valueState ?? (!variantNameInvalid ? 'None' : 'Error')}\n          valueStateMessage={saveViewInputProps?.valueStateMessage ?? <div>{variantNameInvalid}</div>}\n          className={clsx(classes.input, saveViewInputProps?.className)}\n          id={`view-${uniqueId}`}\n          value={variantName}\n          onInput={handleInputChange}\n        />\n        <FlexBox\n          alignItems={FlexBoxAlignItems.Start}\n          direction={FlexBoxDirection.Column}\n          className={classes.checkBoxesContainer}\n        >\n          {showSetAsDefault && <CheckBox onChange={handleChangeDefault} text={defaultCbLabel} checked={isDefault} />}\n          {showShare && <CheckBox onChange={handleChangePublic} text={publicCbLabel} checked={isPublic} />}\n          {showApplyAutomatically && (\n            <CheckBox\n              onChange={handleChangeApplyAutomatically}\n              text={applyAutomaticallyCbLabel}\n              checked={applyAutomatically}\n            />\n          )}\n        </FlexBox>\n      </FlexBox>\n    </Dialog>,\n    portalContainer ?? document.body\n  );\n};\n","'use client';\n\nimport type { ListSelectionChangeEventDetail } from '@ui5/webcomponents/dist/List.js';\nimport '@ui5/webcomponents-fiori/dist/illustrations/UnableToLoad.js';\nimport navDownIcon from '@ui5/webcomponents-icons/dist/navigation-down-arrow.js';\nimport searchIcon from '@ui5/webcomponents-icons/dist/search.js';\nimport { enrichEventWithDetails, ThemingParameters, useI18nBundle } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport type { ComponentElement, ReactElement, ReactNode } from 'react';\nimport React, {\n  Children,\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport { createUseStyles } from 'react-jss';\nimport {\n  BarDesign,\n  ButtonDesign,\n  IllustrationMessageType,\n  ListMode,\n  PopoverPlacementType,\n  TitleLevel\n} from '../../enums/index.js';\nimport { MANAGE, MY_VIEWS, SAVE, SAVE_AS, SEARCH, SEARCH_VARIANT, SELECT_VIEW } from '../../i18n/i18n-defaults.js';\nimport type { CommonProps, Ui5CustomEvent } from '../../interfaces/index.js';\nimport { useCanRenderPortal } from '../../internal/ssr.js';\nimport { stopPropagation } from '../../internal/stopPropagation.js';\nimport type { SelectedVariant } from '../../internal/VariantManagementContext.js';\nimport { VariantManagementContext } from '../../internal/VariantManagementContext.js';\nimport type {\n  ButtonPropTypes,\n  ListDomRef,\n  ResponsivePopoverDomRef,\n  ResponsivePopoverPropTypes,\n  TitlePropTypes\n} from '../../webComponents/index.js';\nimport {\n  Bar,\n  Button,\n  Icon,\n  IllustratedMessage,\n  Input,\n  List,\n  ResponsivePopover,\n  Title\n} from '../../webComponents/index.js';\nimport { FlexBox } from '../FlexBox/index.js';\nimport { ManageViewsDialog } from './ManageViewsDialog.js';\nimport { SaveViewDialog } from './SaveViewDialog.js';\nimport type { VariantItemPropTypes } from './VariantItem.js';\n\ninterface UpdatedVariant extends SelectedVariant {\n  prevVariant?: VariantItemPropTypes;\n}\n\nexport interface VariantManagementPropTypes extends Omit<CommonProps, 'onSelect'> {\n  /**\n   * Variant items displayed by the VariantManagement component.\n   *\n   * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `VariantItem` in order to preserve the intended design.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Determines on which side the VariantManagement popover is placed at.\n   */\n  placement?: ResponsivePopoverPropTypes['placementType'];\n  /**\n   * Describes the title of the VariantManagement popover.\n   *\n   * __Note:__ If not set, the default title is used.\n   */\n  titleText?: ResponsivePopoverPropTypes['headerText'];\n  /**\n   * Defines whether the VariantManagement should be closed if an item was selected.\n   */\n  closeOnItemSelect?: boolean;\n  /**\n   * Describes the `HTML Title` level of the variants.\n   */\n  level?: TitlePropTypes['level'];\n  /**\n   * Defines whether the VariantManagement is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Indicator for modified but not saved variants.\n   *\n   * __Note:__ You can change the indicator by setting `dirtyStateText`.\n   */\n  dirtyState?: boolean;\n  /**\n   * Text for the dirty state indicator.\n   */\n  dirtyStateText?: string;\n  /**\n   * Indicates that the 'Favorites' feature is used. Only variants marked as favorites will be displayed in the variant list.\n   *\n   * __Note:__ Only if `showOnlyFavorites` is set to `true` favorites can be changed.\n   */\n  showOnlyFavorites?: boolean;\n  /**\n   * Indicates that set as default is visible in the Save View and the Manage Views dialogs.\n   */\n  hideSetAsDefault?: boolean;\n  /**\n   * Indicates that the Public indicator is visible in the Save View and the Manage Views dialogs.\n   */\n  hideShare?: boolean;\n  /**\n   * Indicates that Apply Automatically is visible in the Save View and the Manage Views dialogs.\n   */\n  hideApplyAutomatically?: boolean;\n  /**\n   * Indicates that the Author is visible in the Manage Views dialog.\n   */\n  hideCreatedBy?: boolean;\n  /**\n   * Indicates that the Save View dialog button is visible.\n   */\n  hideSaveAs?: boolean;\n  /**\n   * Indicates that the Manage Views dialog button is visible.\n   */\n  hideManageVariants?: boolean;\n  /**\n   * Indicates that the control is in error state. If set to true error message will be displayed whenever the variant is opened.\n   */\n  inErrorState?: boolean;\n  /**\n   * Defines where modals are rendered into via `React.createPortal`.\n   *\n   * You can find out more about this [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-working-with-portals--page).\n   *\n   * Defaults to: `document.body`\n   */\n  portalContainer?: Element;\n  /**\n   * Fired after a variant has been selected.\n   *\n   * __Note:__ This event inherits part of its details from the `onSelectionChange` event of the `List` component.\n   */\n  onSelect?: (\n    event: Ui5CustomEvent<\n      ListDomRef,\n      ListSelectionChangeEventDetail & {\n        selectedVariant: SelectedVariant;\n      }\n    >\n  ) => void;\n  /**\n   * The event is fired when the \"Save\" button is clicked inside the Save View dialog.\n   *\n   * __Note:__ Calling `event.preventDefault()` prevents the dialog from closing when clicked.\n   */\n  onSaveAs?: (e: Parameters<ButtonPropTypes['onClick']>[0] & { detail: SelectedVariant }) => void;\n  /**\n   * The event is fired when the \"Save\" button is clicked inside the Manage Views dialog.\n   *\n   * __Note:__ Calling `event.preventDefault()` prevents the dialog from closing when clicked.\n   */\n  onSaveManageViews?: (\n    e: Parameters<ButtonPropTypes['onClick']>[0] & {\n      detail: {\n        deletedVariants: VariantItemPropTypes[];\n        prevVariants: VariantItemPropTypes[];\n        updatedVariants: UpdatedVariant[];\n        variants: SelectedVariant[];\n      };\n    }\n  ) => void;\n  /**\n   * The event is fired when the \"Save\" button is clicked in the `VariantManagement` popover.\n   *\n   * __Note:__ The save button is only displayed if the `VariantManagement` is in `dirtyState` and the selected variant is not in `readOnly` mode.\n   */\n  onSave?: (e: Parameters<ButtonPropTypes['onClick']>[0] & { detail: SelectedVariant }) => void;\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  title: {\n    cursor: 'pointer',\n    color: ThemingParameters.sapLinkColor,\n    textShadow: 'none',\n    '&:hover': {\n      color: ThemingParameters.sapLink_Hover_Color\n    },\n    '&:active': {\n      color: ThemingParameters.sapLink_Active_Color\n    }\n  },\n  disabled: {\n    '& $title': {\n      color: ThemingParameters.sapGroup_TitleTextColor,\n      cursor: 'default',\n      '&:hover': {\n        color: 'ThemingParameters.sapGroup_TitleTextColor'\n      }\n    }\n  },\n  dirtyState: {\n    color: ThemingParameters.sapGroup_TitleTextColor,\n    paddingInline: '0.125rem',\n    fontWeight: 'bold',\n    font: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    flexGrow: 1\n  },\n  dirtyStateText: {\n    fontSize: ThemingParameters.sapFontSmallSize,\n    fontWeight: 'normal'\n  },\n  navDownBtn: {\n    marginInlineStart: '0.125rem'\n  },\n  footer: {\n    '& > :last-child': {\n      marginInlineEnd: 0\n    }\n  },\n  inputIcon: { cursor: 'pointer', color: ThemingParameters.sapContent_IconColor },\n  searchInputContainer: { padding: '0.25rem 1rem' },\n  searchInput: { width: '100%' },\n  popover: {\n    minWidth: '25rem',\n    '&::part(content), &::part(footer)': {\n      padding: 0\n    },\n    '&::part(footer)': {\n      borderBlockStart: 'none'\n    }\n  }\n};\n\nconst useStyles = createUseStyles(styles, { name: 'VariantManagement' });\n/**\n * The `VariantManagement` component can be used to manage variants, such as FilterBar variants or AnalyticalTable variants.\n */\nconst VariantManagement = forwardRef<HTMLDivElement, VariantManagementPropTypes>((props, ref) => {\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n  const {\n    titleText = i18nBundle.getText(MY_VIEWS),\n    className,\n    style,\n    placement = PopoverPlacementType.Bottom,\n    level = TitleLevel.H4,\n    onSelect,\n    closeOnItemSelect,\n    disabled,\n    onSaveAs,\n    onSaveManageViews,\n    showOnlyFavorites,\n    inErrorState,\n    hideShare,\n    children,\n    hideManageVariants,\n    hideApplyAutomatically,\n    hideSetAsDefault,\n    hideCreatedBy,\n    hideSaveAs,\n    dirtyStateText = '*',\n    dirtyState,\n    onSave,\n    portalContainer,\n    ...rest\n  } = props;\n\n  const classes = useStyles();\n  const popoverRef = useRef<ResponsivePopoverDomRef>(null);\n\n  const [safeChildren, setSafeChildren] = useState(Children.toArray(children));\n\n  useEffect(() => {\n    setSafeChildren(Children.toArray(children));\n  }, [children]);\n\n  const [manageViewsDialogOpen, setManageViewsDialogOpen] = useState(false);\n  const [saveAsDialogOpen, setSaveAsDialogOpen] = useState(false);\n  const [selectedVariant, setSelectedVariant] = useState<SelectedVariant | undefined>(() => {\n    const currentSelectedVariant = safeChildren.find(\n      (item) => isValidElement(item) && item.props.selected\n    ) as ComponentElement<any, any>;\n    if (currentSelectedVariant) {\n      return { ...currentSelectedVariant.props, variantItem: currentSelectedVariant.ref };\n    }\n  });\n  const [selectedSaveViewInputProps, setSelectedSaveViewInputProps] = useState(\n    selectedVariant?.saveViewInputProps ?? {}\n  );\n\n  const handleClose = () => {\n    popoverRef.current.close();\n  };\n\n  const handleManageClick = () => {\n    setManageViewsDialogOpen(true);\n  };\n  const handleManageClose = () => {\n    setManageViewsDialogOpen(false);\n  };\n  const handleOpenSaveAsDialog = () => {\n    setSaveAsDialogOpen(true);\n  };\n  const handleSaveAsClose = () => {\n    setSaveAsDialogOpen(false);\n  };\n\n  const handleSave = (e) => {\n    if (typeof onSave === 'function') {\n      onSave(enrichEventWithDetails(e, selectedVariant as Record<string, any>));\n    }\n  };\n\n  const handleSaveView = (e, selectedVariant) => {\n    if (typeof onSaveAs === 'function') {\n      onSaveAs(enrichEventWithDetails(e, selectedVariant));\n    }\n    setSelectedVariant(selectedVariant);\n    if (!e.defaultPrevented) {\n      handleSaveAsClose();\n    }\n  };\n\n  const handleSaveManageViews = (e, payload) => {\n    const { defaultView, updatedRows, deletedRows } = payload;\n    const callbackProperties = { deletedVariants: [], prevVariants: [], updatedVariants: [], variants: [] };\n    setSafeChildren((prev) =>\n      Children.toArray(\n        prev.map((child) => {\n          if (!isValidElement(child)) {\n            return false;\n          }\n          let updatedProps: Omit<SelectedVariant, 'children' | 'variantItem'> = {};\n          const currentVariant = popoverRef.current.querySelector(`ui5-li[data-children=\"${child.props.children}\"]`);\n          callbackProperties.prevVariants.push(child.props);\n          if (defaultView) {\n            if (defaultView === child.props.children) {\n              updatedProps.isDefault = true;\n            } else if (child.props.isDefault) {\n              updatedProps.isDefault = false;\n            }\n          }\n          if (Object.keys(updatedRows).includes(child.props.children)) {\n            const { currentVariant: _0, ...rest } = updatedRows[child.props.children];\n            updatedProps = { ...updatedProps, ...rest };\n          }\n          if (deletedRows.has(child.props.children)) {\n            callbackProperties.deletedVariants.push(child.props);\n            return false;\n          }\n          if (Object.keys(updatedProps).length > 0) {\n            callbackProperties.updatedVariants.push({\n              ...child.props,\n              ...updatedProps,\n              variantItem: currentVariant,\n              prevVariant: { ...child.props }\n            });\n          }\n          callbackProperties.variants.push({ ...child.props, ...updatedProps, variantItem: currentVariant });\n          return cloneElement(child, updatedProps);\n        })\n      )\n    );\n    if (typeof onSaveManageViews === 'function') {\n      onSaveManageViews(enrichEventWithDetails(e, callbackProperties));\n    }\n    if (!e.defaultPrevented) {\n      handleManageClose();\n    }\n  };\n\n  const handleOpenVariantManagement = useCallback(\n    (e) => {\n      popoverRef.current.showAt(e.target);\n    },\n    [popoverRef]\n  );\n\n  const searchText = i18nBundle.getText(SEARCH);\n  const saveAsText = i18nBundle.getText(SAVE_AS);\n  const manageText = i18nBundle.getText(MANAGE);\n  const saveText = i18nBundle.getText(SAVE);\n  const a11ySearchText = i18nBundle.getText(SEARCH_VARIANT);\n  const selectViewText = i18nBundle.getText(SELECT_VIEW);\n\n  const variantManagementClasses = clsx(classes.container, disabled && classes.disabled, className);\n\n  const dirtyStateClasses = clsx(classes.dirtyState, dirtyStateText !== '*' && classes.dirtyStateText);\n\n  const selectVariantEventRef = useRef();\n  useEffect(() => {\n    if (selectVariantEventRef.current) {\n      if (typeof onSelect === 'function') {\n        onSelect(enrichEventWithDetails(selectVariantEventRef.current, { selectedVariant }));\n        selectVariantEventRef.current = undefined;\n      }\n    }\n  }, [selectedVariant, onSelect]);\n\n  useEffect(() => {\n    const selectedChild = safeChildren.find(\n      (item) => isValidElement(item) && item.props.children === selectedVariant?.children\n    ) as ReactElement<VariantItemPropTypes>;\n    setSelectedSaveViewInputProps(selectedChild?.props.saveViewInputProps ?? {});\n  }, [selectedVariant, safeChildren]);\n\n  const handleVariantItemSelect = (e) => {\n    setSelectedVariant({ ...e.detail.selectedItems[0].dataset, variantItem: e.detail.selectedItems[0] });\n    selectVariantEventRef.current = e;\n    if (closeOnItemSelect) {\n      handleClose();\n    }\n  };\n\n  const variantNames = safeChildren.map((item) =>\n    isValidElement(item) && typeof item.props?.children === 'string' ? item.props.children : ''\n  );\n\n  const [favoriteChildren, setFavoriteChildren] = useState(undefined);\n\n  useEffect(() => {\n    if (showOnlyFavorites) {\n      setFavoriteChildren(\n        safeChildren.filter((child) => isValidElement(child) && (child.props.favorite || child.props.isDefault))\n      );\n    }\n    if (!showOnlyFavorites && favoriteChildren?.length > 0) {\n      setFavoriteChildren(undefined);\n    }\n  }, [showOnlyFavorites, safeChildren]);\n\n  const safeChildrenWithFavorites = favoriteChildren ?? safeChildren;\n  const showInput = safeChildrenWithFavorites.length > 10;\n\n  const [filteredChildren, setFilteredChildren] = useState(undefined);\n  const [searchValue, setSearchValue] = useState('');\n  const handleSearchInput = (e) => {\n    setSearchValue(e.target.value);\n    setFilteredChildren(\n      safeChildrenWithFavorites.filter(\n        (child: ComponentElement<any, any>) =>\n          typeof child?.props?.children === 'string' &&\n          child.props.children.toLowerCase().includes(e.target.value.toLowerCase())\n      )\n    );\n  };\n  useEffect(() => {\n    if (filteredChildren) {\n      setFilteredChildren(\n        safeChildrenWithFavorites.filter(\n          (child: ComponentElement<any, any>) =>\n            typeof child?.props?.children === 'string' && child.props.children.toLowerCase().includes(searchValue)\n        )\n      );\n    }\n  }, [safeChildrenWithFavorites]);\n\n  const canRenderPortal = useCanRenderPortal();\n\n  const showSaveBtn = dirtyState && !selectedVariant?.readOnly;\n  return (\n    <div className={variantManagementClasses} style={style} {...rest} ref={ref}>\n      <VariantManagementContext.Provider\n        value={{\n          selectVariantItem: setSelectedVariant\n        }}\n      >\n        <FlexBox onClick={disabled ? undefined : handleOpenVariantManagement}>\n          <Title level={level} className={classes.title}>\n            {selectedVariant?.children}\n          </Title>\n          {dirtyState && <div className={dirtyStateClasses}>{dirtyStateText}</div>}\n        </FlexBox>\n        <Button\n          className={clsx(classes.navDownBtn, 'ui5-content-density-compact')}\n          tooltip={selectViewText}\n          accessibleName={selectViewText}\n          onClick={disabled ? undefined : handleOpenVariantManagement}\n          design={ButtonDesign.Transparent}\n          icon={navDownIcon}\n          disabled={disabled}\n        />\n        {canRenderPortal\n          ? createPortal(\n              <ResponsivePopover\n                className={classes.popover}\n                ref={popoverRef}\n                headerText={titleText}\n                placementType={placement}\n                footer={\n                  (showSaveBtn || !hideSaveAs || !hideManageVariants) && (\n                    <Bar\n                      design={BarDesign.Footer}\n                      className={classes.footer}\n                      endContent={\n                        <>\n                          {!inErrorState && showSaveBtn && (\n                            <Button onClick={handleSave} design={ButtonDesign.Emphasized}>\n                              {saveText}\n                            </Button>\n                          )}\n                          {!inErrorState && !hideSaveAs && (\n                            <Button\n                              onClick={handleOpenSaveAsDialog}\n                              design={showSaveBtn ? ButtonDesign.Transparent : ButtonDesign.Emphasized}\n                              disabled={!selectedVariant || Object.keys(selectedVariant).length === 0}\n                            >\n                              {saveAsText}\n                            </Button>\n                          )}\n                          {!inErrorState && !hideManageVariants && (\n                            <Button\n                              onClick={handleManageClick}\n                              design={showSaveBtn || !hideSaveAs ? ButtonDesign.Transparent : ButtonDesign.Emphasized}\n                            >\n                              {manageText}\n                            </Button>\n                          )}\n                        </>\n                      }\n                    />\n                  )\n                }\n                onAfterClose={stopPropagation}\n              >\n                {inErrorState ? (\n                  <IllustratedMessage name={IllustrationMessageType.UnableToLoad} />\n                ) : (\n                  <List\n                    onSelectionChange={handleVariantItemSelect}\n                    mode={ListMode.SingleSelect}\n                    header={\n                      showInput ? (\n                        <div className={classes.searchInputContainer} tabIndex={-1}>\n                          <Input\n                            className={classes.searchInput}\n                            accessibleName={a11ySearchText}\n                            value={searchValue}\n                            placeholder={searchText}\n                            onInput={handleSearchInput}\n                            showClearIcon\n                            icon={<Icon name={searchIcon} className={classes.inputIcon} />}\n                          />\n                        </div>\n                      ) : undefined\n                    }\n                  >\n                    {filteredChildren ?? safeChildrenWithFavorites}\n                  </List>\n                )}\n              </ResponsivePopover>,\n              portalContainer ?? document.body\n            )\n          : null}\n        {manageViewsDialogOpen && (\n          <ManageViewsDialog\n            onAfterClose={handleManageClose}\n            handleSaveManageViews={handleSaveManageViews}\n            showShare={!hideShare}\n            showApplyAutomatically={!hideApplyAutomatically}\n            showCreatedBy={!hideCreatedBy}\n            showSetAsDefault={!hideSetAsDefault}\n            variantNames={variantNames}\n            portalContainer={portalContainer}\n            showOnlyFavorites={showOnlyFavorites}\n          >\n            {safeChildren}\n          </ManageViewsDialog>\n        )}\n        {saveAsDialogOpen && (\n          <SaveViewDialog\n            saveViewInputProps={selectedSaveViewInputProps}\n            portalContainer={portalContainer}\n            showShare={!hideShare}\n            showApplyAutomatically={!hideApplyAutomatically}\n            showSetAsDefault={!hideSetAsDefault}\n            onAfterClose={handleSaveAsClose}\n            handleSave={handleSaveView}\n            selectedVariant={selectedVariant}\n            variantNames={variantNames}\n          />\n        )}\n      </VariantManagementContext.Provider>\n    </div>\n  );\n});\n\nVariantManagement.displayName = 'VariantManagement';\n\nexport { VariantManagement };\n","'use client';\n\nimport { useSyncRef } from '@ui5/webcomponents-react-base';\nimport React, { forwardRef, useContext, useEffect } from 'react';\nimport { VariantManagementContext } from '../../internal/VariantManagementContext.js';\nimport type { InputPropTypes } from '../../webComponents/index.js';\nimport type { StandardListItemDomRef, StandardListItemPropTypes } from '../../webComponents/StandardListItem/index.js';\nimport { StandardListItem } from '../../webComponents/StandardListItem/index.js';\n\nexport interface VariantItemPropTypes extends Pick<StandardListItemPropTypes, 'accessibleName' | 'selected'> {\n  /**\n   * The name of the variant.\n   */\n  children: string;\n  /**\n   * Author of the variant.\n   */\n  author?: string;\n  /**\n   * Indicates if favorites can be created.\n   *\n   * __Note:__ Has no effect if `showOnlyFavorites` is falsy in the `VariantMangament`.\n   */\n  favorite?: boolean;\n  /**\n   * Indicator if a variant is visible for all users (public flag is set).\n   */\n  global?: boolean;\n  /**\n   * Indicator if it's the default variant.\n   */\n  isDefault?: boolean;\n  /**\n   * Indicates if the variant title can be changed.\n   */\n  labelReadOnly?: boolean;\n  /**\n   * Indicates if the variant should be applied automatically on selection.\n   */\n  applyAutomatically?: boolean;\n  /**\n   * Text displayed next to the \"Apply Automatically\" checkbox inside the \"Manage Views\" dialog.\n   */\n  applyAutomaticallyText?: string;\n  /**\n   * If set to false, the user is allowed to change the item's data.\n   *\n   * __Note:__ When set to true, no \"Save\" button will be displayed for the `VariantItem` when the `VariantManagement` is in `dirtyState`.\n   */\n  readOnly?: boolean;\n  /**\n   * Indicates if the variant can be deleted.\n   *\n   * __Note:__ If not set, a delete button is shown for all variants except for variants with `global={true}`.\n   */\n  hideDelete?: boolean;\n  /**\n   * Defines the props of the input rendered with the `VariantItem` inside the \"Manage Views\" dialog.\n   *\n   * __Note:__ It is possible to overwrite internally used props. Please use with caution!\n   */\n  manageViewsInputProps?: Omit<InputPropTypes, 'value'>;\n  /**\n   * Defines the props of the input rendered with the `VariantItem` inside the \"Save View\" dialog.\n   *\n   * __Note:__ It is possible to overwrite internally used props. Please use with caution!\n   */\n  saveViewInputProps?: Omit<InputPropTypes, 'value' | 'id'>;\n}\n\n/**\n * The `VariantItem` describes a variant/view of the `VariantManagement` component.\n */\nconst VariantItem = forwardRef<StandardListItemDomRef, VariantItemPropTypes>((props, ref) => {\n  const {\n    isDefault,\n    author,\n    favorite,\n    global,\n    labelReadOnly,\n    applyAutomatically,\n    applyAutomaticallyText,\n    readOnly,\n    selected,\n    children,\n    hideDelete\n  } = props;\n  const { selectVariantItem } = useContext(VariantManagementContext);\n  const [componentRef, consolidatedRef] = useSyncRef<StandardListItemDomRef>(ref);\n  useEffect(() => {\n    if (selected) {\n      selectVariantItem({ ...props, variantItem: consolidatedRef.current });\n    }\n  }, [selected]);\n\n  // inputProps are passed through to input components used in the configuration dialogs\n  const { manageViewsInputProps: _0, saveViewInputProps: _1, ...rest } = props;\n\n  return (\n    <StandardListItem\n      {...rest}\n      ref={componentRef}\n      data-is-default={isDefault}\n      data-author={author}\n      data-favorite={favorite}\n      data-global={global}\n      data-label-read-only={labelReadOnly}\n      data-apply-automatically={applyAutomatically}\n      data-apply-automatically-text={applyAutomaticallyText}\n      data-read-only={readOnly}\n      data-children={children}\n      data-hide-delete={hideDelete}\n    />\n  );\n});\n\nVariantItem.displayName = 'VariantItem';\n\nexport { VariantItem };\n"],"names":["VariantManagementContext","createContext","_selectedVariant","ManageViewsTableRows","props","variantNames","changedVariantNames","setChangedVariantNames","handleRowChange","handleDelete","defaultView","setDefaultView","showShare","showApplyAutomatically","showSetAsDefault","showCreatedBy","labelReadOnly","favorite","children","global","isDefault","applyAutomatically","applyAutomaticallyText","author","setInvalidVariants","hideDelete","showOnlyFavorites","i18nBundle","useI18nBundle","errorTextAlreadyExists","VARIANT_MANAGEMENT_ERROR_DUPLICATE","errorTextEmpty","SPECIFY_VIEW_NAME","publicText","PUBLIC","privateText","PRIVATE","a11yFavoriteText","MARK_AS_FAVORITE","a11yStandardText","MARK_AS_STANDARD","a11yDeleteText","DELETE_VIEW","a11yApplyAutomaticallyText","APPLY_AUTOMATICALLY","favoriteIconTitleText","SELECTED_AS_FAVORITE","unfavoriteIconTitleText","UNSELECTED_AS_FAVORITE","inputPlaceHolder","VIEW","internalFavorite","setFavorite","useReducer","prev","iconName","favoriteIcon","unfavoriteIcon","inputRef","useRef","variantNameInvalid","setVariantNameInvalid","useState","onFavoriteClick","e","handleVariantInput","_a","_b","trimmedValue","trimAndRemoveSpaces","invalidRows","handleVariantChange","currentChangedVariants","handleDefaultChange","handleApplyAutomaticallyChange","renderView","jsx","Text","ThemingParameters","Input","ValueState","jsxs","TableRow","TableCell","Icon","RadioButton","CheckBox","Button","declineIcon","ButtonDesign","_popupDefaultHeaderHeight","cssVarVersionInfoPrefix","_popupHeaderFontFamily","styles","isPhone","isTablet","useStyles","createUseStyles","ManageViewsDialog","onAfterClose","handleSaveManageViews","portalContainer","cancelText","CANCEL","saveText","SAVE","viewHeaderText","sharingHeaderText","SHARING","defaultHeaderText","DEFAULT","applyAutomaticallyHeaderText","createdByHeaderText","CREATED_BY","manageViewsText","MANAGE_VIEWS","searchText","SEARCH","invalidVariants","classes","columns","Fragment","TableColumn","childrenProps","setChildrenProps","Children","child","React","useEffect","filteredProps","setFilteredProps","changedTableRows","handleTableRowChange","payload","deletedTableRows","item","handleSave","handleSearchInput","lowerCaseVal","_d","_c","useCanRenderPortal","createPortal","Dialog","FlexBox","FlexBoxDirection","FlexBoxAlignItems","searchIcon","Bar","BarDesign","Table","itemProps","createElement","SaveViewDialog","selectedVariant","saveViewInputProps","saveViewDialogRef","uniqueId","useIsomorphicId","headingText","SAVE_VIEW","defaultCbLabel","SET_AS_DEFAULT","publicCbLabel","applyAutomaticallyCbLabel","inputLabelText","setDefault","isPublic","setPublic","setApplyAutomatically","variantName","setVariantName","isInvalid","setIsInvalid","handleInputChange","onSave","handleCancel","handleChangeDefault","handleChangePublic","handleChangeApplyAutomatically","Label","clsx","VariantManagement","forwardRef","ref","titleText","MY_VIEWS","className","style","placement","PopoverPlacementType","level","TitleLevel","onSelect","closeOnItemSelect","disabled","onSaveAs","onSaveManageViews","inErrorState","hideShare","hideManageVariants","hideApplyAutomatically","hideSetAsDefault","hideCreatedBy","hideSaveAs","dirtyStateText","dirtyState","rest","popoverRef","safeChildren","setSafeChildren","manageViewsDialogOpen","setManageViewsDialogOpen","saveAsDialogOpen","setSaveAsDialogOpen","setSelectedVariant","currentSelectedVariant","isValidElement","selectedSaveViewInputProps","setSelectedSaveViewInputProps","handleClose","handleManageClick","handleManageClose","handleOpenSaveAsDialog","handleSaveAsClose","enrichEventWithDetails","handleSaveView","selectedVariant2","updatedRows","deletedRows","callbackProperties","updatedProps","currentVariant","_0","rest2","cloneElement","handleOpenVariantManagement","useCallback","saveAsText","SAVE_AS","manageText","MANAGE","a11ySearchText","SEARCH_VARIANT","selectViewText","SELECT_VIEW","variantManagementClasses","dirtyStateClasses","selectVariantEventRef","selectedChild","handleVariantItemSelect","favoriteChildren","setFavoriteChildren","safeChildrenWithFavorites","showInput","filteredChildren","setFilteredChildren","searchValue","setSearchValue","canRenderPortal","showSaveBtn","Title","navDownIcon","ResponsivePopover","stopPropagation","IllustratedMessage","IllustrationMessageType","List","ListMode","VariantItem","readOnly","selected","selectVariantItem","useContext","componentRef","consolidatedRef","useSyncRef","_1","StandardListItem"],"mappings":"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"}