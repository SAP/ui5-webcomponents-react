{"version":3,"mappings":"wJA4LA,MAAAA,EAAAC,EAA2B,0BACzB,+DACiE,GAChE,aACU,GACV,IAAAC,EAAA,oDAAAC,KAAA,ydAEH,EAEAH,EAAA,iCAEAA,EAAA,cAAkC,KAAAI,EAAA,aACF,KAAAC,EAAA,IAEhC","names":["IllustratedMessage","withWebComponent","__vitePreload","n","IllustrationMessageType","IllustrationMessageSize"],"sources":["../../packages/main/src/webComponents/IllustratedMessage/index.tsx"],"sourcesContent":["'use client';\n\nimport '@ui5/webcomponents-fiori/dist/IllustratedMessage.js';\nimport type { ReactNode } from 'react';\nimport { IllustrationMessageType, IllustrationMessageSize } from '../../enums/index.js';\nimport type { CommonProps, Ui5DomRef } from '../../interfaces/index.js';\nimport { withWebComponent } from '../../internal/withWebComponent.js';\nimport type { UI5WCSlotsNode } from '../../types/index.js';\n\ninterface IllustratedMessageAttributes {\n  /**\n   * Receives id(or many ids) of the elements that label the component.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Defines the illustration name that will be displayed in the component.\n   *\n   * Available illustrations are:\n   *\n   * *   `AddColumn`\n   * *   `AddPeople`\n   * *   `AddDimensions`\n   * *   `BalloonSky`\n   * *   `BeforeSearch`\n   * *   `Connection`\n   * *   `EmptyCalendar`\n   * *   `EmptyList`\n   * *   `EmptyPlanningCalendar`\n   * *   `ErrorScreen`\n   * *   `FilterTable`\n   * *   `GroupTable`\n   * *   `NoActivities`\n   * *   `NoColumnsSet`\n   * *   `NoData`\n   * *   `NoEntries`\n   * *   `NoFilterResults`\n   * *   `NoMail_v1`\n   * *   `NoMail`\n   * *   `NoNotifications`\n   * *   `NoSavedItems_v1`\n   * *   `NoSavedItems`\n   * *   `NoSearchResults`\n   * *   `NoTasks_v1`\n   * *   `NoTasks`\n   * *   `NoDimensionsSet`\n   * *   `PageNotFound`\n   * *   `ReloadScreen`\n   * *   `ResizeColumn`\n   * *   `SearchEarth`\n   * *   `SearchFolder`\n   * *   `SimpleBalloon`\n   * *   `SimpleBell`\n   * *   `SimpleCalendar`\n   * *   `SimpleCheckMark`\n   * *   `SimpleConnection`\n   * *   `SimpleEmptyDoc`\n   * *   `SimpleEmptyList`\n   * *   `SimpleError`\n   * *   `SimpleMagnifier`\n   * *   `SimpleMail`\n   * *   `SimpleNoSavedItems`\n   * *   `SimpleNotFoundMagnifier`\n   * *   `SimpleReload`\n   * *   `SimpleTask`\n   * *   `SleepingBell`\n   * *   `SortColumn`\n   * *   `SuccessBalloon`\n   * *   `SuccessCheckMark`\n   * *   `SuccessHighFive`\n   * *   `SuccessScreen`\n   * *   `Survey`\n   * *   `Tent`\n   * *   `UnableToLoad`\n   * *   `UnableToLoadImage`\n   * *   `UnableToUpload`\n   * *   `UploadToCloud`\n   * *   `UploadCollection`\n   * *   `TntChartArea`\n   * *   `TntChartArea2`\n   * *   `TntChartBar`\n   * *   `TntChartBPMNFlow`\n   * *   `TntChartBullet`\n   * *   `TntChartDoughnut`\n   * *   `TntChartFlow`\n   * *   `TntChartGantt`\n   * *   `TntChartOrg`\n   * *   `TntChartPie`\n   * *   `TntCodePlaceholder`\n   * *   `TntCompany`\n   * *   `TntComponents`\n   * *   `TntExternalLink`\n   * *   `TntFaceID`\n   * *   `TntFingerprint`\n   * *   `TntLock`\n   * *   `TntMission`\n   * *   `TntNoApplications`\n   * *   `TntNoFlows`\n   * *   `TntNoUsers`\n   * *   `TntRadar`\n   * *   `TntSecrets`\n   * *   `TntServices`\n   * *   `TntSessionExpired`\n   * *   `TntSessionExpiring`\n   * *   `TntSuccess`\n   * *   `TntSuccessfulAuth`\n   * *   `TntSystems`\n   * *   `TntTeams`\n   * *   `TntTools`\n   * *   `TntUnableToLoad`\n   * *   `TntUnlock`\n   * *   `TntUnsuccessfulAuth`\n   * *   `TntUser2`\n   *\n   *\n   *\n   * **Note:** By default the `BeforeSearch` illustration is loaded.\n   * When using an illustration type, other than the default, it should be loaded in addition:\n   * `import \"@ui5/webcomponents-fiori/dist/illustrations/NoData.js\";`\n   *\n   * **Note:** TNT illustrations cointain `Tnt` prefix in their name. You can import them removing the `Tnt` prefix like this:\n   * `import \"@ui5/webcomponents-fiori/dist/illustrations/tnt/SessionExpired.js\";`\n   */\n  name?: IllustrationMessageType | keyof typeof IllustrationMessageType;\n  /**\n   * Determines which illustration breakpoint variant is used.\n   *\n   * Available options are:\n   *\n   * *   `Auto`\n   * *   `Base`\n   * *   `Spot`\n   * *   `Dialog`\n   * *   `Scene`\n   *\n   * As `IllustratedMessage` adapts itself around the `Illustration`, the other elements of the component are displayed differently on the different breakpoints/illustration sizes.\n   */\n  size?: IllustrationMessageSize | keyof typeof IllustrationMessageSize;\n  /**\n   * Defines the subtitle of the component.\n   *\n   * **Note:** Using this property, the default subtitle text of illustration will be overwritten.\n   *\n   * **Note:** Using `subtitle` slot, the default of this property will be overwritten.\n   */\n  subtitleText?: string;\n  /**\n   * Defines the title of the component.\n   *\n   * **Note:** Using this property, the default title text of illustration will be overwritten.\n   */\n  titleText?: string;\n}\n\nexport interface IllustratedMessageDomRef extends IllustratedMessageAttributes, Ui5DomRef {}\n\nexport interface IllustratedMessagePropTypes extends IllustratedMessageAttributes, CommonProps {\n  /**\n   * Defines the component actions.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the subtitle of the component.\n   *\n   * **Note:** Using this slot, the default subtitle text of illustration and the value of `subtitleText` property will be overwritten.\n   *\n   * __Note:__ The content of the prop will be rendered into a [&lt;slot&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot) by assigning the respective [slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot) attribute (`slot=\"subtitle\"`).\n   * Since you can't change the DOM order of slots when declaring them within a prop, it might prove beneficial to manually mount them as part of the component's children, especially when facing problems with the reading order of screen readers.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-handling-slots--docs).\n   */\n  subtitle?: UI5WCSlotsNode;\n}\n\n/**\n * An IllustratedMessage is a recommended combination of a solution-oriented message, an engaging illustration, and conversational tone to better communicate an empty or a success state than just show a message alone. Each illustration has default internationalised title and subtitle texts. Also they can be managed with `titleText` and `subtitleText` properties. To display the desired illustration, use the `name` property, where you can find the list of all available illustrations.\n *\n * **Note:** By default the “BeforeSearch” illustration is loaded. To use other illustrations, make sure you import them in addition, for example:\n * `import \"@ui5/webcomponents-fiori/dist/illustrations/NoData.js\"`\n * **Note:** Illustrations starting with the “Tnt” prefix are part of another illustration set. For example to use the “TntSuccess” illustration, add the following import::\n * `import \"@ui5/webcomponents-fiori/dist/illustrations/tnt/Success.js\"`\n *\n *__Note:__ The `title` slot collides with the native HTML `title` attribute, so to customize the title (heading) of the component you need to pass it as slot. You can find out more about this [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/user-feedback-illustratedmessage--default-story#fully-customizable-title).\n *\n * __Note:__ This component is a web component developed by the UI5 Web Components’ team.\n *\n * [UI5 Web Components Storybook](https://sap.github.io/ui5-webcomponents/playground/?path=/docs/fiori-IllustratedMessage)\n */\nconst IllustratedMessage = withWebComponent<IllustratedMessagePropTypes, IllustratedMessageDomRef>(\n  'ui5-illustrated-message',\n  ['accessibleNameRef', 'name', 'size', 'subtitleText', 'titleText'],\n  [],\n  ['subtitle'],\n  [],\n  () => import('@ui5/webcomponents-fiori/dist/IllustratedMessage.js')\n);\n\nIllustratedMessage.displayName = 'IllustratedMessage';\n\nIllustratedMessage.defaultProps = {\n  name: IllustrationMessageType.BeforeSearch,\n  size: IllustrationMessageSize.Auto\n};\n\nexport { IllustratedMessage };\n"],"file":"assets/index-d5634984.js"}