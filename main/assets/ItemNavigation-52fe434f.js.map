{"version":3,"file":"ItemNavigation-52fe434f.js","sources":["../../node_modules/@ui5/webcomponents-base/dist/types/NavigationMode.js","../../node_modules/@ui5/webcomponents-base/dist/types/ItemNavigationBehavior.js","../../node_modules/@ui5/webcomponents-base/dist/delegate/ItemNavigation.js"],"sourcesContent":["/**\n * Different navigation modes for ItemNavigation.\n *\n * @readonly\n * @enum {string}\n * @public\n * @author SAP SE\n * @alias sap.ui.webc.base.types.NavigationMode\n */\nvar NavigationMode;\n(function (NavigationMode) {\n    /**\n     * @public\n     * @type {Auto}\n     */\n    NavigationMode[\"Auto\"] = \"Auto\";\n    /**\n     * @public\n     * @type {Vertical}\n     */\n    NavigationMode[\"Vertical\"] = \"Vertical\";\n    /**\n     * @public\n     * @type {Horizontal}\n     */\n    NavigationMode[\"Horizontal\"] = \"Horizontal\";\n    /**\n     * @public\n     * @type {Paging}\n     */\n    NavigationMode[\"Paging\"] = \"Paging\";\n})(NavigationMode || (NavigationMode = {}));\nexport default NavigationMode;\n//# sourceMappingURL=NavigationMode.js.map","/**\n * Different behavior for ItemNavigation.\n *\n * @readonly\n * @enum {string}\n * @public\n * @author SAP SE\n * @alias sap.ui.webc.base.types.ItemNavigationBehavior\n */\nvar ItemNavigationBehavior;\n(function (ItemNavigationBehavior) {\n    /**\n     * Static behavior: navigations stops at the first or last item.\n     * @public\n     * @type {Static}\n     */\n    ItemNavigationBehavior[\"Static\"] = \"Static\";\n    /**\n     * Cycling behavior: navigating past the last item continues with the first and vice versa.\n     * @public\n     * @type {Cyclic}\n     */\n    ItemNavigationBehavior[\"Cyclic\"] = \"Cyclic\";\n})(ItemNavigationBehavior || (ItemNavigationBehavior = {}));\nexport default ItemNavigationBehavior;\n//# sourceMappingURL=ItemNavigationBehavior.js.map","import { isDown, isUp, isLeft, isRight, isHome, isEnd, isPageDown, isPageUp, } from \"../Keys.js\";\nimport getActiveElement from \"../util/getActiveElement.js\";\nimport NavigationMode from \"../types/NavigationMode.js\";\nimport ItemNavigationBehavior from \"../types/ItemNavigationBehavior.js\";\nimport { instanceOfUI5Element } from \"../UI5Element.js\";\n/**\n * The ItemNavigation class manages the calculations to determine the correct \"tabindex\" for a group of related items inside a root component.\n * Important: ItemNavigation only does the calculations and does not change \"tabindex\" directly, this is a responsibility of the developer.\n *\n * The keys that trigger ItemNavigation are:\n *  - Up/down\n *  - Left/right\n *  - Home/End\n *\n * Usage:\n * 1) Use the \"getItemsCallback\" constructor property to pass a callback to ItemNavigation, which, whenever called, will return the list of items to navigate among.\n *\n * Each item passed to ItemNavigation via \"getItemsCallback\" must be:\n *  - A) either a UI5Element with a \"_tabIndex\" property\n *  - B) or an Object with \"id\" and \"_tabIndex\" properties which represents a part of the root component's shadow DOM.\n *    The \"id\" must be a valid ID within the shadow root of the component ItemNavigation operates on.\n *    This object must not be a DOM object because, as said, ItemNavigation will not set \"tabindex\" on it. It must be a representation of a DOM object only\n *    and the developer has the responsibility to update the \"tabindex\" in the component's DOM.\n *  - C) a combination of the above\n *\n * Whenever the user navigates with the keyboard, ItemNavigation will modify the \"_tabIndex\" properties of the items.\n * It is the items' responsibilities to re-render themselves and apply the correct value of \"tabindex\" (i.e. to map the \"_tabIndex\" ItemNavigation set to them to the \"tabindex\" property).\n * If the items of the ItemNavigation are UI5Elements themselves, this can happen naturally since they will be invalidated by their \"_tabIndex\" property.\n * If the items are Objects with \"id\" and \"_tabIndex\" however, it is the developer's responsibility to apply these and the easiest way is to have the root component invalidated by ItemNavigation.\n * To do so, set the \"affectedPropertiesNames\" constructor property to point to one or more of the root component's properties that need refreshing when \"_tabIndex\" is changed deeply.\n *\n * 2) Call the \"setCurrentItem\" method of ItemNavigation whenever you want to change the current item.\n * This is most commonly required if the user for example clicks on an item and thus selects it directly.\n * Pass as the only argument to \"setCurrentItem\" the item that becomes current (must be one of the items, returned by \"getItemsCallback\").\n *\n * @class\n * @public\n */\nclass ItemNavigation {\n    /**\n     *\n     * @param rootWebComponent the component to operate on (component that slots or contains within its shadow root the items the user navigates among)\n     * @param {ItemNavigationOptions} options Object with configuration options:\n     *  - currentIndex: the index of the item that will be initially selected (from which navigation will begin)\n     *  - navigationMode (Auto|Horizontal|Vertical): whether the items are displayed horizontally (Horizontal), vertically (Vertical) or as a matrix (Auto) meaning the user can navigate in both directions (up/down and left/right)\n     *  - rowSize: tells how many items per row there are when the items are not rendered as a flat list but rather as a matrix. Relevant for navigationMode=Auto\n     * \t- skipItemsSize: tells how many items upon PAGE_UP and PAGE_DOWN should be skipped to applying the focus on the next item\n     *  - behavior (Static|Cycling): tells what to do when trying to navigate beyond the first and last items\n     *    Static means that nothing happens if the user tries to navigate beyond the first/last item.\n     *    Cycling means that when the user navigates beyond the last item they go to the first and vice versa.\n     *  - getItemsCallback: function that, when called, returns an array with all items the user can navigate among\n     *  - affectedPropertiesNames: a list of metadata properties on the root component which, upon user navigation, will be reassigned by address thus causing the root component to invalidate\n     */\n    constructor(rootWebComponent, options) {\n        if (!rootWebComponent.isUI5Element) {\n            throw new Error(\"The root web component must be a UI5 Element instance\");\n        }\n        this.rootWebComponent = rootWebComponent;\n        this.rootWebComponent.addEventListener(\"keydown\", this._onkeydown.bind(this));\n        this.rootWebComponent._onComponentStateFinalized = () => {\n            this._init();\n        };\n        if (typeof options.getItemsCallback !== \"function\") {\n            throw new Error(\"getItemsCallback is required\");\n        }\n        this._getItems = options.getItemsCallback;\n        this._currentIndex = options.currentIndex || 0;\n        this._rowSize = options.rowSize || 1;\n        this._behavior = options.behavior || ItemNavigationBehavior.Static;\n        this._navigationMode = options.navigationMode || NavigationMode.Auto;\n        this._affectedPropertiesNames = options.affectedPropertiesNames || [];\n        this._skipItemsSize = options.skipItemsSize || null;\n    }\n    /**\n     * Call this method to set a new \"current\" (selected) item in the item navigation\n     * Note: the item passed to this function must be one of the items, returned by the getItemsCallback function\n     *\n     * @public\n     * @param current the new selected item\n     */\n    setCurrentItem(current) {\n        const currentItemIndex = this._getItems().indexOf(current);\n        if (currentItemIndex === -1) {\n            console.warn(`The provided item is not managed by ItemNavigation`, current); // eslint-disable-line\n            return;\n        }\n        this._currentIndex = currentItemIndex;\n        this._applyTabIndex();\n    }\n    /**\n     * Call this method to dynamically change the row size\n     *\n     * @public\n     * @param newRowSize\n     */\n    setRowSize(newRowSize) {\n        this._rowSize = newRowSize;\n    }\n    _init() {\n        this._getItems().forEach((item, idx) => {\n            item._tabIndex = (idx === this._currentIndex) ? \"0\" : \"-1\";\n        });\n    }\n    _onkeydown(event) {\n        if (!this._canNavigate()) {\n            return;\n        }\n        const horizontalNavigationOn = this._navigationMode === NavigationMode.Horizontal || this._navigationMode === NavigationMode.Auto;\n        const verticalNavigationOn = this._navigationMode === NavigationMode.Vertical || this._navigationMode === NavigationMode.Auto;\n        const isRTL = this.rootWebComponent.effectiveDir === \"rtl\";\n        if (isRTL && isLeft(event) && horizontalNavigationOn) {\n            this._handleRight();\n        }\n        else if (isRTL && isRight(event) && horizontalNavigationOn) {\n            this._handleLeft();\n        }\n        else if (isLeft(event) && horizontalNavigationOn) {\n            this._handleLeft();\n        }\n        else if (isRight(event) && horizontalNavigationOn) {\n            this._handleRight();\n        }\n        else if (isUp(event) && verticalNavigationOn) {\n            this._handleUp();\n        }\n        else if (isDown(event) && verticalNavigationOn) {\n            this._handleDown();\n        }\n        else if (isHome(event)) {\n            this._handleHome();\n        }\n        else if (isEnd(event)) {\n            this._handleEnd();\n        }\n        else if (isPageUp(event)) {\n            this._handlePageUp();\n        }\n        else if (isPageDown(event)) {\n            this._handlePageDown();\n        }\n        else {\n            return; // if none of the supported keys is pressed, we don't want to prevent the event or update the item navigation\n        }\n        event.preventDefault();\n        this._applyTabIndex();\n        this._focusCurrentItem();\n    }\n    _handleUp() {\n        const itemsLength = this._getItems().length;\n        if (this._currentIndex - this._rowSize >= 0) { // no border reached, just decrease the index by a row\n            this._currentIndex -= this._rowSize;\n            return;\n        }\n        if (this._behavior === ItemNavigationBehavior.Cyclic) { // if cyclic, go to the **last** item in the **previous** column\n            const firstItemInThisColumnIndex = this._currentIndex % this._rowSize;\n            const firstItemInPreviousColumnIndex = firstItemInThisColumnIndex === 0 ? this._rowSize - 1 : firstItemInThisColumnIndex - 1; // find the first item in the previous column (if the current column is the first column -> move to the last column)\n            const rows = Math.ceil(itemsLength / this._rowSize); // how many rows there are (even if incomplete, f.e. for 14 items and _rowSize=4 -> 4 rows total, although only 2 items on the last row)\n            let lastItemInPreviousColumnIndex = firstItemInPreviousColumnIndex + (rows - 1) * this._rowSize; // multiply rows by columns, and add the column's first item's index\n            if (lastItemInPreviousColumnIndex > itemsLength - 1) { // for incomplete rows, use the previous row's last item, as for them the last item is missing\n                lastItemInPreviousColumnIndex -= this._rowSize;\n            }\n            this._currentIndex = lastItemInPreviousColumnIndex;\n        }\n        else { // not cyclic, so just go to the first item\n            this._currentIndex = 0;\n        }\n    }\n    _handleDown() {\n        const itemsLength = this._getItems().length;\n        if (this._currentIndex + this._rowSize < itemsLength) { // no border reached, just increase the index by a row\n            this._currentIndex += this._rowSize;\n            return;\n        }\n        if (this._behavior === ItemNavigationBehavior.Cyclic) { // if cyclic, go to the **first** item in the **next** column\n            const firstItemInThisColumnIndex = this._currentIndex % this._rowSize; // find the first item in the current column first\n            const firstItemInNextColumnIndex = (firstItemInThisColumnIndex + 1) % this._rowSize; // to get the first item in the next column, just increase the index by 1. The modulo by rows is for the case when we are at the last column\n            this._currentIndex = firstItemInNextColumnIndex;\n        }\n        else { // not cyclic, so just go to the last item\n            this._currentIndex = itemsLength - 1;\n        }\n    }\n    _handleLeft() {\n        const itemsLength = this._getItems().length;\n        if (this._currentIndex > 0) {\n            this._currentIndex -= 1;\n            return;\n        }\n        if (this._behavior === ItemNavigationBehavior.Cyclic) { // go to the first item in the next column\n            this._currentIndex = itemsLength - 1;\n        }\n    }\n    _handleRight() {\n        const itemsLength = this._getItems().length;\n        if (this._currentIndex < itemsLength - 1) {\n            this._currentIndex += 1;\n            return;\n        }\n        if (this._behavior === ItemNavigationBehavior.Cyclic) { // go to the first item in the next column\n            this._currentIndex = 0;\n        }\n    }\n    _handleHome() {\n        const homeEndRange = this._rowSize > 1 ? this._rowSize : this._getItems().length;\n        this._currentIndex -= this._currentIndex % homeEndRange;\n    }\n    _handleEnd() {\n        const homeEndRange = this._rowSize > 1 ? this._rowSize : this._getItems().length;\n        this._currentIndex += (homeEndRange - 1 - this._currentIndex % homeEndRange); // eslint-disable-line\n    }\n    _handlePageUp() {\n        if (this._rowSize > 1) {\n            // eslint-disable-next-line\n            // TODO: handle page up on matrix (grid) layout - ColorPalette, ProductSwitch.\n            return;\n        }\n        this._handlePageUpFlat();\n    }\n    _handlePageDown() {\n        if (this._rowSize > 1) {\n            // eslint-disable-next-line\n            // TODO: handle page up on matrix (grid) layout - ColorPalette, ProductSwitch.\n            return;\n        }\n        this._handlePageDownFlat();\n    }\n    /**\n     * Handles PAGE_UP in a flat list-like structure, both vertically and horizontally.\n     */\n    _handlePageUpFlat() {\n        if (this._skipItemsSize === null) {\n            // Move the focus to the very top (as Home).\n            this._currentIndex -= this._currentIndex;\n            return;\n        }\n        if (this._currentIndex + 1 > this._skipItemsSize) {\n            // When there are more than \"skipItemsSize\" number of items to the top,\n            // move the focus up/left with the predefined number.\n            this._currentIndex -= this._skipItemsSize;\n        }\n        else {\n            // Otherwise, move the focus to the very top (as Home).\n            this._currentIndex -= this._currentIndex;\n        }\n    }\n    /**\n     * Handles PAGE_DOWN in a flat list-like structure, both vertically and horizontally.\n     */\n    _handlePageDownFlat() {\n        if (this._skipItemsSize === null) {\n            // Move the focus to the very bottom (as End).\n            this._currentIndex = this._getItems().length - 1;\n            return;\n        }\n        const currentToEndRange = this._getItems().length - this._currentIndex - 1;\n        if (currentToEndRange > this._skipItemsSize) {\n            // When there are more than \"skipItemsSize\" number of items until the bottom,\n            // move the focus down/right with the predefined number.\n            this._currentIndex += this._skipItemsSize;\n        }\n        else {\n            // Otherwise, move the focus to the very bottom (as End).\n            this._currentIndex = this._getItems().length - 1;\n        }\n    }\n    _applyTabIndex() {\n        const items = this._getItems();\n        for (let i = 0; i < items.length; i++) {\n            items[i]._tabIndex = i === this._currentIndex ? \"0\" : \"-1\";\n        }\n        this._affectedPropertiesNames.forEach(propName => {\n            const prop = this.rootWebComponent[propName];\n            this.rootWebComponent[propName] = Array.isArray(prop) ? [...prop] : { ...prop };\n        });\n    }\n    _focusCurrentItem() {\n        const currentItem = this._getCurrentItem();\n        if (currentItem) {\n            currentItem.focus();\n        }\n    }\n    _canNavigate() {\n        const currentItem = this._getCurrentItem();\n        const activeElement = getActiveElement();\n        return currentItem && currentItem === activeElement;\n    }\n    _getCurrentItem() {\n        const items = this._getItems();\n        if (!items.length) {\n            return;\n        }\n        // normalize the index\n        while (this._currentIndex >= items.length) {\n            this._currentIndex -= this._rowSize;\n        }\n        if (this._currentIndex < 0) {\n            this._currentIndex = 0;\n        }\n        const currentItem = items[this._currentIndex];\n        if (!currentItem) {\n            return;\n        }\n        if (instanceOfUI5Element(currentItem)) {\n            return currentItem.getFocusDomRef();\n        }\n        const currentItemDOMRef = this.rootWebComponent.getDomRef();\n        if (!currentItemDOMRef) {\n            return;\n        }\n        if (currentItem.id) {\n            return currentItemDOMRef.querySelector(`[id=\"${currentItem.id}\"]`);\n        }\n    }\n}\nexport default ItemNavigation;\n//# sourceMappingURL=ItemNavigation.js.map"],"names":["NavigationMode","NavigationMode$1","ItemNavigationBehavior","ItemNavigationBehavior$1","ItemNavigation","rootWebComponent","options","current","currentItemIndex","newRowSize","item","idx","event","horizontalNavigationOn","verticalNavigationOn","isRTL","isLeft","isRight","isUp","isDown","isHome","isEnd","isPageUp","isPageDown","itemsLength","firstItemInThisColumnIndex","firstItemInPreviousColumnIndex","rows","lastItemInPreviousColumnIndex","firstItemInNextColumnIndex","homeEndRange","items","i","propName","prop","currentItem","activeElement","getActiveElement","instanceOfUI5Element","currentItemDOMRef"],"mappings":"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","x_google_ignoreList":[0,1,2]}