{"version":3,"file":"ScatterChart.stories-7c447642.js","sources":["../../node_modules/recharts/es6/chart/ScatterChart.js","../../packages/charts/src/components/ScatterChart/Placeholder.tsx","../../packages/charts/src/components/ScatterChart/ScatterChart.tsx"],"sourcesContent":["/**\n * @fileOverview Scatter Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Scatter } from '../cartesian/Scatter';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { ZAxis } from '../cartesian/ZAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var ScatterChart = generateCategoricalChart({\n  chartName: 'ScatterChart',\n  GraphicalChild: Scatter,\n  defaultTooltipEventType: 'item',\n  validateTooltipEventTypes: ['item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }, {\n    axisType: 'zAxis',\n    AxisComp: ZAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import { ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React from 'react';\nimport ContentLoader from 'react-content-loader/dist/react-content-loader.es.js';\n\nexport const ScatterChartPlaceholder = (props) => {\n  return (\n    <ContentLoader\n      viewBox=\"0 0 165 145\"\n      preserveAspectRatio=\"xMidYMid meet\"\n      width=\"100%\"\n      height=\"100%\"\n      speed={2}\n      backgroundColor={ThemingParameters.sapContent_ImagePlaceholderBackground}\n      foregroundColor={ThemingParameters.sapContent_ImagePlaceholderForegroundColor}\n      backgroundOpacity={ThemingParameters.sapContent_DisabledOpacity as any}\n      {...props}\n    >\n      <rect x=\"10\" y=\"135\" width=\"135\" height=\"1\" />\n      <circle cx=\"20\" cy=\"90\" r=\"2\" />\n      <circle cx=\"40\" cy=\"58\" r=\"3\" />\n      <circle cx=\"60\" cy=\"108\" r=\"14\" />\n      <circle cx=\"85\" cy=\"87\" r=\"8\" />\n      <circle cx=\"105\" cy=\"50\" r=\"6\" />\n      <circle cx=\"125\" cy=\"115\" r=\"4\" />\n      <circle cx=\"78\" cy=\"58\" r=\"10\" />\n      <circle cx=\"28\" cy=\"115\" r=\"4\" />\n    </ContentLoader>\n  );\n};\n","'use client';\n\nimport { enrichEventWithDetails, ThemingParameters, useIsRTL, useSyncRef } from '@ui5/webcomponents-react-base';\nimport type { CSSProperties } from 'react';\nimport React, { forwardRef, useCallback, useRef } from 'react';\nimport type { ReferenceLineProps } from 'recharts';\nimport {\n  CartesianGrid,\n  Legend,\n  ReferenceLine,\n  Scatter,\n  ScatterChart as ScatterChartLib,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ZAxis\n} from 'recharts';\nimport { useChartMargin } from '../../hooks/useChartMargin.js';\nimport { useLegendItemClick } from '../../hooks/useLegendItemClick.js';\nimport { useLongestYAxisLabel } from '../../hooks/useLongestYAxisLabel.js';\nimport { useObserveXAxisHeights } from '../../hooks/useObserveXAxisHeights.js';\nimport { usePrepareDimensionsAndMeasures } from '../../hooks/usePrepareDimensionsAndMeasures.js';\nimport { useTooltipFormatter } from '../../hooks/useTooltipFormatter.js';\nimport type { ICartesianChartConfig } from '../../interfaces/ICartesianChartConfig.js';\nimport type { IChartBaseProps } from '../../interfaces/IChartBaseProps.js';\nimport type { IChartMeasure } from '../../interfaces/IChartMeasure.js';\nimport { ChartContainer } from '../../internal/ChartContainer.js';\nimport { defaultFormatter } from '../../internal/defaults.js';\nimport { tickLineConfig, tooltipContentStyle, tooltipFillOpacity, xAxisPadding } from '../../internal/staticProps.js';\nimport { XAxisTicks } from '../../internal/XAxisTicks.js';\nimport { YAxisTicks } from '../../internal/YAxisTicks.js';\nimport { ScatterChartPlaceholder } from './Placeholder.js';\n\ninterface MeasureConfig extends Omit<IChartMeasure, 'color' | 'hideDataLabel' | 'DataLabel'> {\n  /**\n   * Defines the axis of the measure\n   */\n  axis: 'x' | 'y' | 'z';\n}\n\ninterface ScatterDataObject {\n  /**\n   * Defines label of the dataset\n   */\n  label?: string;\n  /**\n   * Contains the data of the chart\n   */\n  data?: Record<string, unknown>[];\n  /**\n   * Any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n   */\n  color?: CSSProperties['color'];\n  /**\n   * Defines opacity of the displayed dataset\n   * @default 1\n   */\n  opacity?: number;\n}\n\ninterface IScatterChartConfig extends ICartesianChartConfig {\n  referenceLineX?: {\n    value?: number;\n    color?: string;\n  } & ReferenceLineProps;\n}\n\nexport interface ScatterChartProps extends Omit<IChartBaseProps<IScatterChartConfig>, 'dataset'> {\n  /**\n   * An array of dataset objects. Each object defines a dataset which is displayed.\n   *\n   * **Required properties**\n   *  - `data`: array of objects which contains the data.\n   *\n   * **Optional properties**\n   *  - `label`: string containing the label of the dataset which is also displayed in the legend.\n   *  - `color`: any valid CSS color or CSS variable. Defaults to the `sapChart_Ordinal` colors.\n   *  - `opacity`: number contains value of opacity of dataset\n   *\n   * **Example of dataset:**\n   *\n   * <code>\n   *   <pre>\n   *    [\n   *      {\n   *       label: 'America',\n   *       opacity: 0.7,\n   *       data: [\n   *         {\n   *           users: 120,\n   *           sessions: 200,\n   *           volume: 302\n   *         },\n   *         {\n   *           users: 20,\n   *           sessions: 230,\n   *           volume: 392\n   *         }\n   *       ]\n   *      }\n   *    ]\n   *   </pre>\n   * </code>\n   */\n  dataset?: ScatterDataObject[];\n  /**\n   * An array of config objects. Each object is defining one axis in the chart.\n   *\n   * **Required properties**\n   *  - `accessor`: string containing the path to the dataset key this line should display. Supports object structures by using <code>'parent.child'</code>.\n   *     Can also be a getter.\n   *  - `axis`: string containing definition of axis. Must be x, y or z data to the axis.\n   *\n   * **Optional properties**\n   *  - `label`: Label to display in tooltips. Falls back to the <code>accessor</code> if not present.\n   *  - `formatter`: function will be called for each data label and allows you to format it according to your needs. Also addresses labels of axis.\n   */\n  measures?: MeasureConfig[];\n}\n\nconst measureDefaults = {\n  formatter: defaultFormatter\n};\n\n/**\n *\n * A `ScatterChart` is a data visualization that displays multiple circles (bubbles) in a two-dimensional plot.\n *\n * Most commonly, a scatter chart displays the values of three numeric variables,where each observation's data is\n * shown by a circle, while the horizontal and vertical positions of the bubble show the values of two other variables.\n */\nconst ScatterChart = forwardRef<HTMLDivElement, ScatterChartProps>((props, ref) => {\n  const {\n    dataset,\n    loading,\n    noLegend,\n    noAnimation,\n    tooltipConfig,\n    onDataPointClick,\n    onLegendClick,\n    onClick,\n    style,\n    className,\n    slot,\n    ChartPlaceholder,\n    children,\n    ...rest\n  } = props;\n\n  const chartConfig = {\n    yAxisVisible: false,\n    xAxisVisible: true,\n    gridStroke: ThemingParameters.sapList_BorderColor,\n    gridHorizontal: true,\n    gridVertical: false,\n    legendPosition: 'bottom',\n    legendHorizontalAlign: 'left',\n    zoomingTool: false,\n    resizeDebounce: 250,\n    ...props.chartConfig\n  };\n  const { referenceLine, referenceLineX } = chartConfig;\n\n  const { measures } = usePrepareDimensionsAndMeasures([], props.measures, {}, measureDefaults);\n\n  const tooltipValueFormatter = useTooltipFormatter(measures);\n  const [componentRef, chartRef] = useSyncRef<any>(ref);\n  const preventOnClickCall = useRef(false);\n  const onItemLegendClick = useLegendItemClick(onLegendClick);\n  const onClickInternal = useCallback(\n    (payload, event) => {\n      if (typeof onClick === 'function' && !preventOnClickCall.current) {\n        onClick(\n          enrichEventWithDetails(event, {\n            payload: payload?.activePayload?.[0]?.payload,\n            activePayloads: payload?.activePayload\n          })\n        );\n      }\n      if (preventOnClickCall.current) {\n        preventOnClickCall.current = false;\n      }\n    },\n    [onClick, preventOnClickCall.current]\n  );\n\n  const onDataPointClickInternal = useCallback(\n    (payload, eventOrIndex, event) => {\n      if (payload && onDataPointClick) {\n        onDataPointClick(\n          enrichEventWithDetails(event, {\n            value: payload.node,\n            dataKey: payload.zAxis.dataKey,\n            dataIndex: eventOrIndex,\n            payload: payload.payload\n          })\n        );\n        preventOnClickCall.current = true;\n      }\n    },\n    [onDataPointClick, preventOnClickCall.current]\n  );\n  const isBigDataSet = dataset?.length > 30 ?? false;\n\n  const xMeasure = measures.find(({ axis }) => axis === 'x');\n  const yMeasure = measures.find(({ axis }) => axis === 'y');\n  const zMeasure = measures.find(({ axis }) => axis === 'z');\n\n  const [yAxisWidth, legendPosition] = useLongestYAxisLabel(dataset?.[0]?.data, [yMeasure], chartConfig.legendPosition);\n  const xAxisHeights = useObserveXAxisHeights(chartRef, 1);\n  const marginChart = useChartMargin(chartConfig.margin, chartConfig.zoomingTool);\n  const { chartConfig: _0, measures: _1, ...propsWithoutOmitted } = rest;\n  const isRTL = useIsRTL(chartRef);\n\n  return (\n    <ChartContainer\n      dataset={dataset}\n      loading={loading}\n      Placeholder={ChartPlaceholder ?? ScatterChartPlaceholder}\n      ref={componentRef}\n      style={style}\n      className={className}\n      slot={slot}\n      resizeDebounce={chartConfig.resizeDebounce}\n      {...propsWithoutOmitted}\n    >\n      <ScatterChartLib\n        onClick={onClickInternal}\n        margin={marginChart}\n        className={typeof onDataPointClick === 'function' ? 'has-click-handler' : undefined}\n      >\n        <CartesianGrid\n          vertical={chartConfig.gridVertical}\n          horizontal={chartConfig.gridHorizontal}\n          stroke={chartConfig.gridStroke}\n        />\n        {chartConfig.xAxisVisible && (\n          <XAxis\n            type={'number'}\n            key={xMeasure?.accessor}\n            name={xMeasure?.label}\n            dataKey={xMeasure?.accessor}\n            xAxisId={0}\n            interval={xMeasure?.interval ?? (isBigDataSet ? 'preserveStart' : 0)}\n            tick={<XAxisTicks config={xMeasure} />}\n            padding={xAxisPadding}\n            height={xAxisHeights[0]}\n            reversed={isRTL}\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            label={xMeasure?.label ? { value: xMeasure?.label, dy: 15, position: 'insideRight' } : 0}\n          />\n        )}\n        <YAxis\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          label={\n            yMeasure?.label\n              ? { value: yMeasure?.label, angle: -90, position: isRTL ? 'insideRight' : 'insideLeft' }\n              : false\n          }\n          type={'number'}\n          name={yMeasure?.label}\n          axisLine={chartConfig.yAxisVisible}\n          tickLine={tickLineConfig}\n          key={yMeasure?.accessor}\n          dataKey={yMeasure?.accessor}\n          tickFormatter={yMeasure?.formatter}\n          interval={0}\n          tick={<YAxisTicks config={yMeasure} />}\n          width={yMeasure?.label ? yAxisWidth + 10 : yAxisWidth}\n          margin={yMeasure?.label ? { left: 200 } : 0}\n          orientation={isRTL === true ? 'right' : 'left'}\n        />\n        <ZAxis name={zMeasure?.label} dataKey={zMeasure?.accessor} range={[0, 5000]} key={zMeasure?.accessor} />\n        {dataset?.map((dataSet, index) => {\n          return (\n            <Scatter\n              className={typeof onDataPointClick === 'function' ? 'has-click-handler' : undefined}\n              // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              // @ts-ignore\n              onMouseDown={onDataPointClickInternal}\n              opacity={dataSet.opacity}\n              data={dataSet?.data}\n              name={dataSet?.label}\n              key={dataSet?.label}\n              fill={dataSet?.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n              isAnimationActive={noAnimation === false}\n            />\n          );\n        })}\n        {!noLegend && (\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          <Legend\n            verticalAlign={chartConfig.legendPosition}\n            align={chartConfig.legendHorizontalAlign}\n            onClick={onItemLegendClick}\n            wrapperStyle={legendPosition}\n          />\n        )}\n        {referenceLine && (\n          <ReferenceLine\n            {...referenceLine}\n            stroke={referenceLine?.color ?? referenceLine?.stroke}\n            y={referenceLine?.value ?? referenceLine?.y}\n            label={referenceLine?.label}\n          />\n        )}\n        {referenceLineX && (\n          <ReferenceLine\n            {...referenceLineX}\n            stroke={referenceLineX?.color ?? referenceLineX?.stroke}\n            x={referenceLineX?.value ?? referenceLineX?.x}\n            label={referenceLineX?.label}\n          />\n        )}\n        {/*ToDo: remove conditional rendering once `active` is working again (https://github.com/recharts/recharts/issues/2703)*/}\n        {tooltipConfig?.active !== false && (\n          <Tooltip\n            cursor={tooltipFillOpacity}\n            formatter={tooltipValueFormatter}\n            contentStyle={tooltipContentStyle}\n            {...tooltipConfig}\n          />\n        )}\n        {children}\n      </ScatterChartLib>\n    </ChartContainer>\n  );\n});\n\nScatterChart.defaultProps = {\n  noLegend: false,\n  noAnimation: false\n};\n\nScatterChart.displayName = 'ScatterChart';\n\nexport { ScatterChart };\n"],"names":["ScatterChart","generateCategoricalChart","Scatter","XAxis","YAxis","ZAxis","formatAxisMap","ScatterChartPlaceholder","props","jsxs","ContentLoader","ThemingParameters","jsx","measureDefaults","defaultFormatter","forwardRef","ref","dataset","loading","noLegend","noAnimation","tooltipConfig","onDataPointClick","onLegendClick","onClick","style","className","slot","ChartPlaceholder","children","rest","chartConfig","referenceLine","referenceLineX","measures","usePrepareDimensionsAndMeasures","tooltipValueFormatter","useTooltipFormatter","componentRef","chartRef","useSyncRef","preventOnClickCall","useRef","onItemLegendClick","useLegendItemClick","onClickInternal","useCallback","payload","event","enrichEventWithDetails","_b","_a","onDataPointClickInternal","eventOrIndex","isBigDataSet","xMeasure","axis","yMeasure","zMeasure","yAxisWidth","legendPosition","useLongestYAxisLabel","xAxisHeights","useObserveXAxisHeights","marginChart","useChartMargin","_0","_1","propsWithoutOmitted","isRTL","useIsRTL","ChartContainer","ScatterChartLib","CartesianGrid","XAxisTicks","xAxisPadding","tickLineConfig","YAxisTicks","dataSet","index","Legend","ReferenceLine","Tooltip","tooltipFillOpacity","tooltipContentStyle"],"mappings":"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","x_google_ignoreList":[0]}