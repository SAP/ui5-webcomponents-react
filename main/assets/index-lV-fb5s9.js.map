{"version":3,"mappings":"0KAyJA,MAAAA,EAAAC,EAAmB,kBACjB,CACA,iBACE,oBACA,OACA,cACA,QACA,aACA,gBACA,UACA,UACA,sBACA,uBACA,EACF,qDACsD,sBAClC,mBACF,IAAAC,EAAA,gNAEpB,EAEAF,EAAA,yBAEAA,EAAA,cAA0B,WAAAG,EAAA,IAE1B","names":["DatePicker","withWebComponent","__vitePreload","ValueState"],"sources":["../../packages/main/src/webComponents/DatePicker/index.tsx"],"sourcesContent":["'use client';\n\nimport '@ui5/webcomponents/dist/DatePicker.js';\nimport type { DatePickerChangeEventDetail, DatePickerInputEventDetail } from '@ui5/webcomponents/dist/DatePicker.js';\nimport type { CalendarType } from '../../enums/index.js';\nimport { ValueState } from '../../enums/index.js';\nimport type { Ui5CustomEvent, CommonProps, Ui5DomRef } from '../../interfaces/index.js';\nimport { withWebComponent } from '../../internal/withWebComponent.js';\nimport type { UI5WCSlotsNode } from '../../types/index.js';\n\ninterface DatePickerAttributes {\n  /**\n   * Defines the aria-label attribute for the component.\n   */\n  accessibleName?: string;\n  /**\n   * Receives id(or many ids) of the elements that label the component.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Determines whether the component is displayed as disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Defines the visibility of the week numbers column.\n   *\n   * **Note:** For calendars other than Gregorian, the week numbers are not displayed regardless of what is set.\n   */\n  hideWeekNumbers?: boolean;\n  /**\n   * Determines the name with which the component will be submitted in an HTML form.\n   *\n   * **Important:** For the `name` property to have effect, you must add the following import to your project: `import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n   *\n   * **Note:** When set, a native `input` HTML element will be created inside the component so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit a form.\n   */\n  name?: string;\n  /**\n   * Defines a short hint, intended to aid the user with data entry when the component has no value.\n   *\n   * **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.\n   */\n  placeholder?: string;\n  /**\n   * Determines whether the component is displayed as read-only.\n   */\n  readonly?: boolean;\n  /**\n   * Defines whether the component is required.\n   */\n  required?: boolean;\n  /**\n   * Defines a formatted date value.\n   */\n  value?: string;\n  /**\n   * Defines the value state of the component.\n   */\n  valueState?: ValueState | keyof typeof ValueState;\n  /**\n   * Determines the format, displayed in the input field.\n   */\n  formatPattern?: string;\n  /**\n   * Determines the maximum date available for selection. **Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).\n   */\n  maxDate?: string;\n  /**\n   * Determines the minimum date available for selection. **Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).\n   */\n  minDate?: string;\n  /**\n   * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.<br/>__Note:__ Calendar types other than Gregorian must be imported manually:<br />`import \"@ui5/webcomponents-localization/dist/features/calendar/{primaryCalendarType}.js\";`\n   */\n  primaryCalendarType?: CalendarType | keyof typeof CalendarType;\n  /**\n   * Defines the secondary calendar type. If not set, the calendar will only show the primary calendar type.\n   */\n  secondaryCalendarType?: CalendarType | keyof typeof CalendarType;\n}\n\nexport interface DatePickerDomRef extends DatePickerAttributes, Ui5DomRef {\n  /**\n   * Currently selected date represented as a Local JavaScript Date instance.\n   */\n  readonly dateValue: Date;\n  /**\n   * Closes the picker.\n   */\n  closePicker: () => void;\n  /**\n   * Formats a Java Script date object into a string representing a locale date according to the `formatPattern` property of the DatePicker instance\n   * @param {Date} date - A Java Script date object to be formatted as string\n   * @returns {string} The date as string\n   */\n  formatValue: (date: Date) => string;\n  /**\n   * Checks if a date is between the minimum and maximum date.\n   * @param {string} [value] - A value to be checked\n   * @returns {boolean}\n   */\n  isInValidRange: (value?: string) => boolean;\n  /**\n   * Checks if the picker is open.\n   * @returns {boolean} true if the picker is open, false otherwise\n   */\n  isOpen: () => boolean;\n  /**\n   * Checks if a value is valid against the current date format of the DatePicker.\n   * @param {string} [value] - A value to be tested against the current date format\n   * @returns {boolean}\n   */\n  isValid: (value?: string) => boolean;\n  /**\n   * Opens the picker.\n   * @returns {Promise<void>} Resolves when the picker is open\n   */\n  openPicker: () => Promise<void>;\n}\n\nexport interface DatePickerPropTypes extends DatePickerAttributes, Omit<CommonProps, 'onChange' | 'onInput'> {\n  /**\n   * Defines the value state message that will be displayed as pop up under the component.\n   *\n   * **Note:** If not specified, a default text (in the respective language) will be displayed.\n   * **Note:** The `valueStateMessage` would be displayed, when the component is in `Information`, `Warning` or `Error` value state.\n   *\n   * __Note:__ The content of the prop will be rendered into a [&lt;slot&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot) by assigning the respective [slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot) attribute (`slot=\"valueStateMessage\"`).\n   * Since you can't change the DOM order of slots when declaring them within a prop, it might prove beneficial to manually mount them as part of the component's children, especially when facing problems with the reading order of screen readers.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-handling-slots--docs).\n   */\n  valueStateMessage?: UI5WCSlotsNode;\n  /**\n   * Fired when the input operation has finished by pressing Enter or on focusout.\n   *\n   *__Note:__ This event is NOT the same as the native `onChange` [event of React](https://reactjs.org/docs/dom-elements.html#onchange). If you want to simulate that behavior, please use `onInput` instead.\n   */\n  onChange?: (event: Ui5CustomEvent<DatePickerDomRef, DatePickerChangeEventDetail>) => void;\n  /**\n   * Fired when the value of the component is changed at each key stroke.\n   */\n  onInput?: (event: Ui5CustomEvent<DatePickerDomRef, DatePickerInputEventDetail>) => void;\n}\n\n/**\n * The `DatePicker` component provides an input field with assigned calendar which opens on user action. The `DatePicker` allows users to select a localized date using touch, mouse, or keyboard input. It consists of two parts: the date input field and the date picker.\n *\n * __Note:__ This component is a web component developed by the UI5 Web Componentsâ€™ team.\n *\n * [UI5 Web Components Storybook](https://sap.github.io/ui5-webcomponents/playground/?path=/docs/main-DatePicker)\n */\nconst DatePicker = withWebComponent<DatePickerPropTypes, DatePickerDomRef>(\n  'ui5-date-picker',\n  [\n    'accessibleName',\n    'accessibleNameRef',\n    'name',\n    'placeholder',\n    'value',\n    'valueState',\n    'formatPattern',\n    'maxDate',\n    'minDate',\n    'primaryCalendarType',\n    'secondaryCalendarType'\n  ],\n  ['disabled', 'hideWeekNumbers', 'readonly', 'required'],\n  ['valueStateMessage'],\n  ['change', 'input'],\n  () => import('@ui5/webcomponents/dist/DatePicker.js')\n);\n\nDatePicker.displayName = 'DatePicker';\n\nDatePicker.defaultProps = {\n  valueState: ValueState.None\n};\n\nexport { DatePicker };\n"],"file":"assets/index-lV-fb5s9.js"}