{"version":3,"file":"MessageView.stories-b7915497.js","sources":["../../packages/main/src/internal/MessageViewContext.ts","../../packages/main/src/components/MessageView/utils.ts","../../packages/main/src/components/MessageView/index.tsx","../../packages/main/src/components/MessageView/MessageItem.tsx","../../.storybook/mockData/generateMessageItems.tsx"],"sourcesContent":["import { createContext } from 'react';\n\nexport const MessageViewContext = createContext({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  selectMessage: (_message: any) => {}\n});\n","import iconAlert from '@ui5/webcomponents-icons/dist/alert.js';\nimport iconError from '@ui5/webcomponents-icons/dist/error.js';\nimport iconInformation from '@ui5/webcomponents-icons/dist/information.js';\nimport iconSysEnter from '@ui5/webcomponents-icons/dist/sys-enter-2.js';\nimport { ValueState } from '../../enums/index.js';\n\nexport const getIconNameForType = (type: ValueState | keyof typeof ValueState): string => {\n  switch (type) {\n    case ValueState.Error:\n    case 'Error':\n      return iconError;\n    case ValueState.Success:\n    case 'Success':\n      return iconSysEnter;\n    case ValueState.Warning:\n    case 'Warning':\n      return iconAlert;\n    default:\n      return iconInformation;\n  }\n};\n","'use client';\n\nimport iconSlimArrowLeft from '@ui5/webcomponents-icons/dist/slim-arrow-left.js';\nimport { ThemingParameters, useI18nBundle, useSyncRef } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport type { ReactElement, ReactNode } from 'react';\nimport React, { Children, forwardRef, Fragment, isValidElement, useCallback, useEffect, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { ButtonDesign, FlexBoxDirection, TitleLevel, ValueState } from '../../enums/index.js';\nimport { ALL, LIST_NO_DATA } from '../../i18n/i18n-defaults.js';\nimport type { CommonProps } from '../../interfaces/index.js';\nimport { MessageViewContext } from '../../internal/MessageViewContext.js';\nimport { Bar } from '../../webComponents/Bar/index.js';\nimport { Button } from '../../webComponents/Button/index.js';\nimport { GroupHeaderListItem } from '../../webComponents/GroupHeaderListItem/index.js';\nimport { Icon } from '../../webComponents/Icon/index.js';\nimport { List } from '../../webComponents/List/index.js';\nimport type { ListPropTypes } from '../../webComponents/List/index.js';\nimport { SegmentedButton } from '../../webComponents/SegmentedButton/index.js';\nimport { SegmentedButtonItem } from '../../webComponents/SegmentedButtonItem/index.js';\nimport { Title } from '../../webComponents/Title/index.js';\nimport { FlexBox } from '../FlexBox/index.js';\nimport type { MessageItemPropTypes } from './MessageItem.js';\nimport { getIconNameForType } from './utils.js';\n\nexport interface MessageViewDomRef extends HTMLDivElement {\n  /**\n   * Navigates back to the list page\n   */\n  navigateBack: () => void;\n}\n\nexport interface MessageViewPropTypes extends CommonProps {\n  /**\n   * Defines whether the messages are grouped or not.\n   */\n  groupItems?: boolean;\n\n  /**\n   * Defines whether the header of the details page will be shown.\n   */\n  showDetailsPageHeader?: boolean;\n\n  /**\n   * A list with message items. If only one item is provided, the initial page will be the details page for the item.\n   *\n   * * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `Message` in order to preserve the intended design.\n   */\n  children: ReactNode | ReactNode[];\n\n  /**\n   * Event is fired when the details of a message are shown.\n   */\n  onItemSelect?: ListPropTypes['onItemClick'];\n}\n\nexport const resolveMessageTypes = (children: ReactElement<MessageItemPropTypes>[]) => {\n  return (children ?? [])\n    .map((message) => message?.props?.type)\n    .reduce(\n      (acc, type) => {\n        const finalType = type === ValueState.None ? ValueState.Information : type;\n        if (acc.hasOwnProperty(finalType)) {\n          acc[finalType]++;\n        }\n        return acc;\n      },\n      {\n        [ValueState.Error]: 0,\n        [ValueState.Warning]: 0,\n        [ValueState.Success]: 0,\n        [ValueState.Information]: 0\n      }\n    );\n};\n\nexport const resolveMessageGroups = (children: ReactElement<MessageItemPropTypes>[]) => {\n  const groups = (children ?? []).reduce((acc, val) => {\n    const groupName = val?.props?.groupName ?? '';\n    if (acc.hasOwnProperty(groupName)) {\n      acc[groupName].push(val);\n    } else {\n      acc[groupName] = [val];\n    }\n    return acc;\n  }, {});\n\n  return Object.entries<ReactElement<MessageItemPropTypes>[]>(groups).sort((a, b) => {\n    return a[0].localeCompare(b[0]);\n  });\n};\n\nconst useStyles = createUseStyles(\n  {\n    container: {\n      width: '100%',\n      overflowX: 'hidden',\n      overflowY: 'auto',\n      display: 'flex',\n      height: '100%',\n      '& > *': {\n        width: '100%',\n        flexShrink: 0,\n        transition: 'transform 200ms ease-in-out'\n      }\n    },\n    showDetails: {\n      '& > *': {\n        transform: 'translateX(-100%)'\n      }\n    },\n    button: {\n      '&[data-key=\"Error\"]:not([pressed])': { color: ThemingParameters.sapNegativeElementColor },\n      '&[data-key=\"Warning\"]:not([pressed])': { color: ThemingParameters.sapCriticalElementColor },\n      '&[data-key=\"Success\"]:not([pressed])': { color: ThemingParameters.sapPositiveElementColor },\n      '&[data-key=\"Information\"]:not([pressed])': { color: ThemingParameters.sapNeutralElementColor }\n    },\n    detailsContainer: {\n      padding: '1rem'\n    },\n    detailsIcon: {\n      flexShrink: 0,\n      margin: '0 1rem 0 0.5rem',\n      '&[data-type=\"Error\"]': { color: ThemingParameters.sapNegativeElementColor },\n      '&[data-type=\"Warning\"]': { color: ThemingParameters.sapCriticalElementColor },\n      '&[data-type=\"Success\"]': { color: ThemingParameters.sapPositiveElementColor },\n      '&[data-type=\"Information\"],&[data-type=\"None\"]': { color: ThemingParameters.sapNeutralElementColor }\n    },\n    detailsTitle: {\n      marginBottom: '1rem'\n    },\n    detailsText: {\n      fontFamily: ThemingParameters.sapFontFamily,\n      fontSize: ThemingParameters.sapFontSize,\n      lineHeight: 1.4,\n      color: ThemingParameters.sapTextColor,\n      marginBottom: '1rem'\n    }\n  },\n  { name: 'MessageView' }\n);\n\n/**\n * The `MessageView` is used to display a summarized list of different types of messages (error, warning, success, and information messages).\n */\nconst MessageView = forwardRef<MessageViewDomRef, MessageViewPropTypes>((props, ref) => {\n  const { children, groupItems, showDetailsPageHeader, className, onItemSelect, ...rest } = props;\n\n  const [componentRef, internalRef] = useSyncRef<MessageViewDomRef>(ref);\n\n  const classes = useStyles();\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n\n  const [listFilter, setListFilter] = useState<ValueState | 'All'>('All');\n  const [selectedMessage, setSelectedMessage] = useState<MessageItemPropTypes>(null);\n\n  const childrenArray = Children.toArray(children);\n  const messageTypes = resolveMessageTypes(childrenArray as ReactElement<MessageItemPropTypes>[]);\n  const filledTypes = Object.values(messageTypes).filter((count) => count > 0).length;\n\n  const filteredChildren =\n    listFilter === 'All'\n      ? childrenArray\n      : childrenArray.filter((message) => {\n          if (!isValidElement(message)) {\n            return false;\n          }\n          if (listFilter === ValueState.Information) {\n            return message?.props?.type === ValueState.Information || message?.props?.type === ValueState.None;\n          }\n          return message?.props?.type === listFilter;\n        });\n\n  const groupedMessages = resolveMessageGroups(filteredChildren as ReactElement<MessageItemPropTypes>[]);\n\n  const navigateBack = useCallback(() => {\n    setSelectedMessage(null);\n  }, [setSelectedMessage]);\n\n  useEffect(() => {\n    if (internalRef.current) {\n      internalRef.current.navigateBack = navigateBack;\n    }\n  }, [internalRef.current, navigateBack]);\n\n  const handleListFilterChange = (e) => {\n    setListFilter(e.detail.selectedItem.dataset.key);\n  };\n\n  const outerClasses = clsx(classes.container, className, selectedMessage && classes.showDetails);\n\n  return (\n    <div ref={componentRef} {...rest} className={outerClasses}>\n      <MessageViewContext.Provider\n        value={{\n          selectMessage: setSelectedMessage\n        }}\n      >\n        <div>\n          {filledTypes > 1 && (\n            <Bar\n              startContent={\n                <SegmentedButton onSelectionChange={handleListFilterChange}>\n                  <SegmentedButtonItem data-key=\"All\" pressed={listFilter === 'All'}>\n                    {i18nBundle.getText(ALL)}\n                  </SegmentedButtonItem>\n                  {/* @ts-expect-error: The key can't be typed, it's always `string`, but since the `ValueState` enum only contains strings it's fine to use here*/}\n                  {Object.entries(messageTypes).map(([valueState, count]: [ValueState, number]) => {\n                    if (count === 0) {\n                      return null;\n                    }\n                    return (\n                      <SegmentedButtonItem\n                        key={valueState}\n                        data-key={valueState}\n                        pressed={listFilter === valueState}\n                        icon={getIconNameForType(valueState)}\n                        className={classes.button}\n                      >\n                        {count}\n                      </SegmentedButtonItem>\n                    );\n                  })}\n                </SegmentedButton>\n              }\n            />\n          )}\n          <List onItemClick={onItemSelect} noDataText={i18nBundle.getText(LIST_NO_DATA)}>\n            {groupItems\n              ? groupedMessages.map(([groupName, items]) => {\n                  return (\n                    <Fragment key={groupName}>\n                      {groupName && <GroupHeaderListItem>{groupName}</GroupHeaderListItem>}\n                      {items}\n                    </Fragment>\n                  );\n                })\n              : filteredChildren}\n          </List>\n        </div>\n        <div>\n          {childrenArray.length > 0 ? (\n            <>\n              {showDetailsPageHeader && (\n                <Bar\n                  startContent={\n                    <Button design={ButtonDesign.Transparent} icon={iconSlimArrowLeft} onClick={navigateBack} />\n                  }\n                />\n              )}\n              {selectedMessage && (\n                <FlexBox className={classes.detailsContainer}>\n                  <Icon\n                    data-type={selectedMessage.type}\n                    name={getIconNameForType(selectedMessage.type)}\n                    className={classes.detailsIcon}\n                  />\n                  <FlexBox direction={FlexBoxDirection.Column}>\n                    <Title level={TitleLevel.H5} className={classes.detailsTitle}>\n                      {selectedMessage.titleText}\n                    </Title>\n                    <div className={classes.detailsText}>{selectedMessage.children}</div>\n                  </FlexBox>\n                </FlexBox>\n              )}\n            </>\n          ) : null}\n        </div>\n      </MessageViewContext.Provider>\n    </div>\n  );\n});\n\nMessageView.displayName = 'MessageView';\n\nexport { MessageView };\n","'use client';\n\nimport iconArrowRight from '@ui5/webcomponents-icons/dist/slim-arrow-right.js';\nimport { CssSizeVariables, ThemingParameters } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport type { ReactNode } from 'react';\nimport React, { forwardRef, useContext } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FlexBoxAlignItems, FlexBoxDirection, ListItemType, ValueState } from '../../enums/index.js';\nimport type { CommonProps } from '../../interfaces/index.js';\nimport { MessageViewContext } from '../../internal/MessageViewContext.js';\nimport type { CustomListItemDomRef } from '../../webComponents/CustomListItem/index.js';\nimport { CustomListItem } from '../../webComponents/CustomListItem/index.js';\nimport { Icon } from '../../webComponents/Icon/index.js';\nimport { Label } from '../../webComponents/Label/index.js';\nimport { FlexBox } from '../FlexBox/index.js';\nimport { getIconNameForType } from './utils.js';\n\nexport interface MessageItemPropTypes extends CommonProps {\n  /**\n   * Specifies the title of the message\n   *\n   * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use text or `Link` in order to preserve the intended design.\n   */\n  titleText: ReactNode;\n\n  /**\n   * Specifies the subtitle of the message\n   *\n   * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n   */\n  subtitleText?: ReactNode;\n\n  /**\n   * Defines the number of messages for a given message type.\n   */\n  counter?: number;\n\n  /**\n   * Specifies the type of the message\n   */\n  type?: ValueState | keyof typeof ValueState;\n\n  /**\n   * Name of a message group the current item belongs to.\n   */\n  groupName?: string;\n\n  /**\n   * Specifies detailed description of the message\n   */\n  children?: ReactNode | ReactNode[];\n}\n\nconst useStyles = createUseStyles(\n  {\n    listItem: {\n      height: CssSizeVariables.ui5WcrMessageViewListItemHeightSingle\n    },\n    message: {\n      padding: '0.25rem 0',\n      width: '100%',\n      maxWidth: '100%',\n      overflow: 'hidden',\n      paddingRight: '1rem',\n      boxSizing: 'border-box'\n    },\n    withSubtitle: {\n      height: CssSizeVariables.ui5WcrMessageViewListItemHeightByLine\n    },\n    withChildren: {\n      paddingRight: '0rem'\n    },\n    iconContainer: {\n      width: '3rem',\n      minWidth: '3rem',\n      height: '2.25rem',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    icon: {\n      width: '1rem',\n      height: '1rem'\n    },\n    title: {\n      fontFamily: ThemingParameters.sapFontHeaderFamily,\n      fontSize: ThemingParameters.sapFontHeader6Size,\n      color: ThemingParameters.sapGroup_TitleTextColor,\n      maxWidth: '100%',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      flex: '1 1 auto',\n      '& + $subtitle': {\n        marginTop: '0.25rem',\n        cursor: 'inherit'\n      }\n    },\n    subtitle: {},\n    counter: {\n      color: ThemingParameters.sapContent_MarkerTextColor,\n      fontFamily: ThemingParameters.sapFontFamily,\n      fontSize: ThemingParameters.sapFontSize,\n      paddingLeft: '1rem',\n      flex: 'none'\n    },\n    navigation: {\n      height: '0.875rem',\n      width: '0.875rem',\n      padding: '0 0.9375rem',\n      flexShrink: 0\n    },\n    typeError: {\n      '& $icon': {\n        color: ThemingParameters.sapNegativeElementColor\n      }\n    },\n    typeSuccess: {\n      '& $icon': {\n        color: ThemingParameters.sapPositiveElementColor\n      }\n    },\n    typeWarning: {\n      ' & $icon': {\n        color: ThemingParameters.sapCriticalElementColor\n      }\n    },\n    typeInformation: {\n      '& $icon': {\n        // color: ThemingParameters.sapInformativeElementColor\n        color: ThemingParameters.sapNeutralElementColor\n      }\n    },\n    typeNone: {\n      '& $icon': {\n        color: ThemingParameters.sapNeutralElementColor\n      }\n    }\n  },\n  { name: 'MessageItem' }\n);\n/**\n * A component used to hold different types of system messages inside the `MessageView` component.\n */\nconst MessageItem = forwardRef<CustomListItemDomRef, MessageItemPropTypes>((props, ref) => {\n  const { titleText, subtitleText, counter, type = ValueState.Error, children, className, ...rest } = props;\n\n  const { selectMessage } = useContext(MessageViewContext);\n\n  const classes = useStyles();\n\n  const listItemClasses = clsx(\n    classes.listItem,\n    Reflect.get(classes, `type${type}`),\n    className,\n    subtitleText && classes.withSubtitle\n  );\n\n  const messageClasses = clsx(classes.message, children && classes.withChildren);\n\n  const handleListItemClick = (e) => {\n    if (children) {\n      selectMessage(props);\n      if (typeof rest.onClick === 'function') {\n        rest.onClick(e);\n      }\n    }\n  };\n  return (\n    <CustomListItem\n      onClick={handleListItemClick}\n      data-title={titleText}\n      data-type={type}\n      type={children ? ListItemType.Active : ListItemType.Inactive}\n      {...rest}\n      className={listItemClasses}\n      ref={ref}\n    >\n      <FlexBox alignItems={FlexBoxAlignItems.Center} className={messageClasses}>\n        <div className={classes.iconContainer}>\n          <Icon name={getIconNameForType(type as ValueState)} className={classes.icon} />\n        </div>\n        <FlexBox\n          direction={FlexBoxDirection.Column}\n          style={{ flex: 'auto', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}\n        >\n          {titleText && <span className={classes.title}>{titleText}</span>}\n          {subtitleText && <Label className={classes.subtitle}>{subtitleText}</Label>}\n        </FlexBox>\n        {counter != null && <span className={classes.counter}>{counter}</span>}\n        {children && <Icon className={classes.navigation} name={iconArrowRight} />}\n      </FlexBox>\n    </CustomListItem>\n  );\n});\n\nMessageItem.displayName = 'MessageItem';\n\nexport { MessageItem };\n","import { MessageItem, Text, ValueState } from '@ui5/webcomponents-react';\n\nconst LoremIpsum = (\n  <Text>\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore\n    magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd\n    gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n  </Text>\n);\n\nconst informationMessageItems = (count) => {\n  if (!count) {\n    return [];\n  }\n  return new Array(count).fill('').map((_, index) => (\n    <MessageItem titleText={<Text>Information Message</Text>} type={ValueState.Information} groupName={`Group${index}`}>\n      {LoremIpsum}\n    </MessageItem>\n  ));\n};\n\nconst successMessageItems = (count) => {\n  if (!count) {\n    return [];\n  }\n  return new Array(count).fill('').map((_, index) => (\n    <MessageItem titleText={<Text>Success Message</Text>} type={ValueState.Success} groupName={`Group${index}`}>\n      {LoremIpsum}\n    </MessageItem>\n  ));\n};\n\nconst warningMessageItems = (count) => {\n  if (!count) {\n    return [];\n  }\n  return new Array(count).fill('').map((_, index) => (\n    <MessageItem titleText={<Text>Warning Message</Text>} type={ValueState.Warning} groupName={`Group${index}`}>\n      {LoremIpsum}\n    </MessageItem>\n  ));\n};\n\nconst errorMessageItems = (count) => {\n  if (!count) {\n    return [];\n  }\n  return new Array(count).fill('').map((_, index) => (\n    <MessageItem titleText={<Text>Error Message</Text>} type={ValueState.Error} groupName={`Group${index}`}>\n      {LoremIpsum}\n    </MessageItem>\n  ));\n};\n\nexport const generateMessageItems = (numberOfMessageTypes) => [\n  ...informationMessageItems(numberOfMessageTypes.information),\n  ...warningMessageItems(numberOfMessageTypes.warning),\n  ...successMessageItems(numberOfMessageTypes.success),\n  ...errorMessageItems(numberOfMessageTypes.error)\n];\n"],"names":["MessageViewContext","createContext","_message","getIconNameForType","type","ValueState","iconError","iconSysEnter","iconAlert","iconInformation","resolveMessageTypes","children","message","_a","acc","finalType","resolveMessageGroups","groups","val","groupName","a","b","useStyles","createUseStyles","ThemingParameters","MessageView","forwardRef","props","ref","groupItems","showDetailsPageHeader","className","onItemSelect","rest","componentRef","internalRef","useSyncRef","classes","i18nBundle","useI18nBundle","listFilter","setListFilter","useState","selectedMessage","setSelectedMessage","childrenArray","Children","messageTypes","filledTypes","count","filteredChildren","isValidElement","_b","_c","groupedMessages","navigateBack","useCallback","useEffect","handleListFilterChange","e","outerClasses","clsx","jsx","jsxs","Bar","SegmentedButton","SegmentedButtonItem","ALL","valueState","List","LIST_NO_DATA","items","Fragment2","GroupHeaderListItem","Fragment","Button","ButtonDesign","iconSlimArrowLeft","FlexBox","Icon","FlexBoxDirection","Title","TitleLevel","CssSizeVariables","MessageItem","titleText","subtitleText","counter","selectMessage","useContext","listItemClasses","messageClasses","handleListItemClick","CustomListItem","ListItemType","FlexBoxAlignItems","Label","iconArrowRight","LoremIpsum","Text","informationMessageItems","_","index","successMessageItems","warningMessageItems","errorMessageItems","generateMessageItems","numberOfMessageTypes"],"mappings":"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"}