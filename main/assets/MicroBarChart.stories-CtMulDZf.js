import{j as o}from"./ManagedStyles-CGOl3myG.js";import{T as w}from"./ThemingParameters--AGRs54p.js";import{e as K}from"./index-CBpU8qq5.js";import{c as U}from"./clsx-B-dksMZM.js";import{r as l}from"./index-Dl6G-zuu.js";import{a as v,C as p}from"./defaults-DNC5E1au.js";import{C as W}from"./ChartContainer-Yh0o-jym.js";import{B as H}from"./Placeholder-BTKcGZZv.js";import{u as $}from"./useStylesheet-CxAEQokk.js";import"./_baseForOwn-DFjKyXZi.js";import"./isString-B_cEKuVX.js";import"./tiny-invariant-CCoILDQG.js";import"./_baseUniq-DRxb5hvO.js";import"./index-BqjUyJKr.js";import"./i18n-defaults-z_6XcBmn.js";import"./i18nBundle-Bsmczzvl.js";import"./Boot-Cnne3s27.js";import"./EventProvider-B3ZIXKWe.js";import"./I18nContext-BcGksm2n.js";import"./useIsomorphicLayoutEffect-gsbYElqV.js";import"./throttle-ClB5v_5B.js";import"./index-CUBmm0UP.js";import"./iframe-C9JebiH0.js";import"../sb-preview/runtime.js";import"./Label-DppxBELH.js";import"./UI5Element-tLl76uRl.js";import"./CustomElementsScopeUtils-B75AoQkl.js";import"./withWebComponent-DJIp_RUs.js";import"./utils-CeXI0Hi-.js";import"./WrappingType-CW8URInd.js";import"./i18n-defaults-BS_6etQn.js";import"./parameters-bundle.css-DjgCrOcY.js";import"./react-content-loader.es-CRTrDzHi.js";const Y={packageName:"@ui5/webcomponents-react-charts",fileName:"MicroBarChart.module.css",content:".MicroBarChart_container_ambbl_1{display:flex;flex-direction:column;font-family:var(--sapFontFamily);font-weight:400;height:100%;justify-content:space-around;overflow:hidden;width:100%}.MicroBarChart_barContainer_ambbl_12{cursor:auto}.MicroBarChart_barContainerActive_ambbl_16{cursor:pointer}.MicroBarChart_barContainerActive_ambbl_16:active{opacity:.3!important}.MicroBarChart_labelContainer_ambbl_24{display:flex;justify-content:space-between}.MicroBarChart_valueContainer_ambbl_29{background-color:var(--sapContent_Placeholderloading_Background);display:flex}.MicroBarChart_valueBar_ambbl_34{height:100%}.MicroBarChart_label_ambbl_24{color:var(--sapContent_LabelColor);display:block;font-size:var(--sapFontSmallSize);max-width:70%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.MicroBarChart_text_ambbl_48{box-sizing:border-box;color:var(--sapTextColor);display:inline-block;font-size:var(--sapFontSmallSize);overflow:hidden;padding-inline-start:6px;text-align:right;text-overflow:ellipsis;white-space:nowrap}"},n={container:"MicroBarChart_container_ambbl_1",barContainer:"MicroBarChart_barContainer_ambbl_12",barContainerActive:"MicroBarChart_barContainerActive_ambbl_16",labelContainer:"MicroBarChart_labelContainer_ambbl_24",valueContainer:"MicroBarChart_valueContainer_ambbl_29",valueBar:"MicroBarChart_valueBar_ambbl_34",label:"MicroBarChart_label_ambbl_24",text:"MicroBarChart_text_ambbl_48"},J=(a,c=null)=>c?w[c]??c:w[`sapChart_Sequence_${a%11+1}`],s=l.forwardRef((a,c)=>{const{loading:P,dataset:t,onDataPointClick:d,style:N,className:I,slot:A,ChartPlaceholder:T,...L}=a;$(Y,s.displayName);const g=l.useMemo(()=>({formatter:v,...a.dimension}),[a.dimension]),e=l.useMemo(()=>({formatter:v,...a.measure}),[a.measure]),z=l.useMemo(()=>{if(t){const r=Math.max(...t==null?void 0:t.map(i=>p.getValueByDataKey(i,e.accessor)));return a.maxValue??r}return 0},[t,e,a.maxValue]),E=e!=null&&e.width?`${e.width}px`:"4px",F=l.useCallback((r,i)=>h=>{typeof d=="function"&&d(K(h,{dataKey:e.accessor,value:p.getValueByDataKey(r,e.accessor),payload:r,dataIndex:i}))},[e.accessor,d]),O=U(n.barContainer,d&&n.barContainerActive),{maxValue:G,dimension:Q,measure:X,...R}=L;return o.jsx(W,{dataset:t,loading:P,Placeholder:T??H,ref:c,style:N,className:I,slot:A,resizeDebounce:250,...R,children:o.jsx("div",{className:n.container,children:t==null?void 0:t.map((r,i)=>{var _;const h=p.getValueByDataKey(r,g.accessor),m=p.getValueByDataKey(r,e.accessor),C=g.formatter(h);let u="";return e.hideDataLabel||(e.DataLabel?u=l.createElement(e.DataLabel,{value:m,config:e,formattedValue:e.formatter(m)}):u=e.formatter(m)),o.jsxs("div",{className:O,onClick:F(r,i),children:[o.jsxs("div",{className:n.labelContainer,children:[o.jsx("span",{className:n.label,title:C,children:C}),o.jsx("span",{className:n.text,title:u,children:e.hideDataLabel?"":u})]}),o.jsx("div",{className:n.valueContainer,style:{opacity:(e==null?void 0:e.opacity)??1,height:E},children:o.jsx("div",{className:n.valueBar,"data-component-name":"MicroBarChartValueBar",style:{width:`${m/z*100}%`,backgroundColor:J(i,(_=e==null?void 0:e.colors)==null?void 0:_[i])}})})]},h)})})})});s.displayName="MicroBarChart";try{s.displayName="MicroBarChart",s.__docgenInfo={description:"The `MicroBarChart` compares different values of the same category to each other by displaying them in a compact way.",displayName:"MicroBarChart",props:{dimension:{defaultValue:null,description:`A object which contains the configuration of the dimension.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs`,name:"dimension",required:!0,type:{name:"IChartDimension"}},measure:{defaultValue:null,description:"An array of config objects. Each object is defining one bar in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this bar should display. Supports object structures by using <code>'parent.child'</code>.\nCan also be a getter.\n\n**Optional properties**\n\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `colors`: array of any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n- `width`: bar width in pixel, defaults to `4`\n- `opacity`: bar opacity, defaults to `1`\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n- `DataLabel`: a custom component to be used for the data label",name:"measure",required:!0,type:{name:"MeasureConfig"}},maxValue:{defaultValue:null,description:`An optional number for the maxValue of the valueBar.
Default is the highest number of the corresponding accessor in the dataset.`,name:"maxValue",required:!1,type:{name:"number"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},loading:{defaultValue:null,description:`Flag whether the chart should display a loading indicator.

This can either be a placeholder shimmer (in case the chart has no data yet) or a small
loading bar in the top of the chart (in case the chart has already some data to display).`,name:"loading",required:!1,type:{name:"boolean"}},dataset:{defaultValue:null,description:"The `dataset` is an array of object which will be displayed in the chart.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}}}}}catch{}try{s.displayName="MicroBarChart",s.__docgenInfo={description:"The `MicroBarChart` compares different values of the same category to each other by displaying them in a compact way.",displayName:"MicroBarChart",props:{dimension:{defaultValue:null,description:`A object which contains the configuration of the dimension.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs`,name:"dimension",required:!0,type:{name:"IChartDimension"}},measure:{defaultValue:null,description:"An array of config objects. Each object is defining one bar in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this bar should display. Supports object structures by using <code>'parent.child'</code>.\nCan also be a getter.\n\n**Optional properties**\n\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `colors`: array of any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n- `width`: bar width in pixel, defaults to `4`\n- `opacity`: bar opacity, defaults to `1`\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n- `DataLabel`: a custom component to be used for the data label",name:"measure",required:!0,type:{name:"MeasureConfig"}},maxValue:{defaultValue:null,description:`An optional number for the maxValue of the valueBar.
Default is the highest number of the corresponding accessor in the dataset.`,name:"maxValue",required:!1,type:{name:"number"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},loading:{defaultValue:null,description:`Flag whether the chart should display a loading indicator.

This can either be a placeholder shimmer (in case the chart has no data yet) or a small
loading bar in the top of the chart (in case the chart has already some data to display).`,name:"loading",required:!1,type:{name:"boolean"}},dataset:{defaultValue:null,description:"The `dataset` is an array of object which will be displayed in the chart.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}}}}}catch{}const Pe={title:"MicroBarChart",component:s,args:{dimension:{accessor:"name"},measure:{accessor:"data"},dataset:[{name:"January",data:100},{name:"February",data:300},{name:"March",data:530},{name:"April",data:200}]},argTypes:{dataset:{control:{disable:!0}}}},f={},b={args:{measure:{accessor:"data",colors:["#f0ab00","var(--sapHighlightColor)"],formatter:a=>a>200?"over 200":"lower",width:16}}},y={args:{dataset:[]}};var x,B,V;f.parameters={...f.parameters,docs:{...(x=f.parameters)==null?void 0:x.docs,source:{originalSource:"{}",...(V=(B=f.parameters)==null?void 0:B.docs)==null?void 0:V.source}}};var M,S,D;b.parameters={...b.parameters,docs:{...(M=b.parameters)==null?void 0:M.docs,source:{originalSource:`{
  args: {
    measure: {
      accessor: 'data',
      colors: ['#f0ab00', 'var(--sapHighlightColor)'],
      formatter: d => d > 200 ? 'over 200' : 'lower',
      width: 16
    }
  }
}`,...(D=(S=b.parameters)==null?void 0:S.docs)==null?void 0:D.source}}};var k,j,q;y.parameters={...y.parameters,docs:{...(k=y.parameters)==null?void 0:k.docs,source:{originalSource:`{
  args: {
    dataset: []
  }
}`,...(q=(j=y.parameters)==null?void 0:j.docs)==null?void 0:q.source}}};const Ne=["Default","WithFormatter","LoadingPlaceholder"];export{f as Default,y as LoadingPlaceholder,b as WithFormatter,Ne as __namedExportsOrder,Pe as default};
