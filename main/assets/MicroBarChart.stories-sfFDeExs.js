import{j as n}from"./jsx-runtime-Du8NFWEI.js";import{T as i}from"./ThemingParameters--AGRs54p.js";import{e as U}from"./index-CBpU8qq5.js";import{c as W}from"./clsx-B-dksMZM.js";import{r as l}from"./index-Dl6G-zuu.js";import{c as K}from"./react-jss.esm-BPPChJW9.js";import{a as x,C as f}from"./defaults-Dpz6_OFC.js";import{C as H}from"./ChartContainer-wmWBaUP7.js";import{B as $}from"./Placeholder-B1yNe1LP.js";import"./inheritsLoose-D8L2VVdp.js";import"./theming.esm-5daRW75o.js";import"./_baseForOwn-DFjKyXZi.js";import"./isString-B_cEKuVX.js";import"./tiny-invariant-CCoILDQG.js";import"./_baseUniq-DRxb5hvO.js";import"./index-DgDtwm43.js";import"./i18n-defaults-ftfSvdLi.js";import"./i18nBundle-C2WczoLt.js";import"./Boot-CiW9Yqx0.js";import"./VersionInfo-BESRVDo6.js";import"./I18nContext-BcGksm2n.js";import"./useIsomorphicLayoutEffect-gsbYElqV.js";import"./throttle-ClB5v_5B.js";import"./index-Cl_Q-Ccq.js";import"./iframe-CbeW7cfd.js";import"../sb-preview/runtime.js";import"./Label-Cuq9lQQu.js";import"./UI5Element-TZfj5eGG.js";import"./CustomElementsScopeUtils-Brq83ayG.js";import"./withWebComponent-WdPEUVG_.js";import"./utils-B7AYZOSV.js";import"./WrappingType-CW8URInd.js";import"./i18n-defaults-weVOdquz.js";import"./parameters-bundle.css-B6zgRRib.js";import"./react-content-loader.es-CRTrDzHi.js";const Y=(a,d=null)=>d?i[d]??d:i[`sapChart_Sequence_${a%11+1}`],J={container:{display:"flex",flexDirection:"column",overflow:"hidden",fontFamily:i.sapFontFamily,fontWeight:"normal",width:"100%",height:"100%",justifyContent:"space-around"},barContainer:{cursor:"auto"},barContainerActive:{"&:active":{opacity:"0.3 !important"},cursor:"pointer"},labelContainer:{display:"flex",justifyContent:"space-between"},valueContainer:{display:"flex",backgroundColor:i.sapContent_Placeholderloading_Background},valueBar:{height:"100%"},label:{color:i.sapContent_LabelColor,display:"block",overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis",fontSize:i.sapFontSmallSize,maxWidth:"70%"},text:{paddingLeft:"6px",display:"inline-block",overflow:"hidden",fontSize:i.sapFontSmallSize,boxSizing:"border-box",whiteSpace:"nowrap",textOverflow:"ellipsis",color:i.sapTextColor,textAlign:"right"}},G=K(J,{name:"MicroBarChart"}),c=l.forwardRef((a,d)=>{const{loading:I,dataset:t,onDataPointClick:h,style:M,className:N,slot:L,ChartPlaceholder:T,...z}=a,o=G(),C=l.useMemo(()=>({formatter:x,...a.dimension}),[a.dimension]),e=l.useMemo(()=>({formatter:x,...a.measure}),[a.measure]),A=l.useMemo(()=>{if(t){const r=Math.max(...t==null?void 0:t.map(s=>f.getValueByDataKey(s,e.accessor)));return a.maxValue??r}return 0},[t,e,a.maxValue]),E=e!=null&&e.width?`${e.width}px`:"4px",F=l.useCallback((r,s)=>m=>{typeof h=="function"&&h(U(m,{dataKey:e.accessor,value:f.getValueByDataKey(r,e.accessor),payload:r,dataIndex:s}))},[e.accessor,h]),O=W(o.barContainer,h&&o.barContainerActive),{maxValue:Q,dimension:X,measure:Z,...R}=z;return n.jsx(H,{dataset:t,loading:I,Placeholder:T??$,ref:d,style:M,className:N,slot:L,resizeDebounce:250,...R,children:n.jsx("div",{className:o.container,children:t==null?void 0:t.map((r,s)=>{var v;const m=f.getValueByDataKey(r,C.accessor),p=f.getValueByDataKey(r,e.accessor),w=C.formatter(m);let u="";return e.hideDataLabel||(e.DataLabel?u=l.createElement(e.DataLabel,{value:p,config:e,formattedValue:e.formatter(p)}):u=e.formatter(p)),n.jsxs("div",{className:O,onClick:F(r,s),children:[n.jsxs("div",{className:o.labelContainer,children:[n.jsx("span",{className:o.label,title:w,children:w}),n.jsx("span",{className:o.text,title:u,children:e.hideDataLabel?"":u})]}),n.jsx("div",{className:o.valueContainer,style:{opacity:(e==null?void 0:e.opacity)??1,height:E},children:n.jsx("div",{className:o.valueBar,style:{width:`${p/A*100}%`,backgroundColor:Y(s,(v=e==null?void 0:e.colors)==null?void 0:v[s])}})})]},m)})})})});c.displayName="MicroBarChart";try{c.displayName="MicroBarChart",c.__docgenInfo={description:"The `MicroBarChart` compares different values of the same category to each other by displaying them in a compact way.",displayName:"MicroBarChart",props:{dimension:{defaultValue:null,description:`A object which contains the configuration of the dimension.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs`,name:"dimension",required:!0,type:{name:"IChartDimension"}},measure:{defaultValue:null,description:"An array of config objects. Each object is defining one bar in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this bar should display. Supports object structures by using <code>'parent.child'</code>.\nCan also be a getter.\n\n**Optional properties**\n\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `colors`: array of any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n- `width`: bar width in pixel, defaults to `4`\n- `opacity`: bar opacity, defaults to `1`\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n- `DataLabel`: a custom component to be used for the data label",name:"measure",required:!0,type:{name:"MeasureConfig"}},maxValue:{defaultValue:null,description:`An optional number for the maxValue of the valueBar.
Default is the highest number of the corresponding accessor in the dataset.`,name:"maxValue",required:!1,type:{name:"number"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},loading:{defaultValue:null,description:`Flag whether the chart should display a loading indicator.

This can either be a placeholder shimmer (in case the chart has no data yet) or a small
loading bar in the top of the chart (in case the chart has already some data to display).`,name:"loading",required:!1,type:{name:"boolean"}},dataset:{defaultValue:null,description:"The `dataset` is an array of object which will be displayed in the chart.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}}}}}catch{}try{c.displayName="MicroBarChart",c.__docgenInfo={description:"The `MicroBarChart` compares different values of the same category to each other by displaying them in a compact way.",displayName:"MicroBarChart",props:{dimension:{defaultValue:null,description:`A object which contains the configuration of the dimension.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs`,name:"dimension",required:!0,type:{name:"IChartDimension"}},measure:{defaultValue:null,description:"An array of config objects. Each object is defining one bar in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this bar should display. Supports object structures by using <code>'parent.child'</code>.\nCan also be a getter.\n\n**Optional properties**\n\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `colors`: array of any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n- `width`: bar width in pixel, defaults to `4`\n- `opacity`: bar opacity, defaults to `1`\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n- `DataLabel`: a custom component to be used for the data label",name:"measure",required:!0,type:{name:"MeasureConfig"}},maxValue:{defaultValue:null,description:`An optional number for the maxValue of the valueBar.
Default is the highest number of the corresponding accessor in the dataset.`,name:"maxValue",required:!1,type:{name:"number"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},loading:{defaultValue:null,description:`Flag whether the chart should display a loading indicator.

This can either be a placeholder shimmer (in case the chart has no data yet) or a small
loading bar in the top of the chart (in case the chart has already some data to display).`,name:"loading",required:!1,type:{name:"boolean"}},dataset:{defaultValue:null,description:"The `dataset` is an array of object which will be displayed in the chart.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}}}}}catch{}const Le={title:"MicroBarChart",component:c,args:{dimension:{accessor:"name"},measure:{accessor:"data"},dataset:[{name:"January",data:100},{name:"February",data:300},{name:"March",data:530},{name:"April",data:200}]},argTypes:{dataset:{control:{disable:!0}}}},y={},g={args:{measure:{accessor:"data",colors:["#f0ab00","var(--sapHighlightColor)"],formatter:a=>a>200?"over 200":"lower",width:16}}},b={args:{dataset:[]}};var S,V,D;y.parameters={...y.parameters,docs:{...(S=y.parameters)==null?void 0:S.docs,source:{originalSource:"{}",...(D=(V=y.parameters)==null?void 0:V.docs)==null?void 0:D.source}}};var _,k,j;g.parameters={...g.parameters,docs:{...(_=g.parameters)==null?void 0:_.docs,source:{originalSource:`{
  args: {
    measure: {
      accessor: 'data',
      colors: ['#f0ab00', 'var(--sapHighlightColor)'],
      formatter: d => d > 200 ? 'over 200' : 'lower',
      width: 16
    }
  }
}`,...(j=(k=g.parameters)==null?void 0:k.docs)==null?void 0:j.source}}};var q,B,P;b.parameters={...b.parameters,docs:{...(q=b.parameters)==null?void 0:q.docs,source:{originalSource:`{
  args: {
    dataset: []
  }
}`,...(P=(B=b.parameters)==null?void 0:B.docs)==null?void 0:P.source}}};const Te=["Default","WithFormatter","LoadingPlaceholder"];export{y as Default,b as LoadingPlaceholder,g as WithFormatter,Te as __namedExportsOrder,Le as default};
