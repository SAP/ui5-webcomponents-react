{"version":3,"file":"index-yaLaEhii.js","sources":["../../packages/main/src/components/Text/Text.jss.ts","../../packages/main/src/components/Text/index.tsx"],"sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base';\n\nexport const TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%',\n    '&::selection': {\n      background: ThemingParameters.sapSelectedColor,\n      color: ThemingParameters.sapContent_ContrastTextColor\n    }\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  },\n  maxLines: {\n    display: '-webkit-box',\n    WebkitBoxOrient: 'vertical',\n    overflow: 'hidden',\n    WebkitLineClamp: 'var(--_ui5wcr_maxLines)'\n  },\n  hyphenated: {\n    hyphens: 'auto'\n  },\n  emptyIndicator: {\n    lineHeight: 'normal',\n    color: ThemingParameters.sapTextColor\n  },\n  pseudoInvisibleText: {\n    fontSize: 0,\n    position: 'absolute',\n    userSelect: 'none',\n    left: 0,\n    top: 0\n  }\n};\n","'use client';\n\nimport { useI18nBundle } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport type { CSSProperties, ReactNode } from 'react';\nimport React, { forwardRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { EMPTY_VALUE } from '../../i18n/i18n-defaults.js';\nimport type { CommonProps } from '../../interfaces/index.js';\nimport { TextStyles } from './Text.jss.js';\n\nexport interface TextPropTypes extends CommonProps {\n  /**\n   * Pass the text as direct child of Text\n   */\n  children?: ReactNode;\n  /**\n   * Defines how white-space inside <code>Text</code> is handled. If set to true, sequences of white space are preserved.\n   */\n  renderWhitespace?: boolean;\n  /**\n   * Defines whether the text wraps when there is not enough space.\n   */\n  wrapping?: boolean;\n  /**\n   * Limits the number of lines for wrapping texts.\n   */\n  maxLines?: number;\n  /**\n   * Specifies if an empty indicator should be displayed when there is no text.\n   *\n   * @since 1.23.0\n   */\n  emptyIndicator?: boolean;\n  /**\n   * Defines the type of text wrapping to be used (hyphenated or normal).\n   *\n   * __Note:__ This prop only takes effect if the `wrapping` prop is set to `true`.\n   *\n   * @since 1.23.0\n   */\n  hyphenated?: boolean;\n}\n\nconst useStyles = createUseStyles(TextStyles, { name: 'Text' });\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n *\n * __Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\nconst Text = forwardRef<HTMLSpanElement, TextPropTypes>((props, ref) => {\n  const {\n    children,\n    renderWhitespace,\n    wrapping = true,\n    className,\n    style,\n    maxLines,\n    hyphenated,\n    emptyIndicator,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n  const classNameString = clsx(\n    classes.text,\n    wrapping === false && classes.noWrap,\n    renderWhitespace && classes.renderWhitespace,\n    typeof maxLines === 'number' && classes.maxLines,\n    hyphenated && classes.hyphenated,\n    className\n  );\n\n  const showEmptyIndicator = emptyIndicator && !children;\n  const computedChildren = showEmptyIndicator ? (\n    <span aria-hidden={showEmptyIndicator} data-component-name=\"TextEmptyIndicator\" className={classes.emptyIndicator}>\n      â€“\n    </span>\n  ) : (\n    children\n  );\n\n  return (\n    <span\n      ref={ref}\n      style={{ '--_ui5wcr_maxLines': typeof maxLines === 'number' ? maxLines : undefined, ...style } as CSSProperties}\n      className={classNameString}\n      {...rest}\n    >\n      {computedChildren}\n      {showEmptyIndicator && (\n        <span className={classes.pseudoInvisibleText} data-component-name=\"TextEmptyTextContainer\">\n          {i18nBundle.getText(EMPTY_VALUE)}\n        </span>\n      )}\n    </span>\n  );\n});\n\nText.displayName = 'Text';\n\nexport { Text };\n"],"names":["TextStyles","ThemingParameters","useStyles","createUseStyles","Text","forwardRef","props","ref","children","renderWhitespace","wrapping","className","style","maxLines","hyphenated","emptyIndicator","rest","classes","i18nBundle","useI18nBundle","classNameString","clsx","showEmptyIndicator","computedChildren","jsx","jsxs","EMPTY_VALUE"],"mappings":"wRAEO,MAAMA,EAAa,CAExB,KAAM,CACJ,WAAYC,EAAkB,cAC9B,SAAUA,EAAkB,YAC5B,WAAY,SACZ,MAAOA,EAAkB,aACzB,QAAS,eACT,UAAW,aACX,WAAY,WACZ,SAAU,aACV,SAAU,OACV,eAAgB,CACd,WAAYA,EAAkB,iBAC9B,MAAOA,EAAkB,4BAC3B,CACF,EACA,iBAAkB,CAChB,WAAY,UACd,EACA,OAAQ,CACN,aAAc,WACd,WAAY,SACZ,SAAU,SACV,SAAU,SACV,qBAAsB,CACpB,WAAY,KACd,CACF,EACA,SAAU,CACR,QAAS,cACT,gBAAiB,WACjB,SAAU,SACV,gBAAiB,yBACnB,EACA,WAAY,CACV,QAAS,MACX,EACA,eAAgB,CACd,WAAY,SACZ,MAAOA,EAAkB,YAC3B,EACA,oBAAqB,CACnB,SAAU,EACV,SAAU,WACV,WAAY,OACZ,KAAM,EACN,IAAK,CACP,CACF,ECPAC,EAAAC,EAAAH,EAAA,CAAA,KAAA,MAAA,CAAA,EAMAI,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CACE,KAAA,CAAM,SAAAC,EACJ,iBAAAC,EACA,SAAAC,EAAA,GACW,UAAAC,EACX,MAAAC,EACA,SAAAC,EACA,WAAAC,EACA,eAAAC,EACA,GAAAC,CACG,EAAAV,EAELW,EAAAf,IACAgB,EAAAC,EAAA,0BAAA,EACAC,EAAAC,EAAwBJ,EAAA,KACdP,IAAA,IAAAO,EAAA,OACsBR,GAAAQ,EAAA,iBACF,OAAAJ,GAAA,UAAAI,EAAA,SACYH,GAAAG,EAAA,WAClBN,CACtB,EAGFW,EAAAP,GAAA,CAAAP,EACAe,EAAAD,EAAAE,EAAAA,IAAA,OAAA,CAAA,cAAAF,EAAA,sBAAA,qBAAA,UAAAL,EAAA,eAAA,SAAA,GAAA,CAAA,EAAAT,EAQA,OAAAiB,EAAA,KACE,OAAC,CAAA,IAAAlB,EACC,MAAA,CAAA,qBAAA,OAAAM,GAAA,SAAAA,EAAA,OAAA,GAAAD,CAAA,EAC6F,UAAAQ,EAClF,GAAAJ,EACP,SAAA,CAEHO,EAAAD,GAAAE,EAAAA,IAAA,OAAA,CAAA,UAAAP,EAAA,oBAAA,sBAAA,yBAAA,SAAAC,EAAA,QAAAQ,CAAA,CAAA,CAAA,CAIC,CAAA,CAAA,CAIR,CAAA,EAEAtB,EAAA,YAAA;;;"}