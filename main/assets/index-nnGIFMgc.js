import{j as t}from"./useIsomorphicLayoutEffect-CpdNMtv3.js";import{T as y}from"./ThemingParameters-DOkJX3Ed.js";import{e as F}from"./index-D8PAbW1n.js";import{r as E}from"./index-DEe9W-hO.js";import{C as ge,a as B}from"./defaults-DLMtL5hN.js";import{u as ye,a as be,C as Ce,Y as _,b as V,X as P,c as L}from"./YAxisTicks-7Mhrq30B.js";import{u as ve,C as W}from"./ChartDataLabel-wKxbcYJO.js";import{u as xe,t as we,a as ke,b as Ae}from"./staticProps-DsetRNqa.js";import{u as je}from"./useLongestYAxisLabel-C53SkTbH.js";import{u as _e}from"./useOnClickInternal-Chqq3b2P.js";import{u as Ve,a as Pe,r as Le,b as H}from"./useTooltipFormatter-C7TFwKMM.js";import{C as Ie}from"./ChartContainer-CFU4BpVz.js";import{C as ze}from"./react-content-loader.es-CK-1p032.js";import{C as qe,A as De}from"./ComposedChart-D0KtbqWa.js";import{R as Se,T as Te,d as Ye,a as Ne,e as Re,h as Oe,B as Ke}from"./generateCategoricalChart-CnTQU6Cn.js";import{L as Fe}from"./Line-Dsx-t3jU.js";import{u as Ee}from"./withWebComponent-ystZv1Rq.js";import{u as We}from"./useIsRTL-CMHMLISR.js";const He=t.jsxs(t.Fragment,{children:[t.jsx("rect",{x:"20",y:"20",width:"85",height:"15"}),t.jsx("rect",{x:"20",y:"40",width:"117",height:"15"}),t.jsx("rect",{x:"20",y:"60",width:"67",height:"15"}),t.jsx("rect",{x:"20",y:"80",width:"75",height:"15"}),t.jsx("rect",{x:"20",y:"100",width:"125",height:"15"}),t.jsx("rect",{x:"20",y:"120",width:"60",height:"15"})]}),Be=t.jsxs(t.Fragment,{children:[t.jsx("rect",{x:"20",y:"50",width:"15",height:"85"}),t.jsx("rect",{x:"40",y:"18",width:"15",height:"117"}),t.jsx("rect",{x:"60",y:"68",width:"15",height:"67"}),t.jsx("rect",{x:"80",y:"60",width:"15",height:"75"}),t.jsx("rect",{x:"100",y:"10",width:"15",height:"125"}),t.jsx("rect",{x:"120",y:"75",width:"15",height:"60"})]}),Me=t.jsx(t.Fragment,{children:t.jsx("path",{d:"M20 20 L75 40 L85 60 L125 80 L105 100 L90 120 L55 135 L92 120 L107 100 L127 80 L87 60 L77 40 L22 20 Z",fill:"none",strokeWidth:"2"})}),$e=t.jsx(t.Fragment,{children:t.jsx("path",{d:"M20 135 L40 80 L60 70 L80 30 L100 50 L120 65 L135 100 L120 67 L100 52 L80 32 L60 72 L40 82 L20 137 Z",fill:"none",strokeWidth:"2"})}),b=({layout:r,measures:k})=>{const h=new Set(k.map(c=>c.type));return t.jsxs(ze,{viewBox:"0 0 165 145",preserveAspectRatio:"xMidYMid meet",width:"100%",height:"100%",speed:2,backgroundColor:y.sapContent_ImagePlaceholderBackground,foregroundColor:y.sapContent_ImagePlaceholderForegroundColor,backgroundOpacity:y.sapContent_DisabledOpacity,children:[r==="vertical"&&t.jsx("rect",{x:"20",y:"10",width:"1",height:"135"}),r==="horizontal"&&t.jsx("rect",{x:"10",y:"135",width:"135",height:"1"}),r==="vertical"&&h.has("bar")&&He,r==="horizontal"&&h.has("bar")&&Be,r==="vertical"&&(h.has("line")||h.has("area"))&&Me,r==="horizontal"&&(h.has("line")||h.has("area"))&&$e]})};try{b.displayName="ComposedChartPlaceholder",b.__docgenInfo={description:"",displayName:"ComposedChartPlaceholder",props:{layout:{defaultValue:null,description:"",name:"layout",required:!0,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},measures:{defaultValue:null,description:"",name:"measures",required:!0,type:{name:"(IChartMeasure & { type: string; })[]"}}}}}catch{}try{b.displayName="ComposedChartPlaceholder",b.__docgenInfo={description:"",displayName:"ComposedChartPlaceholder",props:{layout:{defaultValue:null,description:"",name:"layout",required:!0,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},measures:{defaultValue:null,description:"",name:"measures",required:!0,type:{name:"(IChartMeasure & { type: string; })[]"}}}}}catch{}const Ue={formatter:B},Xe={formatter:B,opacity:1},Ze={line:Fe,bar:Ke,area:De},C=E.forwardRef((r,k)=>{var T,Y,N;const{loading:h,dataset:c,onDataPointClick:v,noLegend:M,noAnimation:$,tooltipConfig:x,onLegendClick:U,onClick:I,layout:s="horizontal",style:X,className:Z,slot:G,syncId:J,ChartPlaceholder:Q,children:ee,...te}=r,[ae,z]=Ee(k),a={yAxisLabelsVisible:!0,yAxisVisible:!1,xAxisVisible:!0,gridStroke:y.sapList_BorderColor,gridHorizontal:!0,gridVertical:!1,legendPosition:"bottom",legendHorizontalAlign:"left",zoomingTool:!1,resizeDebounce:250,yAxisWidth:null,yAxisConfig:{},xAxisConfig:{},secondYAxisConfig:{},secondXAxisConfig:{},...r.chartConfig},{referenceLine:n}=a,{dimensions:A,measures:d}=Ve(r.dimensions,r.measures,Ue,Xe),oe=Pe(d),u=A[0],{primaryMeasure:f,secondaryMeasure:q}=Le(d,(T=a==null?void 0:a.secondYAxis)==null?void 0:T.dataKey),ne=ve(u),ie=d.map(({accessor:e})=>e),m=a.secondYAxis?ie.findIndex(e=>{var i;return e===((i=a.secondYAxis)==null?void 0:i.dataKey)}):0,re=e=>({payload:i})=>ge.getValueByDataKey(i,e),j=(e,i,p)=>{if(typeof v=="function")if(typeof i=="number"){const o=Array.isArray(e==null?void 0:e.value);v(F(p,{value:o?e.value[1]-e.value[0]:e.value,dataIndex:e.index??i,dataKey:o?Object.keys(e).filter(l=>e.value.length?e[l]===e.value[1]-e.value[0]:e[l]===e.value&&l!=="value")[0]:e.dataKey??Object.keys(e).find(l=>e[l]&&e[l]===e.value&&l!=="value"),payload:e.payload}))}else v(F({},{value:Array.isArray(i.value)?i.value[1]-i.value[0]:i.value,dataKey:i.dataKey,dataIndex:i.index,payload:i.payload}))},se=xe(U),le=_e(I),w=(c==null?void 0:c.length)>30,ce=u==null?void 0:u.accessor,[D,de]=je(c,s==="vertical"?A:d,a.legendPosition),he=ye(a.margin,a.zoomingTool),ue=be(z,s==="vertical"?1:r.dimensions.length),S={axisLine:a.yAxisVisible,tickLine:we,tickFormatter:f==null?void 0:f.formatter,interval:0},pe=E.useCallback(()=>t.jsx(b,{layout:s,measures:d}),[s,d]),{chartConfig:Ge,dimensions:Je,measures:Qe,...me}=te,g=We(z);return t.jsx(Ie,{ref:ae,loading:h,dataset:c,Placeholder:Q??pe,style:X,className:Z,slot:G,resizeDebounce:a.resizeDebounce,...me,children:t.jsxs(qe,{syncId:J,onClick:le,stackOffset:"sign",margin:he,data:c,layout:s,className:typeof v=="function"||typeof I=="function"?"has-click-handler":void 0,children:[t.jsx(Ce,{vertical:a.gridVertical,horizontal:a.gridHorizontal,stroke:a.gridStroke}),A.map((e,i)=>{let p;const o={dataKey:e.accessor,interval:(e==null?void 0:e.interval)??(w?"preserveStart":0),tickLine:i<1,axisLine:i<1,allowDuplicatedCategory:i===0};return s==="vertical"?(o.type="category",o.visible=!1,o.hide=!a.yAxisVisible,o.tick=t.jsx(V,{config:e}),o.yAxisId=i,o.width=a.yAxisWidth??D,p=_,o.orientation=g?"right":"left"):(o.dataKey=e.accessor,o.tick=t.jsx(L,{config:e}),o.hide=!a.xAxisVisible,o.xAxisId=i,o.height=ue[i],p=P,o.reversed=g),t.jsx(p,{...o},e.reactKey)}),s==="horizontal"&&t.jsx(_,{...S,yAxisId:"primary",width:a.yAxisWidth??D,orientation:g?"right":"left",tick:a.yAxisLabelsVisible?t.jsx(V,{config:f}):!1,...a.yAxisConfig}),s==="vertical"&&t.jsx(P,{...S,reversed:g,xAxisId:"primary",type:"number",tick:t.jsx(L,{config:f}),...a.xAxisConfig}),((Y=a.secondYAxis)==null?void 0:Y.dataKey)&&s==="horizontal"&&t.jsx(_,{dataKey:a.secondYAxis.dataKey,axisLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${m%11+1})`},tick:t.jsx(V,{config:q,secondYAxisConfig:{color:a.secondYAxis.color??`var(--sapChart_OrderedColor_${m%11+1})`}}),tickLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${m%11+1})`},label:{value:a.secondYAxis.name,offset:2,angle:90,position:"center"},orientation:g?"left":"right",interval:0,yAxisId:"secondary",...a.secondYAxisConfig}),((N=a.secondYAxis)==null?void 0:N.dataKey)&&s==="vertical"&&t.jsx(P,{dataKey:a.secondYAxis.dataKey,axisLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${m%11+1})`},tick:t.jsx(L,{config:q,secondYAxisConfig:{color:a.secondYAxis.color??`var(--sapChart_OrderedColor_${m%11+1})`}}),tickLine:{stroke:a.secondYAxis.color??`var(--sapChart_OrderedColor_${m%11+1})`},label:{value:a.secondYAxis.name,offset:2,angle:90,position:"center"},orientation:"top",interval:0,xAxisId:"secondary",type:"number",...a.secondXAxisConfig}),n&&t.jsx(Se,{...n,stroke:(n==null?void 0:n.color)??(n==null?void 0:n.stroke),y:n!=null&&n.value?s==="horizontal"?n==null?void 0:n.value:void 0:n==null?void 0:n.y,x:n!=null&&n.value?s==="vertical"?n==null?void 0:n.value:void 0:n==null?void 0:n.x,yAxisId:(n==null?void 0:n.yAxisId)??s==="horizontal"?"primary":void 0,xAxisId:(n==null?void 0:n.xAxisId)??s==="vertical"?"primary":void 0,label:n==null?void 0:n.label}),(x==null?void 0:x.active)!==!1&&t.jsx(Te,{cursor:ke,formatter:oe,contentStyle:Ae,labelFormatter:ne,...x}),!M&&t.jsx(Ye,{verticalAlign:a.legendPosition,align:a.legendHorizontalAlign,onClick:se,wrapperStyle:de}),d==null?void 0:d.map((e,i)=>{var R,O;const p=Ze[e.type],o={isAnimationActive:!$};let l="top";switch(e.type){case"line":o.activeDot={onClick:j},o.strokeWidth=e.width,o.strokeOpacity=e.opacity,o.dot=e.showDot??!w;break;case"bar":o.hide=e.hide,o.fillOpacity=e.opacity,o.strokeOpacity=e.opacity,o.barSize=e.width,o.onClick=j,o.stackId=e.stackId??void 0,o.labelPosition=e.stackId?"insideTop":"top",s==="vertical"?l="insideRight":l="insideTop";break;case"area":o.dot=!w,o.fillOpacity=.3,o.strokeOpacity=e.opacity,o.strokeWidth=e.width,o.activeDot={onClick:j};break}return s==="vertical"?o.xAxisId=((R=a.secondYAxis)==null?void 0:R.dataKey)===e.accessor?"secondary":"primary":o.yAxisId=((O=a.secondYAxis)==null?void 0:O.dataKey)===e.accessor?"secondary":"primary",t.jsx(p,{name:e.label??e.accessor,label:e.type==="bar"||w?void 0:t.jsx(W,{config:e,chartType:e.type,position:l}),stroke:e.color??`var(--sapChart_OrderedColor_${i%11+1})`,fill:e.color??`var(--sapChart_OrderedColor_${i%11+1})`,type:"monotone",dataKey:e.accessor,...o,children:e.type==="bar"&&t.jsxs(t.Fragment,{children:[t.jsx(Ne,{data:c,valueAccessor:re(e.accessor),content:t.jsx(W,{config:e,chartType:"column",position:"insideTop"})}),c.map((K,fe)=>t.jsx(Re,{fill:H(e,K,i),stroke:H(e,K,i)},fe))]})},e.reactKey)}),a.zoomingTool&&t.jsx(Oe,{y:10,dataKey:ce,tickFormatter:u==null?void 0:u.formatter,stroke:y.sapObjectHeader_BorderColor,travellerWidth:10,height:20}),ee]})})});C.displayName="ComposedChart";try{C.displayName="ComposedChart",C.__docgenInfo={description:"The `ComposedChart` enables you to combine different chart types in one chart, e.g. showing bars together with lines.",displayName:"ComposedChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one element in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this element should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n- `type`: string which chart element to show. Possible values: `line`, `bar`, `area`.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this element.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: width of the current chart element, defaults to `1` for `lines` and `20` for bars\n- `opacity`: element opacity, defaults to `1`\n- `stackId`: bars with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},layout:{defaultValue:{value:'`"horizontal"`'},description:"layout for showing measures. `horizontal` bars would equal the column chart, `vertical` would be a bar chart.\nDefault Value: `horizontal`",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},loading:{defaultValue:null,description:`Flag whether the chart should display a loading indicator.

This can either be a placeholder shimmer (in case the chart has no data yet) or a small
loading bar in the top of the chart (in case the chart has already some data to display).`,name:"loading",required:!1,type:{name:"boolean"}},dataset:{defaultValue:null,description:"The `dataset` is an array of object which will be displayed in the chart.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'ICartesianChartConfig & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | "bottom" | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to overwrite internally used tooltip props, so use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}}}}}catch{}try{C.displayName="ComposedChart",C.__docgenInfo={description:"The `ComposedChart` enables you to combine different chart types in one chart, e.g. showing bars together with lines.",displayName:"ComposedChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one element in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this element should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n- `type`: string which chart element to show. Possible values: `line`, `bar`, `area`.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this element.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: width of the current chart element, defaults to `1` for `lines` and `20` for bars\n- `opacity`: element opacity, defaults to `1`\n- `stackId`: bars with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},layout:{defaultValue:{value:'`"horizontal"`'},description:"layout for showing measures. `horizontal` bars would equal the column chart, `vertical` would be a bar chart.\nDefault Value: `horizontal`",name:"layout",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},loading:{defaultValue:null,description:`Flag whether the chart should display a loading indicator.

This can either be a placeholder shimmer (in case the chart has no data yet) or a small
loading bar in the top of the chart (in case the chart has already some data to display).`,name:"loading",required:!1,type:{name:"boolean"}},dataset:{defaultValue:null,description:"The `dataset` is an array of object which will be displayed in the chart.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'ICartesianChartConfig & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | "bottom" | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to overwrite internally used tooltip props, so use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}}}}}catch{}export{C};
