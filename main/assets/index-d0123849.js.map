{"version":3,"mappings":"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","names":["registerThemePropertiesLoader","defaultThemeBase","defaultTheme","styleData","__decorate","this","decorators","target","key","desc","c","r","d","i","DateRangePicker_1","DateRangePicker","DatePicker","getTodayUTCTimestamp","CalendarDate","DATERANGE_DESCRIPTION","input","caretPos","renderFinished","value","parts","dateString","firstDateTimestamp","lastDateTimestamp","event","values","newValue","amount","unit","preserveDate","newStartDateTimestamp","modifyDateBy","newEndDateTimestamp","ctor","valuesArray","partsArray","dateStrings","firstDateString","lastDateString","CalendarPickersMode","property","customElement","DateRangePickerCss","DateRangePicker$2","withWebComponent","__vitePreload","DateRangePicker$3","ValueState"],"sources":["../../node_modules/@ui5/webcomponents/dist/generated/themes/DateRangePicker.css.js","../../node_modules/@ui5/webcomponents/dist/DateRangePicker.js","../../packages/main/src/webComponents/DateRangePicker/index.tsx"],"sourcesContent":["import { registerThemePropertiesLoader } from \"@ui5/webcomponents-base/dist/asset-registries/Themes.js\";\nimport defaultThemeBase from \"@ui5/webcomponents-theming/dist/generated/themes/sap_fiori_3/parameters-bundle.css.js\";\nimport defaultTheme from \"./sap_fiori_3/parameters-bundle.css.js\";\nregisterThemePropertiesLoader(\"@ui5/webcomponents-theming\", \"sap_fiori_3\", async () => defaultThemeBase);\nregisterThemePropertiesLoader(\"@ui5/webcomponents\", \"sap_fiori_3\", async () => defaultTheme);\nconst styleData = { packageName: \"@ui5/webcomponents\", fileName: \"themes/DateRangePicker.css\", content: \":host(:not([hidden])){display:inline-block}:host{background-color:var(--sapField_Background);color:var(--sapField_TextColor);min-width:15rem}:host .ui5-date-picker-input{background-color:inherit;color:inherit;min-width:inherit;width:100%}\" };\nexport default styleData;\n//# sourceMappingURL=DateRangePicker.css.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar DateRangePicker_1;\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\nimport { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport modifyDateBy from \"@ui5/webcomponents-localization/dist/dates/modifyDateBy.js\";\nimport getTodayUTCTimestamp from \"@ui5/webcomponents-localization/dist/dates/getTodayUTCTimestamp.js\";\nimport { DATERANGE_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\n// Styles\nimport DateRangePickerCss from \"./generated/themes/DateRangePicker.css.js\";\nimport DatePicker from \"./DatePicker.js\";\nimport CalendarPickersMode from \"./types/CalendarPickersMode.js\";\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n *\n * <h3>Usage</h3>\n * The user can enter a date by:\n * Using the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\n * For the <code>ui5-daterange-picker</code>\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/DateRangePicker.js\";</code>\n *\n * <h3>Keyboard Handling</h3>\n * The <code>ui5-daterange-picker</code> provides advanced keyboard handling.\n * <br>\n *\n * When the <code>ui5-daterange-picker</code> input field is focused the user can\n * increment or decrement respectively the range start or end date, depending on where the cursor is.\n * The following shortcuts are available:\n * <br>\n * <ul>\n * <li>[PAGEDOWN] - Decrements the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one</li>\n * <li>[PAGEUP] - Increments the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEUP] - Increments the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one</li>\n * </ul>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webc.main.DateRangePicker\n * @extends sap.ui.webc.main.DatePicker\n * @tagname ui5-daterange-picker\n * @since 1.0.0-rc.8\n * @public\n */\nlet DateRangePicker = DateRangePicker_1 = class DateRangePicker extends DatePicker {\n    constructor() {\n        super();\n        this._prevDelimiter = null;\n    }\n    /**\n     * <b>Note:</b> The getter method is inherited and not supported. If called it will return an empty value.\n     *\n     * @readonly\n     * @type {Date}\n     * @public\n     * @name sap.ui.webc.main.DateRangePicker.prototype.dateValue\n     */\n    get dateValue() {\n        return null;\n    }\n    /**\n     * <b>Note:</b> The getter method is inherited and not supported. If called it will return an empty value.\n     *\n     * @readonly\n     * @type {Date}\n     * @public\n     * @name sap.ui.webc.main.DateRangePicker.prototype.dateValueUTC\n     */\n    get dateValueUTC() {\n        return null;\n    }\n    get _startDateTimestamp() {\n        return this._extractFirstTimestamp(this.value);\n    }\n    get _endDateTimestamp() {\n        return this._extractLastTimestamp(this.value);\n    }\n    get _tempTimestamp() {\n        return this._tempValue && this.getFormat().parse(this._tempValue, true).getTime() / 1000;\n    }\n    /**\n     * Required by DatePicker.js\n     * @override\n     */\n    get _calendarSelectionMode() {\n        return \"Range\";\n    }\n    /**\n     * Required by DatePicker.js - set the calendar focus on the first selected date (or today if not set)\n     * @override\n     */\n    get _calendarTimestamp() {\n        return this._tempTimestamp || this._startDateTimestamp || getTodayUTCTimestamp(this._primaryCalendarType);\n    }\n    /**\n     * Required by DatePicker.js\n     * @override\n     */\n    get _calendarSelectedDates() {\n        if (this._tempValue) {\n            return [this._tempValue];\n        }\n        if (this.value && this._checkValueValidity(this.value)) {\n            return this._splitValueByDelimiter(this.value);\n        }\n        return [];\n    }\n    /**\n     * Returns the start date of the currently selected range as JavaScript Date instance.\n     *\n     * @readonly\n     * @type {Date}\n     * @public\n     * @name sap.ui.webc.main.DateRangePicker.prototype.startDateValue\n     */\n    get startDateValue() {\n        return CalendarDate.fromTimestamp(this._startDateTimestamp * 1000).toLocalJSDate();\n    }\n    /**\n     * Returns the end date of the currently selected range as JavaScript Date instance.\n     *\n     * @readonly\n     * @type {Date}\n     * @public\n     * @name sap.ui.webc.main.DateRangePicker.prototype.endDateValue\n     */\n    get endDateValue() {\n        return CalendarDate.fromTimestamp(this._endDateTimestamp * 1000).toLocalJSDate();\n    }\n    /**\n     * @override\n     */\n    get _placeholder() {\n        return this.placeholder !== undefined ? this.placeholder : `${this._displayFormat} ${this._effectiveDelimiter} ${this._displayFormat}`;\n    }\n    get dateAriaDescription() {\n        return DateRangePicker_1.i18nBundle.getText(DATERANGE_DESCRIPTION);\n    }\n    /**\n     * @override\n     */\n    async _onInputSubmit() {\n        const input = this._getInput();\n        const caretPos = input.getCaretPosition();\n        await renderFinished();\n        input.setCaretPosition(caretPos); // Return the caret on the previous position after rendering\n    }\n    /**\n     * @override\n     */\n    onResponsivePopoverAfterClose() {\n        this._tempValue = \"\"; // reset _tempValue on popover close\n        super.onResponsivePopoverAfterClose();\n    }\n    /**\n     * @override\n     */\n    isValid(value) {\n        const parts = this._splitValueByDelimiter(value);\n        return parts.length <= 2 && parts.every(dateString => super.isValid(dateString)); // must be at most 2 dates and each must be valid\n    }\n    /**\n     * @override\n     */\n    isInValidRange(value) {\n        return this._splitValueByDelimiter(value).every(dateString => super.isInValidRange(dateString));\n    }\n    /**\n     * Extract both dates as timestamps, flip if necessary, and build (which will use the desired format so we enforce the format too)\n     * @override\n     */\n    normalizeValue(value) {\n        const firstDateTimestamp = this._extractFirstTimestamp(value);\n        const lastDateTimestamp = this._extractLastTimestamp(value);\n        if (firstDateTimestamp && lastDateTimestamp && firstDateTimestamp > lastDateTimestamp) { // if both are timestamps (not undefined), flip if necessary\n            return this._buildValue(lastDateTimestamp, firstDateTimestamp);\n        }\n        return this._buildValue(firstDateTimestamp, lastDateTimestamp);\n    }\n    /**\n     * @override\n     */\n    onSelectedDatesChange(event) {\n        event.preventDefault(); // never let the calendar update its own dates, the parent component controls them\n        const values = event.detail.values;\n        if (values.length === 0) {\n            return;\n        }\n        if (values.length === 1) { // Do nothing until the user selects 2 dates, we don't change any state at all for one date\n            this._tempValue = values[0];\n            return;\n        }\n        const newValue = this._buildValue(event.detail.dates[0], event.detail.dates[1]); // the value will be normalized so we don't need to order them here\n        this._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n        this.closePicker();\n    }\n    /**\n     * @override\n     */\n    async _modifyDateValue(amount, unit, preserveDate) {\n        if (!this._endDateTimestamp) { // If empty or only one date -> treat as datepicker entirely\n            return super._modifyDateValue(amount, unit, preserveDate);\n        }\n        const input = this._getInput();\n        let caretPos = input.getCaretPosition(); // caret position is always number for input of type text;\n        let newValue;\n        if (caretPos <= this.value.indexOf(this._effectiveDelimiter)) { // The user is focusing the first date -> change it and keep the second date\n            const startDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._startDateTimestamp * 1000), amount, unit, preserveDate, this._minDate, this._maxDate);\n            const newStartDateTimestamp = startDateModified.valueOf() / 1000;\n            if (newStartDateTimestamp > this._endDateTimestamp) { // dates flipped -> move the caret to the same position but on the last date\n                caretPos += Math.ceil(this.value.length / 2);\n            }\n            newValue = this._buildValue(newStartDateTimestamp, this._endDateTimestamp); // the value will be normalized so we don't try to order them here\n        }\n        else {\n            const endDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._endDateTimestamp * 1000), amount, unit, preserveDate, this._minDate, this._maxDate);\n            const newEndDateTimestamp = endDateModified.valueOf() / 1000;\n            newValue = this._buildValue(this._startDateTimestamp, newEndDateTimestamp); // the value will be normalized so we don't try to order them here\n            if (newEndDateTimestamp < this._startDateTimestamp) { // dates flipped -> move the caret to the same position but on the first date\n                caretPos -= Math.ceil(this.value.length / 2);\n            }\n        }\n        this._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n        await renderFinished();\n        input.setCaretPosition(caretPos); // Return the caret to the previous (or the adjusted, if dates flipped) position after rendering\n    }\n    get _effectiveDelimiter() {\n        const ctor = this.constructor;\n        return this.delimiter || (ctor.getMetadata().getProperties().delimiter.defaultValue);\n    }\n    _splitValueByDelimiter(value) {\n        const valuesArray = [];\n        const partsArray = value.split(this._prevDelimiter || this._effectiveDelimiter);\n        // if format successfully parse the value, the value contains only single date\n        if (this.getFormat().parse(value)) {\n            valuesArray[0] = partsArray.join(this._effectiveDelimiter);\n            valuesArray[1] = \"\";\n        }\n        else {\n            valuesArray[0] = partsArray.slice(0, partsArray.length / 2).join(this._effectiveDelimiter);\n            valuesArray[1] = partsArray.slice(partsArray.length / 2).join(this._effectiveDelimiter);\n        }\n        return valuesArray;\n    }\n    /**\n     * Returns a UTC timestamp, representing the first date in the value string or undefined if the value is empty\n     * @private\n     */\n    _extractFirstTimestamp(value) {\n        if (!value || !this._checkValueValidity(value)) {\n            return undefined;\n        }\n        const dateStrings = this._splitValueByDelimiter(value); // at least one item guaranteed due to the checks above (non-empty and valid)\n        const parsedDate = this.getFormat().parse(dateStrings[0], true);\n        return parsedDate.getTime() / 1000;\n    }\n    /**\n     * Returns a UTC timestamp, representing the last date in the value string or undefined if the value is empty or there is just one date\n     * @private\n     */\n    _extractLastTimestamp(value) {\n        if (!value || !this._checkValueValidity(value)) {\n            return undefined;\n        }\n        const dateStrings = this._splitValueByDelimiter(value);\n        if (dateStrings[1]) {\n            const parsedDate = this.getFormat().parse(dateStrings[1], true);\n            return parsedDate.getTime() / 1000;\n        }\n        return undefined;\n    }\n    /**\n     * Builds a string value out of two UTC timestamps - this method is the counterpart to _extractFirstTimestamp/_extractLastTimestamp\n     * @private\n     */\n    _buildValue(firstDateTimestamp, lastDateTimestamp) {\n        this._prevDelimiter = this._effectiveDelimiter;\n        if (firstDateTimestamp) {\n            const firstDateString = this._getStringFromTimestamp(firstDateTimestamp * 1000);\n            if (!lastDateTimestamp) {\n                return firstDateString;\n            }\n            const lastDateString = this._getStringFromTimestamp(lastDateTimestamp * 1000);\n            return `${firstDateString} ${this._effectiveDelimiter} ${lastDateString}`;\n        }\n        return \"\";\n    }\n    /**\n     * @override\n     */\n    get _calendarPickersMode() {\n        return CalendarPickersMode.DAY_MONTH_YEAR;\n    }\n};\n__decorate([\n    property({ defaultValue: \"-\" })\n], DateRangePicker.prototype, \"delimiter\", void 0);\n__decorate([\n    property()\n], DateRangePicker.prototype, \"_tempValue\", void 0);\nDateRangePicker = DateRangePicker_1 = __decorate([\n    customElement({\n        tag: \"ui5-daterange-picker\",\n        styles: [DatePicker.styles, DateRangePickerCss],\n    })\n], DateRangePicker);\nDateRangePicker.define();\nexport default DateRangePicker;\n//# sourceMappingURL=DateRangePicker.js.map","'use client';\n\nimport '@ui5/webcomponents/dist/DateRangePicker.js';\nimport type {\n  DateRangePickerChangeEventDetail,\n  DateRangePickerInputEventDetail\n} from '@ui5/webcomponents/dist/DateRangePicker.js';\nimport type { CalendarType } from '../../enums/index.js';\nimport { ValueState } from '../../enums/index.js';\nimport type { Ui5CustomEvent, CommonProps, Ui5DomRef } from '../../interfaces/index.js';\nimport { withWebComponent } from '../../internal/withWebComponent.js';\nimport type { UI5WCSlotsNode } from '../../types/index.js';\n\ninterface DateRangePickerAttributes {\n  /**\n   * Determines the symbol which separates the dates. If not supplied, the default time interval delimiter for the current locale will be used.\n   */\n  delimiter?: string;\n  /**\n   * Defines the aria-label attribute for the component.\n   */\n  accessibleName?: string;\n  /**\n   * Receives id(or many ids) of the elements that label the component.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Determines whether the component is displayed as disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Defines the visibility of the week numbers column.\n   *\n   * **Note:** For calendars other than Gregorian, the week numbers are not displayed regardless of what is set.\n   */\n  hideWeekNumbers?: boolean;\n  /**\n   * Determines the name with which the component will be submitted in an HTML form.\n   *\n   * **Important:** For the `name` property to have effect, you must add the following import to your project: `import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n   *\n   * **Note:** When set, a native `input` HTML element will be created inside the component so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit a form.\n   */\n  name?: string;\n  /**\n   * Defines a short hint, intended to aid the user with data entry when the component has no value.\n   *\n   * **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.\n   */\n  placeholder?: string;\n  /**\n   * Determines whether the component is displayed as read-only.\n   */\n  readonly?: boolean;\n  /**\n   * Defines whether the component is required.\n   */\n  required?: boolean;\n  /**\n   * Defines a formatted date value.\n   */\n  value?: string;\n  /**\n   * Defines the value state of the component.\n   */\n  valueState?: ValueState | keyof typeof ValueState;\n  /**\n   * Determines the format, displayed in the input field.\n   */\n  formatPattern?: string;\n  /**\n   * Determines the maximum date available for selection. **Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).\n   */\n  maxDate?: string;\n  /**\n   * Determines the minimum date available for selection. **Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).\n   */\n  minDate?: string;\n  /**\n   * Sets a calendar type used for display. If not set, the calendar type of the global configuration is used.<br/>__Note:__ Calendar types other than Gregorian must be imported manually:<br />`import \"@ui5/webcomponents-localization/dist/features/calendar/{primaryCalendarType}.js\";`\n   */\n  primaryCalendarType?: CalendarType | keyof typeof CalendarType;\n  /**\n   * Defines the secondary calendar type. If not set, the calendar will only show the primary calendar type.\n   */\n  secondaryCalendarType?: CalendarType | keyof typeof CalendarType;\n}\n\nexport interface DateRangePickerDomRef extends DateRangePickerAttributes, Ui5DomRef {\n  /**\n   * Returns the end date of the currently selected range as JavaScript Date instance.\n   */\n  readonly endDateValue: Date;\n  /**\n   * Returns the start date of the currently selected range as JavaScript Date instance.\n   */\n  readonly startDateValue: Date;\n  /**\n   * Closes the picker.\n   */\n  closePicker: () => void;\n  /**\n   * Formats a Java Script date object into a string representing a locale date according to the `formatPattern` property of the DatePicker instance\n   * @param {Date} date - A Java Script date object to be formatted as string\n   * @returns {string} The date as string\n   */\n  formatValue: (date: Date) => string;\n  /**\n   * Checks if a date is between the minimum and maximum date.\n   * @param {string} [value] - A value to be checked\n   * @returns {boolean}\n   */\n  isInValidRange: (value?: string) => boolean;\n  /**\n   * Checks if the picker is open.\n   * @returns {boolean} true if the picker is open, false otherwise\n   */\n  isOpen: () => boolean;\n  /**\n   * Checks if a value is valid against the current date format of the DatePicker.\n   * @param {string} [value] - A value to be tested against the current date format\n   * @returns {boolean}\n   */\n  isValid: (value?: string) => boolean;\n  /**\n   * Opens the picker.\n   * @returns {Promise<void>} Resolves when the picker is open\n   */\n  openPicker: () => Promise<void>;\n}\n\nexport interface DateRangePickerPropTypes extends DateRangePickerAttributes, Omit<CommonProps, 'onChange' | 'onInput'> {\n  /**\n   * Defines the value state message that will be displayed as pop up under the component.\n   *\n   * **Note:** If not specified, a default text (in the respective language) will be displayed.\n   * **Note:** The `valueStateMessage` would be displayed, when the component is in `Information`, `Warning` or `Error` value state.\n   *\n   * __Note:__ This prop will be rendered as [slot](https://www.w3schools.com/tags/tag_slot.asp) (`slot=\"valueStateMessage\"`).\n   * Since you can't change the DOM order of slots when declaring them within a prop, it might prove beneficial to manually mount them as part of the component's children, especially when facing problems with the reading order of screen readers.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-handling-slots--docs).\n   */\n  valueStateMessage?: UI5WCSlotsNode;\n  /**\n   * Fired when the input operation has finished by pressing Enter or on focusout.\n   *\n   *__Note:__ This event is NOT the same as the native `onChange` [event of React](https://reactjs.org/docs/dom-elements.html#onchange). If you want to simulate that behavior, please use `onInput` instead.\n   */\n  onChange?: (event: Ui5CustomEvent<DateRangePickerDomRef, DateRangePickerChangeEventDetail>) => void;\n  /**\n   * Fired when the value of the component is changed at each key stroke.\n   */\n  onInput?: (event: Ui5CustomEvent<DateRangePickerDomRef, DateRangePickerInputEventDetail>) => void;\n}\n\n/**\n * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n *\n * __Note:__ This component is a web component developed by the UI5 Web Components’ team.\n *\n * [UI5 Web Components Storybook](https://sap.github.io/ui5-webcomponents/playground/?path=/docs/main-DateRangePicker)\n */\nconst DateRangePicker = withWebComponent<DateRangePickerPropTypes, DateRangePickerDomRef>(\n  'ui5-daterange-picker',\n  [\n    'delimiter',\n    'accessibleName',\n    'accessibleNameRef',\n    'name',\n    'placeholder',\n    'value',\n    'valueState',\n    'formatPattern',\n    'maxDate',\n    'minDate',\n    'primaryCalendarType',\n    'secondaryCalendarType'\n  ],\n  ['disabled', 'hideWeekNumbers', 'readonly', 'required'],\n  ['valueStateMessage'],\n  ['change', 'input'],\n  () => import('@ui5/webcomponents/dist/DateRangePicker.js')\n);\n\nDateRangePicker.displayName = 'DateRangePicker';\n\nDateRangePicker.defaultProps = {\n  delimiter: '-',\n  valueState: ValueState.None\n};\n\nexport { DateRangePicker };\n"],"file":"assets/index-d0123849.js"}