{"version":3,"file":"BarChart.stories-1f4645df.js","sources":["../../packages/charts/src/hooks/useLongestYAxisLabelBar.ts","../../packages/charts/src/components/BarChart/BarChart.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { getValueByDataKey } from 'recharts/lib/util/ChartUtils.js';\nimport { defaultMaxYAxisWidth } from '../internal/defaults.js';\nimport { getTextWidth } from '../internal/Utils.js';\n\nexport const useLongestYAxisLabelBar = (dataset: unknown[], elements, legendPosition = ''): [number[], object] =>\n  useMemo(() => {\n    let axisWidths = Array(elements.length).fill(0);\n    let marginLeft = 0;\n\n    if (dataset instanceof Array && elements) {\n      const resolveAllMeasureLabels = (item): string[] => {\n        return elements.map((elementConfig) =>\n          elementConfig.formatter(getValueByDataKey(item, elementConfig.accessor, ''))\n        );\n      };\n\n      const allFormattedDataLabels = dataset.map(resolveAllMeasureLabels);\n      allFormattedDataLabels.forEach((dimensionLabels) => {\n        dimensionLabels.forEach((label, dimensionIndex) => {\n          axisWidths[dimensionIndex] = Math.max(getTextWidth(label), axisWidths[dimensionIndex]);\n        });\n      });\n\n      axisWidths = axisWidths.map((length) => Math.min(defaultMaxYAxisWidth, length));\n      marginLeft = axisWidths.reduce((acc, val) => acc + val, 0);\n    }\n    if (legendPosition === 'middle') {\n      return [axisWidths, { width: 'auto' }];\n    }\n    return [axisWidths, { marginLeft, maxWidth: `calc(100% - ${marginLeft + 8}px)` }];\n  }, [dataset, elements]);\n","'use client';\n\nimport { enrichEventWithDetails, ThemingParameters, useIsRTL, useSyncRef } from '@ui5/webcomponents-react-base';\nimport type { CSSProperties } from 'react';\nimport React, { forwardRef, useCallback } from 'react';\nimport {\n  Bar,\n  BarChart as BarChartLib,\n  Brush,\n  CartesianGrid,\n  Cell,\n  LabelList,\n  Legend,\n  ReferenceLine,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { getValueByDataKey } from 'recharts/lib/util/ChartUtils.js';\nimport { useCancelAnimationFallback } from '../../hooks/useCancelAnimationFallback.js';\nimport { useChartMargin } from '../../hooks/useChartMargin.js';\nimport { useLabelFormatter } from '../../hooks/useLabelFormatter.js';\nimport { useLegendItemClick } from '../../hooks/useLegendItemClick.js';\nimport { useLongestYAxisLabelBar } from '../../hooks/useLongestYAxisLabelBar.js';\nimport { useObserveXAxisHeights } from '../../hooks/useObserveXAxisHeights.js';\nimport { useOnClickInternal } from '../../hooks/useOnClickInternal.js';\nimport { usePrepareDimensionsAndMeasures } from '../../hooks/usePrepareDimensionsAndMeasures.js';\nimport { useTooltipFormatter } from '../../hooks/useTooltipFormatter.js';\nimport type { IChartBaseProps } from '../../interfaces/IChartBaseProps.js';\nimport type { IChartDimension } from '../../interfaces/IChartDimension.js';\nimport type { IChartMeasure } from '../../interfaces/IChartMeasure.js';\nimport { ChartContainer } from '../../internal/ChartContainer.js';\nimport { ChartDataLabel } from '../../internal/ChartDataLabel.js';\nimport { defaultFormatter } from '../../internal/defaults.js';\nimport { tickLineConfig, tooltipContentStyle, tooltipFillOpacity } from '../../internal/staticProps.js';\nimport { getCellColors, resolvePrimaryAndSecondaryMeasures } from '../../internal/Utils.js';\nimport { XAxisTicks } from '../../internal/XAxisTicks.js';\nimport { YAxisTicks } from '../../internal/YAxisTicks.js';\nimport { BarChartPlaceholder } from './Placeholder.js';\n\nconst dimensionDefaults = {\n  formatter: defaultFormatter\n};\n\nconst measureDefaults = {\n  formatter: defaultFormatter,\n  opacity: 1\n};\n\nconst valueAccessor =\n  (attribute) =>\n  ({ payload }) => {\n    return getValueByDataKey(payload, attribute);\n  };\n\ninterface MeasureConfig extends IChartMeasure {\n  /**\n   * Bar Width\n   * @default auto\n   */\n  width?: number;\n  /**\n   * Bar Opacity\n   * @default 1\n   */\n  opacity?: number;\n  /**\n   * Bar Stack ID\n   * @default undefined\n   */\n  stackId?: string;\n  /**\n   * Highlight color of defined elements\n   * @param value {string | number} Current value of the highlighted measure\n   * @param measure {IChartMeasure} Current measure object\n   * @param dataElement {object} Current data element\n   */\n  highlightColor?: (value: number, measure: MeasureConfig, dataElement: Record<string, any>) => CSSProperties['color'];\n}\n\ninterface DimensionConfig extends IChartDimension {\n  /**\n   * Interval of dimension axis labels\n   * @default 0\n   */\n  interval?: number;\n}\n\nexport interface BarChartProps extends IChartBaseProps {\n  /**\n   * An array of config objects. Each object will define one dimension of the chart.\n   *\n   * **Required Properties**\n   * - `accessor`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * **Optional Properties**\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `interval`: number that controls how many ticks are rendered on the x axis\n   *\n   */\n  dimensions: DimensionConfig[];\n  /**\n   * An array of config objects. Each object is defining one bar in the chart.\n   *\n   * **Required properties**\n   * - `accessor`: string containing the path to the dataset key this bar should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * **Optional properties**\n   *\n   * - `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n   * - `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `hideDataLabel`: flag whether the data labels should be hidden in the chart for this bar.\n   * - `DataLabel`: a custom component to be used for the data label\n   * - `width`: bar width, defaults to `auto`\n   * - `opacity`: bar opacity, defaults to `1`\n   * - `stackId`: bars with the same stackId will be stacked\n   * - `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   *    defined condition. Overwrites code>color</code> of the element.\n   *\n   */\n  measures: MeasureConfig[];\n}\n\n/**\n * A `BarChart` is a data visualization where each category is represented by a rectangle, with the width of the rectangle being proportional to the values being plotted.\n */\nconst BarChart = forwardRef<HTMLDivElement, BarChartProps>((props, ref) => {\n  const {\n    loading,\n    dataset,\n    noLegend,\n    noAnimation,\n    tooltipConfig,\n    onDataPointClick,\n    onLegendClick,\n    onClick,\n    style,\n    className,\n    slot,\n    syncId,\n    ChartPlaceholder,\n    children,\n    ...rest\n  } = props;\n\n  const chartConfig = {\n    margin: {},\n    yAxisVisible: true,\n    xAxisVisible: true,\n    gridStroke: ThemingParameters.sapList_BorderColor,\n    gridHorizontal: true,\n    gridVertical: false,\n    legendPosition: 'bottom',\n    legendHorizontalAlign: 'left',\n    barGap: 3,\n    zoomingTool: false,\n    resizeDebounce: 250,\n    yAxisConfig: {},\n    xAxisConfig: {},\n    secondXAxisConfig: {},\n    ...props.chartConfig\n  };\n  const referenceLine = chartConfig.referenceLine;\n\n  const { dimensions, measures } = usePrepareDimensionsAndMeasures(\n    props.dimensions,\n    props.measures,\n    dimensionDefaults,\n    measureDefaults\n  );\n\n  const tooltipValueFormatter = useTooltipFormatter(measures);\n\n  const primaryDimension = dimensions[0];\n  const { primaryMeasure, secondaryMeasure } = resolvePrimaryAndSecondaryMeasures(\n    measures,\n    chartConfig?.secondYAxis?.dataKey\n  );\n\n  const dataKeys = measures.map(({ accessor }) => accessor);\n  const colorSecondY = chartConfig.secondYAxis\n    ? dataKeys.findIndex((key) => key === chartConfig.secondYAxis?.dataKey)\n    : 0;\n\n  const [componentRef, chartRef] = useSyncRef<any>(ref);\n\n  const onItemLegendClick = useLegendItemClick(onLegendClick);\n  const labelFormatter = useLabelFormatter(primaryDimension);\n\n  const onDataPointClickInternal = useCallback(\n    (payload, i, event) => {\n      if (payload && onDataPointClick) {\n        const value = payload.value.length ? payload.value[1] - payload.value[0] : payload.value;\n        onDataPointClick(\n          enrichEventWithDetails(event, {\n            dataKey: Object.keys(payload)\n              .filter((key) => key !== 'value')\n              .find((key) => payload[key] === value),\n            value,\n            payload: payload.payload,\n            dataIndex: i\n          })\n        );\n      }\n    },\n    [onDataPointClick]\n  );\n\n  const onClickInternal = useOnClickInternal(onClick);\n\n  const isBigDataSet = dataset?.length > 30;\n  const primaryDimensionAccessor = primaryDimension?.accessor;\n\n  const [width, legendPosition] = useLongestYAxisLabelBar(dataset, dimensions, chartConfig.legendPosition);\n  const marginChart = useChartMargin(chartConfig.margin, chartConfig.zoomingTool);\n  const [xAxisHeight] = useObserveXAxisHeights(chartRef, 1);\n  const isRTL = useIsRTL(chartRef);\n\n  const { isMounted, handleBarAnimationStart, handleBarAnimationEnd } = useCancelAnimationFallback(noAnimation);\n\n  const { chartConfig: _0, dimensions: _1, measures: _2, ...propsWithoutOmitted } = rest;\n  return (\n    <ChartContainer\n      dataset={dataset}\n      loading={loading}\n      Placeholder={ChartPlaceholder ?? BarChartPlaceholder}\n      ref={componentRef}\n      style={style}\n      className={className}\n      slot={slot}\n      resizeDebounce={chartConfig.resizeDebounce}\n      {...propsWithoutOmitted}\n    >\n      <BarChartLib\n        syncId={syncId}\n        onClick={onClickInternal}\n        stackOffset=\"sign\"\n        margin={marginChart}\n        layout=\"vertical\"\n        data={dataset}\n        barGap={chartConfig.barGap}\n        className={\n          typeof onDataPointClick === 'function' || typeof onClick === 'function' ? 'has-click-handler' : undefined\n        }\n      >\n        <CartesianGrid\n          vertical={chartConfig.gridVertical}\n          horizontal={chartConfig.gridHorizontal}\n          stroke={chartConfig.gridStroke}\n        />\n        {chartConfig.xAxisVisible && (\n          <XAxis\n            interval={0}\n            type=\"number\"\n            tick={<XAxisTicks config={primaryMeasure} />}\n            axisLine={chartConfig.xAxisVisible}\n            tickLine={tickLineConfig}\n            tickFormatter={primaryMeasure?.formatter}\n            height={xAxisHeight}\n            reversed={isRTL}\n            {...chartConfig.xAxisConfig}\n          />\n        )}\n        {chartConfig.secondYAxis?.dataKey && (\n          <XAxis\n            dataKey={chartConfig.secondYAxis.dataKey}\n            axisLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            tick={\n              <XAxisTicks\n                config={secondaryMeasure}\n                secondYAxisConfig={{\n                  color: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n                }}\n              />\n            }\n            tickLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            label={{ value: chartConfig.secondYAxis.name, offset: 2, angle: +90, position: 'center' }}\n            orientation=\"top\"\n            interval={0}\n            xAxisId=\"secondary\"\n            type=\"number\"\n            {...chartConfig.secondXAxisConfig}\n          />\n        )}\n        {chartConfig.yAxisVisible &&\n          dimensions.map((dimension, index) => {\n            return (\n              <YAxis\n                interval={dimension?.interval ?? (isBigDataSet ? 'preserveStart' : 0)}\n                type=\"category\"\n                key={dimension.accessor}\n                dataKey={dimension.accessor}\n                tick={<YAxisTicks config={dimension} />}\n                tickLine={index < 1}\n                axisLine={index < 1}\n                yAxisId={index}\n                width={width[index]}\n                allowDuplicatedCategory={index === 0}\n                orientation={isRTL ? 'right' : 'left'}\n                {...chartConfig.yAxisConfig}\n              />\n            );\n          })}\n        {isMounted &&\n          measures.map((element, index) => {\n            return (\n              <Bar\n                stackId={element.stackId}\n                fillOpacity={element.opacity}\n                key={element.accessor}\n                name={element.label ?? element.accessor}\n                strokeOpacity={element.opacity}\n                type=\"monotone\"\n                dataKey={element.accessor}\n                fill={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n                stroke={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n                barSize={element.width}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                onClick={onDataPointClickInternal}\n                isAnimationActive={noAnimation === false}\n                onAnimationStart={handleBarAnimationStart}\n                onAnimationEnd={handleBarAnimationEnd}\n              >\n                <LabelList\n                  data={dataset}\n                  valueAccessor={valueAccessor(element.accessor)}\n                  content={<ChartDataLabel config={element} chartType=\"bar\" position={'insideRight'} />}\n                />\n                {dataset.map((data, i) => {\n                  return (\n                    <Cell\n                      key={i}\n                      fill={getCellColors(element, data, index)}\n                      stroke={getCellColors(element, data, index)}\n                    />\n                  );\n                })}\n              </Bar>\n            );\n          })}\n        {!noLegend && (\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          <Legend\n            verticalAlign={chartConfig.legendPosition}\n            align={chartConfig.legendHorizontalAlign}\n            onClick={onItemLegendClick}\n            wrapperStyle={legendPosition}\n          />\n        )}\n        {referenceLine && (\n          <ReferenceLine\n            {...referenceLine}\n            stroke={referenceLine?.color ?? referenceLine?.stroke}\n            x={referenceLine?.value ?? referenceLine?.x}\n            label={referenceLine?.label}\n          />\n        )}\n        {/*ToDo: remove conditional rendering once `active` is working again (https://github.com/recharts/recharts/issues/2703)*/}\n        {tooltipConfig?.active !== false && (\n          <Tooltip\n            cursor={tooltipFillOpacity}\n            formatter={tooltipValueFormatter}\n            contentStyle={tooltipContentStyle}\n            labelFormatter={labelFormatter}\n            {...tooltipConfig}\n          />\n        )}\n        {chartConfig.zoomingTool && (\n          <Brush\n            y={10}\n            dataKey={primaryDimensionAccessor}\n            tickFormatter={primaryDimension?.formatter}\n            stroke={ThemingParameters.sapObjectHeader_BorderColor}\n            travellerWidth={10}\n            height={20}\n          />\n        )}\n        {children}\n      </BarChartLib>\n    </ChartContainer>\n  );\n});\n\nBarChart.defaultProps = {\n  noLegend: false,\n  noAnimation: false\n};\n\nBarChart.displayName = 'BarChart';\n\nexport { BarChart };\n"],"names":["useLongestYAxisLabelBar","dataset","elements","legendPosition","useMemo","axisWidths","marginLeft","resolveAllMeasureLabels","item","elementConfig","getValueByDataKey","dimensionLabels","label","dimensionIndex","getTextWidth","length","defaultMaxYAxisWidth","acc","val","dimensionDefaults","defaultFormatter","measureDefaults","valueAccessor","attribute","payload","BarChart","forwardRef","props","ref","loading","noLegend","noAnimation","tooltipConfig","onDataPointClick","onLegendClick","onClick","style","className","slot","syncId","ChartPlaceholder","children","rest","chartConfig","ThemingParameters","referenceLine","dimensions","measures","usePrepareDimensionsAndMeasures","tooltipValueFormatter","useTooltipFormatter","primaryDimension","primaryMeasure","secondaryMeasure","resolvePrimaryAndSecondaryMeasures","_a","dataKeys","accessor","colorSecondY","key","componentRef","chartRef","useSyncRef","onItemLegendClick","useLegendItemClick","labelFormatter","useLabelFormatter","onDataPointClickInternal","useCallback","i","event","value","enrichEventWithDetails","onClickInternal","useOnClickInternal","isBigDataSet","primaryDimensionAccessor","width","marginChart","useChartMargin","xAxisHeight","useObserveXAxisHeights","isRTL","useIsRTL","isMounted","handleBarAnimationStart","handleBarAnimationEnd","useCancelAnimationFallback","_0","_1","_2","propsWithoutOmitted","jsx","ChartContainer","BarChartPlaceholder","jsxs","BarChartLib","CartesianGrid","XAxis","XAxisTicks","tickLineConfig","_b","dimension","index","YAxis","YAxisTicks","element","Bar","LabelList","ChartDataLabel","data","Cell","getCellColors","Legend","ReferenceLine","Tooltip","tooltipFillOpacity","tooltipContentStyle","Brush"],"mappings":"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"}