{"version":3,"mappings":"yNAsJA,MAAAA,EAAAC,EAAe,aACb,4FAC+F,iEAC5B,oBAChD,0DACwC,IAAAC,EAAA,sJAE7D,EAEAF,EAAA,qBAEAA,EAAA,cAAsB,MAAAG,EAAA,KACF,eAAAC,EAAA,MAEpB","names":["Dialog","withWebComponent","__vitePreload","ValueState","PopupAccessibleRole"],"sources":["../../packages/main/src/webComponents/Dialog/index.tsx"],"sourcesContent":["'use client';\n\nimport '@ui5/webcomponents/dist/Dialog.js';\nimport type { DialogBeforeCloseEventDetail } from '@ui5/webcomponents/dist/Dialog.js';\nimport type { ReactNode } from 'react';\nimport { ValueState, PopupAccessibleRole } from '../../enums/index.js';\nimport type { Ui5CustomEvent, CommonProps, Ui5DomRef } from '../../interfaces/index.js';\nimport { withWebComponent } from '../../internal/withWebComponent.js';\nimport type { UI5WCSlotsNode } from '../../types/index.js';\n\ninterface DialogAttributes {\n  /**\n   * Determines whether the component is draggable. If this property is set to true, the Dialog will be draggable by its header.\n   *\n   * **Note:** The component can be draggable only in desktop mode.\n   *\n   * **Note:** This property overrides the default HTML \"draggable\" attribute native behavior. When \"draggable\" is set to true, the native browser \"draggable\" behavior is prevented and only the Dialog custom logic (\"draggable by its header\") works.\n   */\n  draggable?: boolean;\n  /**\n   * Defines the header text.\n   *\n   * **Note:** If `header` slot is provided, the `headerText` is ignored.\n   */\n  headerText?: string;\n  /**\n   * Configures the component to be resizable. If this property is set to true, the Dialog will have a resize handle in its bottom right corner in LTR languages. In RTL languages, the resize handle will be placed in the bottom left corner.\n   *\n   * **Note:** The component can be resizable only in desktop mode.\n   * **Note:** Upon resizing, externally defined height and width styling will be ignored.\n   */\n  resizable?: boolean;\n  /**\n   * Defines the state of the `Dialog`.\n   * **Note:** If `\"Error\"` and `\"Warning\"` state is set, it will change the accessibility role to \"alertdialog\", if the accessibleRole property is set to `\"Dialog\"`.\n   */\n  state?: ValueState | keyof typeof ValueState;\n  /**\n   * Determines whether the component should be stretched to fullscreen.\n   *\n   * **Note:** The component will be stretched to approximately 90% of the viewport.\n   */\n  stretch?: boolean;\n  /**\n   * Defines the accessible name of the component.\n   */\n  accessibleName?: string;\n  /**\n   * Defines the IDs of the elements that label the component.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Allows setting a custom role.\n   */\n  accessibleRole?: PopupAccessibleRole | keyof typeof PopupAccessibleRole;\n  /**\n   * Defines the ID of the HTML Element, which will get the initial focus.\n   */\n  initialFocus?: string;\n  /**\n   * Indicates if the element is open\n   */\n  open?: boolean;\n  /**\n   * Defines if the focus should be returned to the previously focused element, when the popup closes.\n   */\n  preventFocusRestore?: boolean;\n}\n\nexport interface DialogDomRef extends DialogAttributes, Omit<Ui5DomRef, 'draggable'> {\n  /**\n   * Shows the dialog.\n   * @param {boolean} [preventInitialFocus] - Prevents applying the focus inside the popup\n   * @returns {Promise<void>} Resolves when the dialog is open\n   */\n  show: (preventInitialFocus?: boolean) => Promise<void>;\n  /**\n   * Focuses the element denoted by `initialFocus`, if provided, or the first focusable element otherwise.\n   * @returns {Promise<void>} Promise that resolves when the focus is applied\n   */\n  applyFocus: () => Promise<void>;\n  /**\n   * Closes the popup.\n   */\n  close: () => void;\n  /**\n   * Tells if the component is opened\n   * @returns {boolean}\n   */\n  isOpen: () => boolean;\n}\n\nexport interface DialogPropTypes extends DialogAttributes, Omit<CommonProps, 'draggable'> {\n  /**\n   * Defines the footer HTML Element.\n   *\n   * **Note:** When a `Bar` is used in the footer, you should remove the default dialog's paddings.\n   *\n   * __Note:__ The content of the prop will be rendered into a [&lt;slot&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot) by assigning the respective [slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot) attribute (`slot=\"footer\"`).\n   * Since you can't change the DOM order of slots when declaring them within a prop, it might prove beneficial to manually mount them as part of the component's children, especially when facing problems with the reading order of screen readers.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-handling-slots--docs).\n   */\n  footer?: UI5WCSlotsNode | UI5WCSlotsNode[];\n  /**\n   * Defines the header HTML Element.\n   *\n   * **Note:** When a `Bar` is used in the header, you should remove the default dialog's paddings.\n   *\n   * **Note:** If `header` slot is provided, the labelling of the dialog is a responsibility of the application developer. `accessibleName` should be used.\n   *\n   * __Note:__ The content of the prop will be rendered into a [&lt;slot&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot) by assigning the respective [slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot) attribute (`slot=\"header\"`).\n   * Since you can't change the DOM order of slots when declaring them within a prop, it might prove beneficial to manually mount them as part of the component's children, especially when facing problems with the reading order of screen readers.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-handling-slots--docs).\n   */\n  header?: UI5WCSlotsNode | UI5WCSlotsNode[];\n  /**\n   * Defines the content of the Popup.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Fired after the component is closed. **This event does not bubble.**\n   */\n  onAfterClose?: (event: Ui5CustomEvent<DialogDomRef>) => void;\n  /**\n   * Fired after the component is opened. **This event does not bubble.**\n   */\n  onAfterOpen?: (event: Ui5CustomEvent<DialogDomRef>) => void;\n  /**\n   * Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. **This event does not bubble.**\n   */\n  onBeforeClose?: (event: Ui5CustomEvent<DialogDomRef, DialogBeforeCloseEventDetail>) => void;\n  /**\n   * Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. **This event does not bubble.**\n   */\n  onBeforeOpen?: (event: Ui5CustomEvent<DialogDomRef>) => void;\n}\n\n/**\n * The `Dialog` component is used to temporarily display some information in a size-limited window in front of the regular app screen. It is used to prompt the user for an action or a confirmation. The `Dialog` interrupts the current app processing as it is the only focused UI element and the main screen is dimmed/blocked. The dialog combines concepts known from other technologies where the windows have names such as dialog box, dialog window, pop-up, pop-up window, alert box, or message box.\n *\n * The `Dialog` is modal, which means that an user action is required before it is possible to return to the parent window. To open multiple dialogs, each dialog element should be separate in the markup. This will ensure the correct modal behavior. Avoid nesting dialogs within each other. The content of the `Dialog` is fully customizable.\n *\n * __Note:__ This component is a web component developed by the UI5 Web Componentsâ€™ team.\n *\n * [UI5 Web Components Storybook](https://sap.github.io/ui5-webcomponents/playground/?path=/docs/main-Dialog)\n */\nconst Dialog = withWebComponent<DialogPropTypes, DialogDomRef>(\n  'ui5-dialog',\n  ['headerText', 'state', 'accessibleName', 'accessibleNameRef', 'accessibleRole', 'initialFocus'],\n  ['draggable', 'resizable', 'stretch', 'open', 'preventFocusRestore'],\n  ['footer', 'header'],\n  ['after-close', 'after-open', 'before-close', 'before-open'],\n  () => import('@ui5/webcomponents/dist/Dialog.js')\n);\n\nDialog.displayName = 'Dialog';\n\nDialog.defaultProps = {\n  state: ValueState.None,\n  accessibleRole: PopupAccessibleRole.Dialog\n};\n\nexport { Dialog };\n"],"file":"assets/index-5GRnITt1.js"}