{"version":3,"file":"ColumnChart.stories-eb1192b4.js","sources":["../../packages/charts/src/components/ColumnChart/Placeholder.tsx","../../packages/charts/src/components/ColumnChart/ColumnChart.tsx"],"sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React from 'react';\nimport ContentLoader from 'react-content-loader/dist/react-content-loader.es.js';\n\nexport const ColumnChartPlaceholder = (props) => {\n  return (\n    <ContentLoader\n      viewBox=\"0 0 165 145\"\n      preserveAspectRatio=\"xMidYMid meet\"\n      width=\"100%\"\n      height=\"100%\"\n      speed={2}\n      backgroundColor={ThemingParameters.sapContent_ImagePlaceholderBackground}\n      foregroundColor={ThemingParameters.sapContent_ImagePlaceholderForegroundColor}\n      backgroundOpacity={ThemingParameters.sapContent_DisabledOpacity as any}\n      {...props}\n    >\n      <rect x=\"10\" y=\"135\" width=\"135\" height=\"1\" />\n      <rect x=\"20\" y=\"50\" width=\"15\" height=\"85\" />\n      <rect x=\"40\" y=\"18\" width=\"15\" height=\"117\" />\n      <rect x=\"60\" y=\"68\" width=\"15\" height=\"67\" />\n      <rect x=\"80\" y=\"60\" width=\"15\" height=\"75\" />\n      <rect x=\"100\" y=\"10\" width=\"15\" height=\"125\" />\n      <rect x=\"120\" y=\"75\" width=\"15\" height=\"60\" />\n    </ContentLoader>\n  );\n};\n","'use client';\n\nimport { enrichEventWithDetails, ThemingParameters, useIsRTL, useSyncRef } from '@ui5/webcomponents-react-base';\nimport type { CSSProperties } from 'react';\nimport React, { forwardRef, useCallback } from 'react';\nimport {\n  Bar as Column,\n  BarChart as ColumnChartLib,\n  Brush,\n  CartesianGrid,\n  Cell,\n  LabelList,\n  Legend,\n  ReferenceLine,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { getValueByDataKey } from 'recharts/lib/util/ChartUtils.js';\nimport { useCancelAnimationFallback } from '../../hooks/useCancelAnimationFallback.js';\nimport { useChartMargin } from '../../hooks/useChartMargin.js';\nimport { useLabelFormatter } from '../../hooks/useLabelFormatter.js';\nimport { useLegendItemClick } from '../../hooks/useLegendItemClick.js';\nimport { useLongestYAxisLabel } from '../../hooks/useLongestYAxisLabel.js';\nimport { useObserveXAxisHeights } from '../../hooks/useObserveXAxisHeights.js';\nimport { useOnClickInternal } from '../../hooks/useOnClickInternal.js';\nimport { usePrepareDimensionsAndMeasures } from '../../hooks/usePrepareDimensionsAndMeasures.js';\nimport { useTooltipFormatter } from '../../hooks/useTooltipFormatter.js';\nimport type { IChartBaseProps } from '../../interfaces/IChartBaseProps.js';\nimport type { IChartDimension } from '../../interfaces/IChartDimension.js';\nimport type { IChartMeasure } from '../../interfaces/IChartMeasure.js';\nimport { ChartContainer } from '../../internal/ChartContainer.js';\nimport { ChartDataLabel } from '../../internal/ChartDataLabel.js';\nimport { defaultFormatter } from '../../internal/defaults.js';\nimport { tickLineConfig, tooltipContentStyle, tooltipFillOpacity } from '../../internal/staticProps.js';\nimport { getCellColors, resolvePrimaryAndSecondaryMeasures } from '../../internal/Utils.js';\nimport { XAxisTicks } from '../../internal/XAxisTicks.js';\nimport { YAxisTicks } from '../../internal/YAxisTicks.js';\nimport { ColumnChartPlaceholder } from './Placeholder.js';\n\ninterface MeasureConfig extends IChartMeasure {\n  /**\n   * Column Width\n   */\n  width?: number;\n  /**\n   * Column Opacity\n   */\n  opacity?: number;\n  /**\n   * column Stack ID\n   * @default undefined\n   */\n  stackId?: string;\n  /**\n   * Highlight color of defined elements\n   * @param value {string | number} Current value of the highlighted measure\n   * @param measure {IChartMeasure} Current measure object\n   * @param dataElement {object} Current data element\n   */\n  highlightColor?: (value: number, measure: MeasureConfig, dataElement: Record<string, any>) => CSSProperties['color'];\n}\n\ninterface DimensionConfig extends IChartDimension {\n  /**\n   * Interval of axis label\n   * @default 0\n   */\n  interval?: number;\n}\n\nexport interface ColumnChartProps extends IChartBaseProps {\n  /**\n   * An array of config objects. Each object will define one dimension of the chart.\n   *\n   * **Required Properties**\n   * - `accessor`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * **Optional Properties**\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `interval`: number that controls how many ticks are rendered on the x axis\n   *\n   */\n  dimensions: DimensionConfig[];\n  /**\n   * An array of config objects. Each object is defining one column in the chart.\n   *\n   * **Required properties**\n   * - `accessor`: string containing the path to the dataset key this column should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * **Optional properties**\n   *\n   * - `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n   * - `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n   * - `DataLabel`: a custom component to be used for the data label\n   * - `width`: column width, defaults to `auto`\n   * - `opacity`: column opacity, defaults to `1`\n   * - `stackId`: columns with the same stackId will be stacked\n   * - `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   *    defined condition. Overwrites code>color</code> of the element.\n   *\n   */\n  measures: MeasureConfig[];\n}\n\nconst dimensionDefaults = {\n  formatter: defaultFormatter\n};\n\nconst measureDefaults = {\n  formatter: defaultFormatter,\n  opacity: 1\n};\n\nconst valueAccessor =\n  (attribute) =>\n  ({ payload }) => {\n    return getValueByDataKey(payload, attribute);\n  };\n\n/**\n * A `ColumnChart` is a data visualization where each category is represented by a rectangle, with the height of the rectangle being proportional to the values being plotted.\n */\nconst ColumnChart = forwardRef<HTMLDivElement, ColumnChartProps>((props, ref) => {\n  const {\n    loading,\n    dataset,\n    noLegend,\n    noAnimation,\n    tooltipConfig,\n    onDataPointClick,\n    onLegendClick,\n    onClick,\n    style,\n    className,\n    slot,\n    ChartPlaceholder,\n    syncId,\n    children,\n    ...rest\n  } = props;\n\n  const chartConfig = {\n    yAxisVisible: false,\n    xAxisVisible: true,\n    gridStroke: ThemingParameters.sapList_BorderColor,\n    gridHorizontal: true,\n    gridVertical: false,\n    legendPosition: 'bottom',\n    legendHorizontalAlign: 'left',\n    barGap: 3,\n    zoomingTool: false,\n    resizeDebounce: 250,\n    yAxisConfig: {},\n    xAxisConfig: {},\n    secondYAxisConfig: {},\n    ...props.chartConfig\n  };\n  const { referenceLine } = chartConfig;\n\n  const { dimensions, measures } = usePrepareDimensionsAndMeasures(\n    props.dimensions,\n    props.measures,\n    dimensionDefaults,\n    measureDefaults\n  );\n\n  const tooltipValueFormatter = useTooltipFormatter(measures);\n\n  const [yAxisWidth, legendPosition] = useLongestYAxisLabel(dataset, measures, chartConfig.legendPosition);\n\n  const primaryDimension = dimensions[0];\n  const { primaryMeasure, secondaryMeasure } = resolvePrimaryAndSecondaryMeasures(\n    measures,\n    chartConfig?.secondYAxis?.dataKey\n  );\n\n  const labelFormatter = useLabelFormatter(primaryDimension);\n  const [componentRef, chartRef] = useSyncRef<any>(ref);\n\n  const dataKeys = measures.map(({ accessor }) => accessor);\n  const colorSecondY = chartConfig.secondYAxis\n    ? dataKeys.findIndex((key) => key === chartConfig.secondYAxis?.dataKey)\n    : 0;\n\n  const onItemLegendClick = useLegendItemClick(onLegendClick);\n\n  const onDataPointClickInternal = useCallback(\n    (payload, eventOrIndex, event) => {\n      if (payload && onDataPointClick) {\n        onDataPointClick(\n          enrichEventWithDetails(event, {\n            dataKey: Object.keys(payload).filter((key) =>\n              payload.value.length\n                ? payload[key] === payload.value[1] - payload.value[0]\n                : payload[key] === payload.value && key !== 'value'\n            )[0],\n            value: payload.value.length ? payload.value[1] - payload.value[0] : payload.value,\n            dataIndex: eventOrIndex,\n            payload: payload.payload\n          })\n        );\n      }\n    },\n    [onDataPointClick]\n  );\n\n  const onClickInternal = useOnClickInternal(onClick);\n\n  const isBigDataSet = dataset?.length > 30 ?? false;\n  const primaryDimensionAccessor = primaryDimension?.accessor;\n\n  const marginChart = useChartMargin(chartConfig.margin, chartConfig.zoomingTool);\n  const xAxisHeights = useObserveXAxisHeights(chartRef, props.dimensions.length);\n  const isRTL = useIsRTL(chartRef);\n  const { chartConfig: _0, dimensions: _1, measures: _2, ...propsWithoutOmitted } = rest;\n\n  const { isMounted, handleBarAnimationStart, handleBarAnimationEnd } = useCancelAnimationFallback(noAnimation);\n\n  return (\n    <ChartContainer\n      dataset={dataset}\n      loading={loading}\n      Placeholder={ChartPlaceholder ?? ColumnChartPlaceholder}\n      ref={componentRef}\n      style={style}\n      className={className}\n      slot={slot}\n      resizeDebounce={chartConfig.resizeDebounce}\n      {...propsWithoutOmitted}\n    >\n      <ColumnChartLib\n        syncId={syncId}\n        onClick={onClickInternal}\n        stackOffset=\"sign\"\n        margin={marginChart}\n        data={dataset}\n        barGap={chartConfig.barGap}\n        className={\n          typeof onDataPointClick === 'function' || typeof onClick === 'function' ? 'has-click-handler' : undefined\n        }\n      >\n        <CartesianGrid\n          vertical={chartConfig.gridVertical}\n          horizontal={chartConfig.gridHorizontal}\n          stroke={chartConfig.gridStroke}\n        />\n        {chartConfig.xAxisVisible &&\n          dimensions.map((dimension, index) => {\n            return (\n              <XAxis\n                key={dimension.accessor}\n                dataKey={dimension.accessor}\n                xAxisId={index}\n                interval={dimension?.interval ?? (isBigDataSet ? 'preserveStart' : 0)}\n                tick={<XAxisTicks config={dimension} />}\n                tickLine={index < 1}\n                axisLine={index < 1}\n                height={xAxisHeights[index]}\n                allowDuplicatedCategory={index === 0}\n                reversed={isRTL}\n                {...chartConfig.xAxisConfig}\n              />\n            );\n          })}\n        <YAxis\n          orientation={isRTL === true ? 'right' : 'left'}\n          axisLine={chartConfig.yAxisVisible}\n          tickLine={tickLineConfig}\n          yAxisId=\"left\"\n          interval={0}\n          tick={<YAxisTicks config={primaryMeasure} />}\n          width={yAxisWidth}\n          {...chartConfig.yAxisConfig}\n        />\n        {chartConfig.secondYAxis?.dataKey && (\n          <YAxis\n            dataKey={chartConfig.secondYAxis.dataKey}\n            axisLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            tick={\n              <YAxisTicks\n                config={secondaryMeasure}\n                secondYAxisConfig={{\n                  color: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n                }}\n              />\n            }\n            tickLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            label={{ value: chartConfig.secondYAxis.name, offset: 2, angle: +90, position: 'center' }}\n            orientation={isRTL === true ? 'left' : 'right'}\n            yAxisId=\"right\"\n            interval={0}\n            {...chartConfig.secondYAxisConfig}\n          />\n        )}\n        {isMounted &&\n          measures.map((element, index) => {\n            return (\n              <Column\n                yAxisId={chartConfig.secondYAxis?.dataKey === element.accessor ? 'right' : 'left'}\n                stackId={element.stackId}\n                fillOpacity={element.opacity}\n                key={element.accessor}\n                name={element.label ?? element.accessor}\n                strokeOpacity={element.opacity}\n                type=\"monotone\"\n                dataKey={element.accessor}\n                fill={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n                stroke={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n                barSize={element.width}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                onClick={onDataPointClickInternal}\n                isAnimationActive={noAnimation === false}\n                onAnimationStart={handleBarAnimationStart}\n                onAnimationEnd={handleBarAnimationEnd}\n              >\n                <LabelList\n                  data={dataset}\n                  valueAccessor={valueAccessor(element.accessor)}\n                  content={<ChartDataLabel config={element} chartType=\"column\" position={'insideTop'} />}\n                />\n                {dataset.map((data, i) => {\n                  return (\n                    <Cell\n                      key={i}\n                      fill={getCellColors(element, data, index)}\n                      stroke={getCellColors(element, data, index)}\n                    />\n                  );\n                })}\n              </Column>\n            );\n          })}\n        {!noLegend && (\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          <Legend\n            verticalAlign={chartConfig.legendPosition}\n            align={chartConfig.legendHorizontalAlign}\n            onClick={onItemLegendClick}\n            wrapperStyle={legendPosition}\n          />\n        )}\n        {referenceLine && (\n          <ReferenceLine\n            {...referenceLine}\n            stroke={referenceLine?.color ?? referenceLine?.stroke}\n            y={referenceLine?.value ?? referenceLine?.y}\n            yAxisId={referenceLine?.yAxisId ?? 'left'}\n            label={referenceLine?.label}\n          />\n        )}\n        {/*ToDo: remove conditional rendering once `active` is working again (https://github.com/recharts/recharts/issues/2703)*/}\n        {tooltipConfig?.active !== false && (\n          <Tooltip\n            cursor={tooltipFillOpacity}\n            formatter={tooltipValueFormatter}\n            contentStyle={tooltipContentStyle}\n            labelFormatter={labelFormatter}\n            {...tooltipConfig}\n          />\n        )}\n        {chartConfig.zoomingTool && (\n          <Brush\n            y={10}\n            dataKey={primaryDimensionAccessor}\n            tickFormatter={primaryDimension?.formatter}\n            stroke={ThemingParameters.sapObjectHeader_BorderColor}\n            travellerWidth={10}\n            height={20}\n          />\n        )}\n        {children}\n      </ColumnChartLib>\n    </ChartContainer>\n  );\n});\n\nColumnChart.defaultProps = {\n  noLegend: false,\n  noAnimation: false\n};\n\nColumnChart.displayName = 'ColumnChart';\n\nexport { ColumnChart };\n"],"names":["ColumnChartPlaceholder","props","jsxs","ContentLoader","ThemingParameters","jsx","dimensionDefaults","defaultFormatter","measureDefaults","valueAccessor","attribute","payload","getValueByDataKey","ColumnChart","forwardRef","ref","loading","dataset","noLegend","noAnimation","tooltipConfig","onDataPointClick","onLegendClick","onClick","style","className","slot","ChartPlaceholder","syncId","children","rest","chartConfig","referenceLine","dimensions","measures","usePrepareDimensionsAndMeasures","tooltipValueFormatter","useTooltipFormatter","yAxisWidth","legendPosition","useLongestYAxisLabel","primaryDimension","primaryMeasure","secondaryMeasure","resolvePrimaryAndSecondaryMeasures","_a","labelFormatter","useLabelFormatter","componentRef","chartRef","useSyncRef","dataKeys","accessor","colorSecondY","key","onItemLegendClick","useLegendItemClick","onDataPointClickInternal","useCallback","eventOrIndex","event","enrichEventWithDetails","onClickInternal","useOnClickInternal","isBigDataSet","primaryDimensionAccessor","marginChart","useChartMargin","xAxisHeights","useObserveXAxisHeights","isRTL","useIsRTL","_0","_1","_2","propsWithoutOmitted","isMounted","handleBarAnimationStart","handleBarAnimationEnd","useCancelAnimationFallback","ChartContainer","ColumnChartLib","CartesianGrid","dimension","index","XAxis","XAxisTicks","YAxis","tickLineConfig","YAxisTicks","_b","element","Column","LabelList","ChartDataLabel","data","i","Cell","getCellColors","Legend","ReferenceLine","Tooltip","tooltipFillOpacity","tooltipContentStyle","Brush"],"mappings":"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"}