import{j as o}from"./jsx-runtime-d079401a.js";import{I as p}from"./DomRefTable.module-283f4aa6.js";import{M as n,C as s}from"./chunk-S4VUQJ4A-6c5085b0.js";import"./index-f1f2c4b1.js";import{F as l}from"./Footer-bcfb79ac.js";import{a}from"./AnalyticalTable.stories-83374af4.js";import{u as m}from"./index-59d6410c.js";import"./react-jss.esm-2e5f50f2.js";import"./index-959fa2d8.js";import"./iframe-c66595fe.js";import"../sb-preview/runtime.js";import"./UI5Element-fe43d284.js";import"./CustomElementsScopeUtils-7e643eaa.js";import"./withWebComponent-40b4b429.js";import"./utils-64df43e3.js";import"./useIsomorphicLayoutEffect-c49de97d.js";import"./slot-76e48863.js";import"./Icon-4b8e6c3e.js";import"./Icons-1d0bcfc0.js";import"./decline-6c7fc0a2.js";import"./i18n-defaults-bdef1cce.js";import"./information-5d7a8806.js";import"./alert-1b225bb9.js";import"./class-map-c90b90b7.js";import"./Button-ca10e4c6.js";import"./AriaLabelHelper-43a261ec.js";import"./MarkedEvents-b83081e9.js";import"./i18n-defaults-d5195a49.js";import"./index-743fc8f1.js";import"./clsx-1229b3e0.js";import"./ThemingParameters-7e2e4e30.js";import"./addCustomCSSWithScoping-0dcb0e40.js";import"./index-357bee33.js";import"./Integer-f7f172c9.js";import"./index-1fc4939f.js";import"./Avatar-b61e760c.js";import"./ResizeHandler-c2d89e75.js";import"./employee-6f8dc3b6.js";import"./index-02585726.js";import"./index-e8e636fe.js";import"./Link-39a6449b.js";import"./WrappingType-b81e595a.js";import"./index-92d824d3.js";import"./index-c74c9f7f.js";import"./mapValues-57c90777.js";import"./_baseForOwn-2252ef3e.js";import"./_commonjs-dynamic-modules-302442b1.js";import"./_getPrototype-73159a4c.js";import"./_baseUniq-61c59340.js";import"./index-356e4a49.js";import"./index-fb6e8b5e.js";import"./index-45218c0b.js";import"./Label-44520d2b.js";import"./index-8a0302bb.js";import"./index-0b211fd7.js";import"./Popover-e0a9892e.js";import"./PopupUtils-6f7aa5d8.js";import"./getActiveElement-bcae01ed.js";import"./PopupsCommon.css-20392ac5.js";import"./FocusableElements-81dc3a15.js";import"./isElementHidden-01c07146.js";import"./MediaRange-25b98f31.js";import"./style-map-26bcc635.js";import"./BrowserScrollbar.css-6733af99.js";import"./delete-08781f4e.js";import"./ListItem-8f00fe18.js";import"./ListItemBase-a954caa9.js";import"./ItemNavigation-6fcc55ad.js";import"./TabbableElements-8e49b367.js";import"./debounce-9c2fb7dd.js";import"./BusyIndicator-9ca5d237.js";import"./RadioButton-2fcb52b7.js";import"./ValueState-2c5e5904.js";import"./CheckBox-e1cfdb7e.js";import"./accept-9e169369.js";import"./HasPopup-47461347.js";import"./slim-arrow-right-bfe8f962.js";import"./settings-c1dc0ff1.js";import"./index-99d317a4.js";import"./i18n-defaults-1fd9ada1.js";import"./I18nContext-dd74d568.js";import"./CssSizeVariables-596b7aba.js";import"./CustomVariables-f4d4caba.js";import"./filter-ed4eaf7b.js";import"./group-2-a015c204.js";import"./index-15710026.js";import"./stopPropagation-da74d54e.js";import"./index-33e211ee.js";import"./CustomListItem-e6b44855.js";import"./index-96347011.js";import"./index-2b81c398.js";import"./StandardListItem-4d8bc973.js";import"./ValueState-ab6838cc.js";import"./index-e36a71e9.js";import"./Input-ac62fefa.js";import"./Suggestions.css-a7aca9e4.js";import"./ResponsivePopoverCommon.css-fd1b094e.js";import"./ValueStateMessage.css-a9dd0528.js";import"./navigation-down-arrow-e122024b.js";import"./navigation-right-arrow-97584afa.js";import"./useCurrentTheme-df50f2e1.js";import"./index-bf80872f.js";import"./index-e8ae436e.js";import"./GlobalStyleClasses-7209358d.js";import"./index-bd098601.js";import"./Title-01167e9e.js";import"./useIsomorphicId-ed1d334d.js";import"./useIsRTL-8f68c7d5.js";import"./debounce-5c77766a.js";import"./index-409ebe7b.js";import"./Select-7dbcad82.js";import"./InvisibleMessage-dcf9afbd.js";import"./slim-arrow-down-b87cbef6.js";import"./ResponsivePopover-a1211aea.js";import"./Dialog-524beb63.js";import"./index-a06e660c.js";import"./index-272e6346.js";import"./ToggleButton-e803c376.js";import"./index-a72e3a34.js";import"./GroupHeaderListItem-1642eb17.js";import"./Tokenizer-069dd295.js";import"./ScrollEnablement-fd871a80.js";import"./animate-1a16ba20.js";import"./Token-c6a017b3.js";import"./ComboBoxItem-27f0ab2e.js";import"./index-fa5c9b4e.js";function Mi(t={}){const{wrapper:r}=Object.assign({},m(),t.components);return r?o.jsx(r,Object.assign({},t,{children:o.jsx(e,{})})):e();function e(){const i=Object.assign({h1:"h1",p:"p",code:"code",ul:"ul",li:"li",strong:"strong",h2:"h2",pre:"pre"},m(),t.components);return o.jsxs(o.Fragment,{children:[o.jsx(n,{title:"Data Display / AnalyticalTable / Plugin: useOnColumnResize"}),`
`,o.jsx(i.h1,{id:"analyticaltable-plugin-useoncolumnresize",children:"AnalyticalTable Plugin: useOnColumnResize"}),`
`,o.jsx(p,{moduleName:"AnalyticalTableHooks",packageName:"@ui5/webcomponents-react"}),`
`,o.jsxs(i.p,{children:["The ",o.jsx(i.code,{children:"useOnColumnResize"}),` plugin hook allows firing a callback when a columns size has changed by dragging the "Resizer".
The first parameter is the callback itself (`,o.jsx(i.code,{children:"e: { columnWidth: number; header: Record<string, any> }) => void;"}),"), the second one are the optional ",o.jsx(i.code,{children:"options"})," for controlling how often the callback should fire."]}),`
`,o.jsxs(i.p,{children:[o.jsx(i.code,{children:"options"}),":"]}),`
`,o.jsxs(i.ul,{children:[`
`,o.jsxs(i.li,{children:[o.jsx(i.code,{children:"liveUpdate"}),": If ",o.jsx(i.code,{children:"liveUpdate"})," is ",o.jsx(i.code,{children:"true"}),", the resize function will fire every time the width has changed depending on the ",o.jsx(i.code,{children:"options.wait"})," delay."]}),`
`,o.jsxs(i.li,{children:[o.jsx(i.code,{children:"wait"}),": The number of milliseconds for which the calls are to be delayed. ",o.jsxs(i.strong,{children:["Defaults to ",o.jsx(i.code,{children:"100"})]}),". (Only has an effect if ",o.jsx(i.code,{children:"liveUpdate"})," is ",o.jsx(i.code,{children:"true"}),")"]}),`
`]}),`
`,o.jsx(i.h2,{id:"example",children:"Example"}),`
`,o.jsx(s,{sourceState:"none",of:a}),`
`,o.jsx(i.pre,{children:o.jsx(i.code,{className:"language-jsx",children:`const TableComponent = (props) => {
  const handleColumResize = (e) => {
    console.log(e.columnWidth, e.header);
  };
  return (
    <AnalyticalTable
      data={props.data}
      columns={props.columns}
      tableHooks={[
        AnalyticalTableHooks.useOnColumnResize(handleColumResize, {
          liveUpdate: false,
          wait: 100
        })
      ]}
    />
  );
};
`})}),`
`,o.jsx(l,{})]})}}export{Mi as default};
//# sourceMappingURL=PluginOnColumnResize-a330cafd.js.map
