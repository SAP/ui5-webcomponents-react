{"version":3,"file":"index-43333f43.js","sources":["../../packages/main/src/enums/FlexBoxAlignItems.ts","../../packages/main/src/enums/FlexBoxDirection.ts","../../packages/main/src/enums/FlexBoxJustifyContent.ts","../../packages/main/src/enums/FlexBoxWrap.ts","../../packages/main/src/components/FlexBox/FlexBox.jss.ts","../../packages/main/src/components/FlexBox/index.tsx"],"sourcesContent":["export enum FlexBoxAlignItems {\n  /**\n   * Items are aligned toward the start of the flex-direction.<br />\n   * <b>Note:</b> Corresponds to `flex-start`.\n   */\n  Start = 'Start',\n  /**\n   * Items are centered.<br />\n   * <b>Note:</b> Corresponds to `center`.\n   */\n  Center = 'Center',\n  /**\n   * Items are aligned toward the end of the flex-direction.<br />\n   * <b>Note:</b> Corresponds to `flex-end`.\n   */\n  End = 'End',\n  /**\n   * Items are aligned by their baseline.<br />\n   * <b>Note:</b> Corresponds to `baseline`.\n   */\n  Baseline = 'Baseline',\n  /**\n   * Items are stretched to fill the container.<br />\n   * <b>Note:</b> Corresponds to `stretch`.\n   */\n  Stretch = 'Stretch'\n}\n","export enum FlexBoxDirection {\n  /**\n   * Items are placed top to bottom.<br />\n   * <b>Note:</b> Corresponds to `column`.\n   */\n  Column = 'Column',\n  /**\n   * Items are placed bottom to top.<br />\n   * <b>Note:</b> Corresponds to `column-reverse`.\n   */\n  ColumnReverse = 'ColumnReverse',\n  /**\n   * Items are placed left to right in `ltr` and right to left in `rtl`.<br />\n   * <b>Note:</b> Corresponds to `row`.\n   */\n  Row = 'Row',\n  /**\n   * Items are placed right to left in `ltr` and left to right in `rtl`.<br />\n   * <b>Note:</b> Corresponds to `row-reverse`.\n   */\n  RowReverse = 'RowReverse'\n}\n","export enum FlexBoxJustifyContent {\n  /**\n   * Items are aligned toward the start of the flex-direction.<br />\n   * <b>Note:</b> Corresponds to `flex-start`.\n   */\n  Start = 'Start',\n  /**\n   * Items are centered.<br />\n   * <b>Note:</b> Corresponds to `center`.\n   */\n  Center = 'Center',\n  /**\n   * Items are aligned toward the end of the flex-direction.<br />\n   * <b>Note:</b> Corresponds to `flex-end`.\n   */\n  End = 'End',\n  /**\n   * Items are evenly distributed on the main-axis with equal space around them.<br />\n   * <b>Note:</b> Corresponds to `space-around`.\n   */\n  SpaceAround = 'SpaceAround',\n  /**\n   * Items are evenly distributed on the main-axis; first item is on the start line, last item on the end line.<br />\n   * <b>Note:</b> Corresponds to `space-between`.\n   */\n  SpaceBetween = 'SpaceBetween'\n}\n","export enum FlexBoxWrap {\n  /**\n   * All will stay on one line. <br />\n   * <b>Note:</b> Corresponds to `nowrap`.\n   */\n  NoWrap = 'NoWrap',\n  /**\n   * Items will wrap onto multiple lines. (top to bottom)<br />\n   * <b>Note:</b> Corresponds to `wrap`.\n   */\n  Wrap = 'Wrap',\n  /**\n   * Items will wrap onto multiple lines. (bottom to top)<br />\n   * <b>Note:</b> Corresponds to `wrap-reverse`.\n   */\n  WrapReverse = 'WrapReverse'\n}\n","export const styles = {\n  flexBox: {\n    display: 'flex',\n\n    [`&:where($fitContainer)`]: { width: '100%', height: '100%' },\n\n    // justify\n    [`&:where($justifyContentStart)`]: {\n      justifyContent: 'flex-start'\n    },\n    [`&:where($justifyContentEnd)`]: {\n      justifyContent: 'flex-end'\n    },\n    [`&:where($justifyContentCenter)`]: {\n      justifyContent: 'center'\n    },\n    [`&:where($justifyContentSpaceAround)`]: {\n      justifyContent: 'space-around'\n    },\n    [`&:where($justifyContentSpaceBetween)`]: {\n      justifyContent: 'space-between'\n    },\n\n    // align\n    [`&:where($alignItemsStart)`]: {\n      alignItems: 'flex-start'\n    },\n    [`&:where($alignItemsEnd)`]: {\n      alignItems: 'flex-end'\n    },\n    [`&:where($alignItemsCenter)`]: {\n      alignItems: 'center'\n    },\n    [`&:where($alignItemsStretch)`]: {\n      alignItems: 'stretch'\n    },\n    [`&:where($alignItemsBaseline)`]: {\n      alignItems: 'baseline'\n    }\n  },\n  flexBoxDisplayInline: {\n    display: 'inline-flex'\n  },\n\n  fitContainer: {},\n\n  justifyContentStart: {},\n  justifyContentEnd: {},\n  justifyContentCenter: {},\n  justifyContentSpaceAround: {},\n  justifyContentSpaceBetween: {},\n\n  alignItemsStart: {},\n  alignItemsEnd: {},\n  alignItemsCenter: {},\n  alignItemsStretch: {},\n  alignItemsBaseline: {},\n\n  flexBoxDirectionColumn: {\n    flexDirection: 'column'\n  },\n  flexBoxDirectionColumnReverse: {\n    flexDirection: 'column-reverse'\n  },\n  flexBoxDirectionRow: {\n    flexDirection: 'row'\n  },\n  flexBoxDirectionRowReverse: {\n    flexDirection: 'row-reverse'\n  },\n\n  flexWrapNoWrap: {\n    flexWrap: 'nowrap'\n  },\n  flexWrapWrap: {\n    flexWrap: 'wrap'\n  },\n  flexWrapWrapReverse: {\n    flexWrap: 'wrap-reverse'\n  }\n};\n","import { clsx } from 'clsx';\nimport type { ElementType, ReactNode } from 'react';\nimport React, { forwardRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FlexBoxAlignItems, FlexBoxDirection, FlexBoxJustifyContent, FlexBoxWrap } from '../../enums/index.js';\nimport type { CommonProps } from '../../interfaces/index.js';\nimport { styles } from './FlexBox.jss.js';\n\nconst useStyles = createUseStyles(styles, { name: 'FlexBox' });\n\nexport interface FlexBoxPropTypes extends CommonProps {\n  /**\n   * Controls the alignment of items on the Cross Axis.<br />\n   * <b>Note:</b> Corresponds to `align-items`.\n   */\n  alignItems?: FlexBoxAlignItems | keyof typeof FlexBoxAlignItems;\n  /**\n   * Controls how the items are placed in the `FlexBox`.<br />\n   * <b>Note:</b> Corresponds to `flex-direction`.\n   */\n  direction?: FlexBoxDirection | keyof typeof FlexBoxDirection;\n  /**\n   * Determines whether the `FlexBox` is in `flex` or `inline-flex` mode.\n   */\n  displayInline?: boolean;\n  /**\n   * Determines whether the `FlexBox` will be sized to completely fill its container.\n   */\n  fitContainer?: boolean;\n  /**\n   * Defines how the browser distributes space between and around items along the main-axis.<br />\n   * <b>Note:</b> Corresponds to `justify-content`.\n   */\n  justifyContent?: FlexBoxJustifyContent | keyof typeof FlexBoxJustifyContent;\n  /**\n   * Determines whether the `FlexBox` should wrap, when there is not enough space to display all items in one line.<br />\n   * <b>Note:</b> Corresponds to `flex-wrap`.\n   */\n  wrap?: FlexBoxWrap | keyof typeof FlexBoxWrap;\n  /**\n   * Content of the `FlexBox`.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Sets the components outer HTML tag.\n   *\n   * __Note:__ For TypeScript the types of `ref` are bound to the default tag name, if you change it you are responsible to set the respective types yourself.\n   */\n  as?: keyof HTMLElementTagNameMap;\n}\n\n/**\n * The `FlexBox` builds the container for a flexible box layout by leveraging the CSS flexbox layout.\n */\nconst FlexBox = forwardRef<HTMLDivElement, FlexBoxPropTypes>((props, ref) => {\n  const {\n    children,\n    justifyContent = FlexBoxJustifyContent.Start,\n    direction = FlexBoxDirection.Row,\n    alignItems = FlexBoxAlignItems.Stretch,\n    displayInline,\n    wrap = FlexBoxWrap.NoWrap,\n    className,\n    fitContainer,\n    as = 'div',\n    ...rest\n  } = props;\n\n  const classes = useStyles();\n  const flexBoxClasses = clsx(\n    classes.flexBox,\n    classes[`flexBoxDirection${direction}`],\n    classes[`justifyContent${justifyContent}`],\n    classes[`alignItems${alignItems}`],\n    classes[`flexWrap${wrap}`],\n    displayInline && classes.flexBoxDisplayInline,\n    fitContainer && classes.fitContainer,\n    className\n  );\n\n  const CustomTag = as as ElementType;\n  return (\n    <CustomTag ref={ref} className={flexBoxClasses} {...rest}>\n      {children}\n    </CustomTag>\n  );\n});\n\nFlexBox.displayName = 'FlexBox';\n\nexport { FlexBox };\n"],"names":["FlexBoxAlignItems","FlexBoxDirection","FlexBoxJustifyContent","FlexBoxWrap","styles","useStyles","createUseStyles","FlexBox","forwardRef","props","ref","children","justifyContent","direction","alignItems","displayInline","wrap","className","fitContainer","as","rest","classes","flexBoxClasses","clsx","CustomTag","jsx"],"mappings":"6KAAY,IAAAA,GAAAA,IAKVA,EAAA,MAAQ,QAKRA,EAAA,OAAS,SAKTA,EAAA,IAAM,MAKNA,EAAA,SAAW,WAKXA,EAAA,QAAU,UAzBAA,IAAAA,GAAA,CAAA,CAAA,ECAAC,GAAAA,IAKVA,EAAA,OAAS,SAKTA,EAAA,cAAgB,gBAKhBA,EAAA,IAAM,MAKNA,EAAA,WAAa,aApBHA,IAAAA,GAAA,CAAA,CAAA,ECAAC,GAAAA,IAKVA,EAAA,MAAQ,QAKRA,EAAA,OAAS,SAKTA,EAAA,IAAM,MAKNA,EAAA,YAAc,cAKdA,EAAA,aAAe,eAzBLA,IAAAA,GAAA,CAAA,CAAA,ECAAC,GAAAA,IAKVA,EAAA,OAAS,SAKTA,EAAA,KAAO,OAKPA,EAAA,YAAc,cAfJA,IAAAA,GAAA,CAAA,CAAA,ECAL,MAAMC,EAAS,CACpB,QAAS,CACP,QAAS,OAER,yBAA2B,CAAE,MAAO,OAAQ,OAAQ,MAAO,EAG3D,gCAAkC,CACjC,eAAgB,YAClB,EACC,8BAAgC,CAC/B,eAAgB,UAClB,EACC,iCAAmC,CAClC,eAAgB,QAClB,EACC,sCAAwC,CACvC,eAAgB,cAClB,EACC,uCAAyC,CACxC,eAAgB,eAClB,EAGC,4BAA8B,CAC7B,WAAY,YACd,EACC,0BAA4B,CAC3B,WAAY,UACd,EACC,6BAA+B,CAC9B,WAAY,QACd,EACC,8BAAgC,CAC/B,WAAY,SACd,EACC,+BAAiC,CAChC,WAAY,UACd,CACF,EACA,qBAAsB,CACpB,QAAS,aACX,EAEA,aAAc,CAAC,EAEf,oBAAqB,CAAC,EACtB,kBAAmB,CAAC,EACpB,qBAAsB,CAAC,EACvB,0BAA2B,CAAC,EAC5B,2BAA4B,CAAC,EAE7B,gBAAiB,CAAC,EAClB,cAAe,CAAC,EAChB,iBAAkB,CAAC,EACnB,kBAAmB,CAAC,EACpB,mBAAoB,CAAC,EAErB,uBAAwB,CACtB,cAAe,QACjB,EACA,8BAA+B,CAC7B,cAAe,gBACjB,EACA,oBAAqB,CACnB,cAAe,KACjB,EACA,2BAA4B,CAC1B,cAAe,aACjB,EAEA,eAAgB,CACd,SAAU,QACZ,EACA,aAAc,CACZ,SAAU,MACZ,EACA,oBAAqB,CACnB,SAAU,cACZ,CACF,ECxEAC,EAAAC,EAAAF,EAAA,CAAA,KAAA,SAAA,CAAA,EA8CAG,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CACE,KAAA,CAAM,SAAAC,EACJ,eAAAC,EAAAV,EAAA,MACuC,UAAAW,EAAAZ,EAAA,IACV,WAAAa,EAAAd,EAAA,QACE,cAAAe,EAC/B,KAAAC,EAAAb,EAAA,OACmB,UAAAc,EACnB,aAAAC,EACA,GAAAC,EAAA,MACK,GAAAC,CACF,EAAAX,EAGLY,EAAAhB,IACAiB,EAAAC,EAAuBF,EAAA,QACbA,EAAA,mBAAAR,CAAA,EAAA,EAC8BQ,EAAA,iBAAAT,CAAA,EAAA,EACGS,EAAA,aAAAP,CAAA,EAAA,EACRO,EAAA,WAAAL,CAAA,EAAA,EACRD,GAAAM,EAAA,qBACAH,GAAAG,EAAA,aACDJ,CACxB,EAGFO,EAAAL,EACA,OAAAM,EAAA,IAAAD,EAAA,CAAA,IAAAd,EAAA,UAAAY,EAAA,GAAAF,EAAA,SAAAT,CAAA,CAAA,CAKF,CAAA,EAEAJ,EAAA,YAAA;;"}