{"version":3,"file":"VariantManagement-H9ssVKVp.js","sources":["../../packages/main/src/components/VariantManagement/VariantManagement.mdx"],"sourcesContent":["import { ControlsWithNote, DocsHeader, Footer } from '@sb/components';\nimport SubcomponentsSection from '@sb/docs/SubcomponentsSection.md?raw';\nimport { ArgTypes, Canvas, Description, Markdown, Meta } from '@storybook/blocks';\nimport { MessageStrip } from '../../webComponents/index';\nimport { VariantItem } from './VariantItem';\nimport * as ComponentStories from './VariantManagement.stories';\n\n<Meta of={ComponentStories} />\n\n<DocsHeader />\n\n<br />\n\n## Example\n\n<Canvas of={ComponentStories.Default} />\n\n## Properties\n\n<ControlsWithNote of={ComponentStories.Default} />\n\n# More Examples\n\n## VariantManagement with custom Input\n\nYou can customize the inputs inside the configuration dialogs (\"Save View\" and \"Manage Views\") by leveraging the corresponding `inputProps` prop (`saveViewInputProps` and `manageViewsInputProps`) of the `VariantItem` component.\nThese props accept props of the `Input` component with which you are able to overwrite internal implementations. E.g. `valueState` and `valueState` message.\n\n**Note:** To prevent internal logic from being executed on save click, you can mark the `onInput` event of the corresponding `Input` component as invalid by setting `event.isInvalid = true` inside the respective handler.\n\n<MessageStrip hideCloseButton>It is possible to overwrite internally used props. Please use with caution!</MessageStrip>\n\n<Canvas of={ComponentStories.WithCustomValidation} sourceState=\"none\" />\n\n### Code Example\n\n<details style={{ marginBlockEnd: \"2rem\" }}>\n\n<summary>Show Code</summary>\n\n```jsx\nconst VariantManagementWithCustomValidation = ({ selectedByIndex = 1 }) => {\n  const [valueStateSaveView, setValueStateSaveView] = useState(undefined);\n  const [valueStateManageViews, setValueStateManageViews] = useState(undefined);\n  const [values, setValues] = useState({\n    1: 'Only alphanumeric chars in Save View input',\n    2: 'Max 12 chars'\n  });\n\n  const handleSaveViewInput = (e) => {\n    // only allow alphanumeric and space characters\n    if (!e.target.value.match(/^[a-z0-9\\s]+$/i)) {\n      // mark variant as invalid (prevent internal logic from being applied)\n      e.isInvalid = true;\n      setValueStateSaveView(ValueState.Error);\n    } else {\n      // mark variant as valid again\n      e.isInvalid = false;\n      setValueStateSaveView(undefined);\n    }\n  };\n  const handleSaveAs = (e) => {\n    setValues((prev) => ({\n      ...prev,\n      [e.detail['data-id']]: e.detail.children\n    }));\n  };\n\n  const handleManageViewInput = (e) => {\n    // only 12 or fewer characters\n    if (e.target.value.length > 12) {\n      // mark variant as invalid (prevent internal logic from being applied)\n      e.isInvalid = true;\n      setValueStateManageViews(ValueState.Error);\n    } else {\n      // mark variant as valid again\n      e.isInvalid = false;\n      setValueStateManageViews(undefined);\n    }\n  };\n  const handleSaveManageViews = (e) => {\n    // if is custom manage view variant and is not in error state, set children to new value\n    const isCustomManageViewsItem = e.detail.updatedVariants.find((item) => item['data-custom-manage-views']);\n    if (!valueStateManageViews && isCustomManageViewsItem) {\n      setValues((prev) => ({\n        ...prev,\n        [isCustomManageViewsItem['data-id']]: isCustomManageViewsItem.children\n      }));\n    }\n  };\n  // reset value-state if user closes the dialogs without saving (cancel click or ESC press)\n  const handleManageViewsCancel = () => {\n    setValueStateManageViews(undefined);\n  };\n  const handleSaveViewCancel = () => {\n    setValueStateSaveView(undefined);\n  };\n  return (\n    <VariantManagement\n      onSaveAs={handleSaveAs}\n      onSaveManageViews={handleSaveManageViews}\n      onManageViewsCancel={handleManageViewsCancel}\n      onSaveViewCancel={handleSaveViewCancel}\n    >\n      <VariantItem\n        data-id={1}\n        selected={selectedByIndex === 0}\n        saveViewInputProps={{\n          valueState: valueStateSaveView,\n          valueStateMessage: valueStateSaveView ? (\n            <div>Only alphanumeric and space characters allowed!</div>\n          ) : undefined,\n          onInput: handleSaveViewInput,\n          'data-testid': 'alphanumeric'\n        }}\n      >\n        {values[1]}\n      </VariantItem>\n      <VariantItem\n        data-custom-manage-views\n        data-id={2}\n        selected={selectedByIndex === 1}\n        manageViewsInputProps={{\n          valueState: valueStateManageViews,\n          valueStateMessage: valueStateManageViews ? <div>No more than 12 characters allowed!</div> : undefined,\n          onInput: handleManageViewInput,\n          'data-testid': '12chars'\n        }}\n      >\n        {values[2]}\n      </VariantItem>\n    </VariantManagement>\n  );\n};\n```\n\n</details>\n\n## Basic VariantManagement Implementation\n\nThis example shows how a basic implementation of the `VariantManagement` inside a `FilterBar` could look like. For a more in depth documentation you can take a look at the official [Fiori for Web Design Guidelines](https://experience.sap.com/fiori-design-web/variant-management/).\n\n**Note:** All views are applied automatically, so the \"Apply Automatically\" checkboxes in both dialogs won't be visible.\n\n<Canvas of={ComponentStories.WithFilterBarImplementation} sourceState=\"none\" />\n\n### Code Example\n\n<details style={{ marginBlockEnd: \"2rem\" }}>\n\n<summary>Show Code</summary>\n\n```tsx\nfunction FilterBarWithVariantManagement() {\n  const [selectedVariant, setSelectedVariant] = useState('Standard');\n  const [defaultVariant, setDefaultVariant] = useState('Standard');\n  const [customVariants, setCustomVariants] = useState<VariantItemPropTypes[]>([]);\n  const [isDirty, setIsDirty] = useState(false);\n  const [checkIfDiry, setCheckIfDirty] = useState(false);\n\n  // this should be persisted (e.g. by the local storage of the browser or on the server)\n  const initialVariantValues = useRef({\n    Standard: {\n      selectedCountry: 'Indonesia',\n      date: '',\n      selectedCodes: {}\n    }\n  });\n\n  const filterReducer = (state, action) => {\n    const { payload, type } = action;\n    setCheckIfDirty(true);\n    switch (type) {\n      case 'selectedCountry':\n        return { ...state, selectedCountry: payload };\n      case 'date':\n        return { ...state, date: payload };\n      case 'selectedCodes':\n        return { ...state, selectedCodes: payload };\n      case 'changeVariant':\n        return payload;\n      default:\n        console.warn('Unknown action type!');\n        return state;\n    }\n  };\n\n  const [filters, dispatchFiltersChange] = useReducer(filterReducer, initialVariantValues.current.Standard);\n  const { selectedCountry, date, selectedCodes } = filters;\n\n  const handleSelectChange = (e) => {\n    const { selectedOption } = e.detail;\n    dispatchFiltersChange({ type: 'selectedCountry', payload: selectedOption.textContent });\n  };\n  const handleDateChange = (e) => {\n    dispatchFiltersChange({ type: 'date', payload: e.detail.value });\n  };\n  const handleSelectedCodesChange = (e) => {\n    dispatchFiltersChange({\n      type: 'selectedCodes',\n      payload: e.detail.items.reduce((acc, cur) => {\n        acc[cur.dataset.code] = true;\n        return acc;\n      }, {})\n    });\n  };\n\n  const handleSaveAs = (e) => {\n    const {\n      variantItem: _omit,\n      selected: _omit2,\n      readOnly: _omit3,\n      labelReadOnly: _omit4,\n      ...variantItemProps\n    } = e.detail;\n    if (variantItemProps.isDefault) {\n      setDefaultVariant(variantItemProps.children);\n    }\n    setCustomVariants((prev) => [...prev, { ...variantItemProps, author: 'Current User' }]);\n    initialVariantValues.current[variantItemProps.children] = filters;\n    setSelectedVariant(variantItemProps.children);\n    setIsDirty(false);\n  };\n\n  const handleSave = (e) => {\n    const { variantItem: _omit, selected: _omit2, ...variantItemProps } = e.detail;\n    initialVariantValues.current[variantItemProps.children] = filters;\n    setIsDirty(false);\n  };\n\n  const handleSaveManageViews = (e) => {\n    const { deletedVariants, updatedVariants } = e.detail;\n    deletedVariants.forEach((variant) => {\n      delete initialVariantValues.current[variant.children];\n      setCustomVariants((prev) => prev.filter((item) => item.children !== variant.children));\n    });\n    updatedVariants.forEach((variant) => {\n      const { variantItem: _omit, selected: _omit2, ...variantItemProps } = variant;\n      initialVariantValues.current[variant.children] = variantItemProps;\n      if (variant.isDefault) {\n        setDefaultVariant(variant.children);\n      }\n      if (variant.selected) {\n        setSelectedVariant(variant.children);\n      }\n      setCustomVariants((prev) => {\n        return prev.map((item) => {\n          if (item.children === variant.prevVariant.children) {\n            return variantItemProps;\n          }\n          return item;\n        });\n      });\n    });\n  };\n\n  const handleSelect = (e) => {\n    const privateSelectedVariant = e.detail.selectedVariant.children;\n    dispatchFiltersChange({\n      type: 'changeVariant',\n      payload: initialVariantValues.current[privateSelectedVariant]\n    });\n    setSelectedVariant(privateSelectedVariant);\n  };\n\n  useEffect(() => {\n    if (checkIfDiry) {\n      const hasChanged = Object.entries(initialVariantValues.current[selectedVariant]).some(([key, val]) => {\n        if (key === 'selectedCodes') {\n          const selectedCodesLength = Object.keys(filters.selectedCodes).length;\n          if (selectedCodesLength > 0 && Object.keys(val).length !== selectedCodesLength) {\n            return true;\n          }\n          return Object.entries(filters.selectedCodes).some(([code, bool]) => {\n            return val[code] !== bool;\n          });\n        }\n        return filters[key] !== val;\n      });\n      setCheckIfDirty(false);\n      setIsDirty(hasChanged);\n    }\n  }, [checkIfDiry, selectedVariant]);\n\n  return (\n    <>\n      <FilterBar\n        header={\n          <VariantManagement\n            hideApplyAutomatically\n            dirtyState={isDirty}\n            onSaveAs={handleSaveAs}\n            onSave={handleSave}\n            onSelect={handleSelect}\n            onSaveManageViews={handleSaveManageViews}\n          >\n            <VariantItem\n              selected={selectedVariant === 'Standard'}\n              global\n              isDefault={defaultVariant === 'Standard'}\n              author=\"SAP\"\n              readOnly\n              labelReadOnly\n            >\n              Standard\n            </VariantItem>\n            {customVariants.map((variantItemProps) => {\n              return (\n                <VariantItem\n                  key={variantItemProps.children}\n                  {...variantItemProps}\n                  selected={selectedVariant === variantItemProps.children}\n                  isDefault={defaultVariant === variantItemProps.children}\n                >\n                  {variantItemProps.children}\n                </VariantItem>\n              );\n            })}\n          </VariantManagement>\n        }\n      >\n        <FilterGroupItem label=\"Countries\">\n          <Select onChange={handleSelectChange}>\n            <Option selected={selectedCountry === 'Indonesia'}>Indonesia</Option>\n            <Option selected={selectedCountry === 'Costa Rica'}>Costa Rica</Option>\n            <Option selected={selectedCountry === 'Slovakia'}>Slovakia</Option>\n            <Option selected={selectedCountry === 'Iceland'}>Iceland</Option>\n            <Option selected={selectedCountry === 'Malta'}>Malta</Option>\n            <Option selected={selectedCountry === 'Guyana'}>Guyana</Option>\n            <Option selected={selectedCountry === 'Spain'}>Spain</Option>\n            <Option selected={selectedCountry === 'Austria'}>Austria</Option>\n          </Select>\n        </FilterGroupItem>\n        <FilterGroupItem label=\"Date\">\n          <DatePicker value={date} onChange={handleDateChange} />\n        </FilterGroupItem>\n        <FilterGroupItem label=\"Company Code\">\n          <MultiComboBox onSelectionChange={handleSelectedCodesChange}>\n            <MultiComboBoxItem text=\"001\" selected={selectedCodes['001']} data-code=\"001\" />\n            <MultiComboBoxItem text=\"002\" selected={selectedCodes['002']} data-code=\"002\" />\n            <MultiComboBoxItem text=\"003\" selected={selectedCodes['003']} data-code=\"003\" />\n            <MultiComboBoxItem text=\"004\" selected={selectedCodes['004']} data-code=\"004\" />\n            <MultiComboBoxItem text=\"005\" selected={selectedCodes['005']} data-code=\"005\" />\n          </MultiComboBox>\n        </FilterGroupItem>\n      </FilterBar>\n      <Form\n        style={{ marginBlockStart: '2rem' }}\n        columnsS={1}\n        columnsM={1}\n        columnsL={1}\n        columnsXL={1}\n        labelSpanM={2}\n        labelSpanL={2}\n        labelSpanXL={2}\n      >\n        <FormItem label=\"Current View\">\n          <Text>{selectedVariant}</Text>\n        </FormItem>\n        <FormGroup titleText=\"Filters\">\n          <FormItem label=\"Selected Country\">\n            <Text>{selectedCountry}</Text>\n          </FormItem>\n          <FormItem label=\"Selected Date\">\n            <Text>{date}</Text>\n          </FormItem>\n          <FormItem label=\"Selected Company Codes\">\n            <Text>{Object.keys(selectedCodes).join(', ')}</Text>\n          </FormItem>\n        </FormGroup>\n      </Form>\n    </>\n  );\n}\n```\n\n</details>\n\n<Markdown>{SubcomponentsSection}</Markdown>\n\n## VariantItem\n\n<Description of={VariantItem} />\n\n<ArgTypes of={VariantItem} />\n\n<Footer />\n"],"names":["MDXContent","props","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment","Meta","ComponentStories","DocsHeader","Canvas","ComponentStories.Default","ControlsWithNote","MessageStrip","ComponentStories.WithCustomValidation","ComponentStories.WithFilterBarImplementation","Markdown","SubcomponentsSection","Description","VariantItem","ArgTypes","Footer"],"mappings":"spKASA,SAASA,GAAWC,EAAQ,GAAI,CAC9B,KAAM,CAAC,QAASC,CAAS,EAAI,OAAO,OAAO,CAAE,EAAEC,EAAoB,EAAEF,EAAM,UAAU,EACrF,OAAOC,EAAYE,EAAAA,IAAKF,EAAW,OAAO,OAAO,CAAE,EAAED,EAAO,CAC1D,SAAUG,EAAAA,IAAKC,EAAmB,EAAE,CACxC,CAAG,CAAC,EAAIA,IACN,SAASA,GAAoB,CAC3B,MAAMC,EAAc,OAAO,OAAO,CAChC,GAAI,KACJ,GAAI,KACJ,EAAG,IACH,KAAM,OACN,OAAQ,SACR,GAAI,KACJ,IAAK,MACL,EAAG,GACJ,EAAEH,EAAoB,EAAEF,EAAM,UAAU,EACzC,OAAOM,EAAAA,KAAMC,EAAAA,SAAW,CACtB,SAAU,CAACJ,EAAI,IAACK,EAAM,CACpB,GAAIC,CACL,CAAA,EAAG;AAAA,EAAMN,EAAAA,IAAKO,EAAY,CAAA,CAAE,EAAG;AAAA,EAAMP,EAAI,IAAC,KAAM,CAAE,CAAA,EAAG;AAAA,EAAMA,EAAAA,IAAKE,EAAY,GAAI,CAC/E,GAAI,UACJ,SAAU,SAClB,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACQ,EAAQ,CACrB,GAAIC,CACL,CAAA,EAAG;AAAA,EAAMT,MAAKE,EAAY,GAAI,CAC7B,GAAI,aACJ,SAAU,YAClB,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACU,EAAkB,CAC/B,GAAID,CACL,CAAA,EAAG;AAAA,EAAMT,MAAKE,EAAY,GAAI,CAC7B,GAAI,gBACJ,SAAU,eACX,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,GAAI,CAC7B,GAAI,sCACJ,SAAU,qCACX,CAAA,EAAG;AAAA,EAAMC,OAAMD,EAAY,EAAG,CAC7B,SAAU,CAAC,kIAAuIF,MAAKE,EAAY,KAAM,CACvK,SAAU,YACX,CAAA,EAAG,UAAWF,MAAKE,EAAY,KAAM,CACpC,SAAU,oBACX,CAAA,EAAG,QAASF,MAAKE,EAAY,KAAM,CAClC,SAAU,uBACX,CAAA,EAAG,YAAaF,MAAKE,EAAY,KAAM,CACtC,SAAU,aACX,CAAA,EAAG;AAAA,kCAAiDF,MAAKE,EAAY,KAAM,CAC1E,SAAU,OACX,CAAA,EAAG,kFAAmFF,MAAKE,EAAY,KAAM,CAC5G,SAAU,YACX,CAAA,EAAG,QAASF,MAAKE,EAAY,KAAM,CAClC,SAAU,YACX,CAAA,EAAG,WAAW,CAChB,CAAA,EAAG;AAAA,EAAMC,OAAMD,EAAY,EAAG,CAC7B,SAAU,CAACF,EAAAA,IAAKE,EAAY,OAAQ,CAClC,SAAU,OACX,CAAA,EAAG,kFAAmFF,MAAKE,EAAY,KAAM,CAC5G,SAAU,SACX,CAAA,EAAG,+BAAgCF,MAAKE,EAAY,KAAM,CACzD,SAAU,OACX,CAAA,EAAG,oCAAqCF,MAAKE,EAAY,KAAM,CAC9D,SAAU,wBACX,CAAA,EAAG,iCAAiC,CAC7C,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACW,EAAc,CAC3B,gBAAiB,GACjB,SAAU,6EAClB,CAAO,EAAG;AAAA,EAAMX,EAAI,IAACQ,EAAQ,CACrB,GAAII,EACJ,YAAa,MACd,CAAA,EAAG;AAAA,EAAMZ,MAAKE,EAAY,GAAI,CAC7B,GAAI,eACJ,SAAU,cAClB,CAAO,EAAG;AAAA,EAAMC,EAAK,KAAC,UAAW,CACzB,MAAO,CACL,eAAgB,MACjB,EACD,SAAU,CAACH,EAAI,IAAC,UAAW,CACzB,SAAU,WACpB,CAAS,EAAGA,EAAAA,IAAKE,EAAY,IAAK,CACxB,SAAUF,EAAAA,IAAKE,EAAY,KAAM,CAC/B,UAAW,eACX,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CACtB,CAAW,CACX,CAAS,CAAC,CACH,CAAA,EAAG;AAAA,EAAMF,MAAKE,EAAY,GAAI,CAC7B,GAAI,yCACJ,SAAU,wCACX,CAAA,EAAG;AAAA,EAAMC,OAAMD,EAAY,EAAG,CAC7B,SAAU,CAAC,wDAAyDF,MAAKE,EAAY,KAAM,CACzF,SAAU,mBACX,CAAA,EAAG,aAAcF,MAAKE,EAAY,KAAM,CACvC,SAAU,WACX,CAAA,EAAG,2FAA4FF,MAAKE,EAAY,EAAG,CAClH,KAAM,kEACN,OAAQ,SACR,IAAK,+BACL,SAAU,iCACX,CAAA,EAAG,GAAG,CACR,CAAA,EAAG;AAAA,EAAMC,OAAMD,EAAY,EAAG,CAC7B,SAAU,CAACF,EAAAA,IAAKE,EAAY,OAAQ,CAClC,SAAU,OACX,CAAA,EAAG,iHAAmH,CAC/H,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACQ,EAAQ,CACrB,GAAIK,EACJ,YAAa,MACd,CAAA,EAAG;AAAA,EAAMb,MAAKE,EAAY,GAAI,CAC7B,GAAI,iBACJ,SAAU,cAClB,CAAO,EAAG;AAAA,EAAMC,EAAK,KAAC,UAAW,CACzB,MAAO,CACL,eAAgB,MACjB,EACD,SAAU,CAACH,EAAI,IAAC,UAAW,CACzB,SAAU,WACpB,CAAS,EAAGA,EAAAA,IAAKE,EAAY,IAAK,CACxB,SAAUF,EAAAA,IAAKE,EAAY,KAAM,CAC/B,UAAW,etB,CAAW,CACX,CAAS,CAAC,CACV,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACc,EAAU,CACvB,SAAUC,CACX,CAAA,EAAG;AAAA,EAAMf,MAAKE,EAAY,GAAI,CAC7B,GAAI,cACJ,SAAU,aAClB,CAAO,EAAG;AAAA,EAAMF,EAAI,IAACgB,EAAa,CAC1B,GAAIC,CACZ,CAAO,EAAG;AAAA,EAAMjB,EAAI,IAACkB,EAAU,CACvB,GAAID,CACL,CAAA,EAAG;AAAA,EAAMjB,EAAAA,IAAKmB,EAAQ,CAAE,CAAA,CAAC,CAChC,CAAK,CACF,CACH"}