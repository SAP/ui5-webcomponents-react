import{c as U}from"./DemoProps-BWWtsAFv.js";import{j as a}from"./useIsomorphicLayoutEffect-J-vjyzBO.js";import{T as y}from"./ThemingParameters-DOkJX3Ed.js";import{r as q}from"./index-DVqgc125.js";import{u as $}from"./useLongestYAxisLabel-C-KYJRe5.js";import{u as H}from"./useTooltipFormatter-jrr4aTTB.js";import{a as c,C as B}from"./defaults-CKqIgV7A.js";import{C as P}from"./index-0iS01JtE.js";import{C as K}from"./react-content-loader.es-CmqtvJxN.js";import{u as G}from"./useIsomorphicId-B7SE6ZVh.js";import"./ChartContainer-DvHqzlWL.js";import"./_baseForOwn-czysEfXW.js";import"./_baseUniq-fADs2fxN.js";import"./index-BfsycYn4.js";import"./clsx-B-dksMZM.js";import"./i18n-defaults-CNyODxfy.js";import"./i18nBundle-Baemx9Ir.js";import"./Boot-DBJWGo1y.js";import"./EventProvider-CVfkyUHo.js";import"./I18nContext-BrA05J-F.js";import"./useStylesheet-DGwRvl1X.js";import"./throttle-Dl_m-peW.js";import"./isString-D7zYwilD.js";import"./index-BNqEw21-.js";import"./iframe-BvH98P4b.js";import"../sb-preview/runtime.js";import"./Label-BcDuAK9i.js";import"./UI5Element-ZIczsayz.js";import"./CustomElementsScopeUtils-Di1jckr8.js";import"./withWebComponent-CZCh4Hye.js";import"./utils-xoLr7-0V.js";import"./WrappingType-CW8URInd.js";import"./i18n-defaults-BBSxky5H.js";import"./parameters-bundle.css-B_nLitlw.js";import"./tiny-invariant-CCoILDQG.js";import"./index-CBpU8qq5.js";import"./YAxisTicks-KZL_1cWq.js";import"./generateCategoricalChart-CRd3mEgZ.js";import"./isPlainObject-BydcgycZ.js";import"./mapValues-DJmJhyxk.js";import"./debounce-D7W5PopO.js";import"./ChartDataLabel-0flS0T2v.js";import"./staticProps-3HxSKqj7.js";import"./useOnClickInternal-yEpt7jtH.js";import"./ComposedChart-Vq6s8Rja.js";import"./Line-BO778sZl.js";import"./Scatter-BmA2fO0C.js";import"./useIsRTL-B9uUG4cf.js";import"./directionChange-sxDj8oYs.js";const Z=(e,s)=>q.useMemo(()=>{const l=[],n=[],t=[];return e==null||e.forEach((o,r)=>{o.type==="bar"&&(l.push({...o,opacity:0,hide:!0,hideDataLabel:!0,showDot:!1,formatter:c}),n.push({color:o.color??`var(--sapChart_OrderedColor_${r%11+1})`,formatter:c,...o})),o.type==="line"&&(l.push({color:o.color??`var(--sapChart_OrderedColor_${r%11+1})`,formatter:c,...o}),n.push({...o,opacity:0,hideDataLabel:!0,showDot:!1,formatter:c}))}),s==null||s.forEach(o=>{const r={};l.forEach(i=>{i.type==="line"&&(r[`__${i.accessor}`]=B.getValueByDataKey(o,i.accessor),r[i.accessor]=1)}),t.push({...o,...r})}),{lineMeasures:l,columnMeasures:n,columnDataset:t}},[e,s]),h=e=>a.jsxs(K,{viewBox:"0 0 165 145",preserveAspectRatio:"xMidYMid meet",width:"100%",height:"100%",speed:2,backgroundColor:y.sapContent_ImagePlaceholderBackground,foregroundColor:y.sapContent_ImagePlaceholderForegroundColor,backgroundOpacity:y.sapContent_DisabledOpacity,...e,children:[a.jsx("path",{d:"M 20 56 L 39 33 L 57 25 L 77 5 L 99 25 L 125 31 L 139 25 L 125 32 L 98 27 L 77 10 L 58 27 L 39 35 L 20 56 Z",fill:"none",strokeWidth:"2"}),a.jsx("rect",{x:"10",y:"135",width:"135",height:"1"}),a.jsx("rect",{x:"20",y:"65",width:"15",height:"70"}),a.jsx("rect",{x:"40",y:"58",width:"15",height:"77"}),a.jsx("rect",{x:"60",y:"68",width:"15",height:"67"}),a.jsx("rect",{x:"80",y:"60",width:"15",height:"75"}),a.jsx("rect",{x:"100",y:"35",width:"15",height:"100"}),a.jsx("rect",{x:"120",y:"75",width:"15",height:"60"})]});try{h.displayName="ColumnChartWithTrendPlaceholder",h.__docgenInfo={description:"",displayName:"ColumnChartWithTrendPlaceholder",props:{}}}catch{}try{h.displayName="ColumnChartWithTrendPlaceholder",h.__docgenInfo={description:"",displayName:"ColumnChartWithTrendPlaceholder",props:{}}}catch{}const J={formatter:c},Q={formatter:c,opacity:1},X={wrapperStyle:{visibility:"hidden"}},d=q.forwardRef((e,s)=>{const{loading:l,dataset:n,style:t,className:o,slot:r,onClick:i,noLegend:N,noAnimation:w,onDataPointClick:p,onLegendClick:I,ChartPlaceholder:W,...E}=e,v=G(),_={yAxisVisible:!1,xAxisVisible:!0,gridStroke:y.sapList_BorderColor,gridHorizontal:!0,gridVertical:!1,legendPosition:"bottom",legendHorizontalAlign:"left",barGap:3,zoomingTool:!1,resizeDebounce:250,...e.chartConfig},{dimensions:k,measures:z}=H(e.dimensions,e.measures,J,Q),{lineMeasures:x,columnMeasures:b,columnDataset:L}=Z(z,n),[R]=$(L,b,_.legendPosition),O={formatter:(Y,F,u)=>{const C=x.find(m=>m.type==="line"&&m.accessor===u.dataKey);return C?C.formatter(u.payload[`__${C.accessor}`]):b.find(m=>m.accessor===u.dataKey).formatter(Y,F,u)}},{chartConfig:ee,dimensions:te,measures:oe,tooltipConfig:ne,...M}=E;return a.jsxs("div",{ref:s,style:{display:"flex",flexDirection:"column",height:t==null?void 0:t.height,width:t==null?void 0:t.width,...t},className:o,slot:r,...M,children:[(n==null?void 0:n.length)!==0&&a.jsx(P,{className:typeof p=="function"||typeof i=="function"?"has-click-handler":void 0,tooltipConfig:X,noAnimation:w,loading:l,onClick:i,syncId:v,style:{...t,height:`calc(${t==null?void 0:t.height} * 0.2)`},dataset:n,measures:x,dimensions:k,noLegend:!0,onDataPointClick:p,chartConfig:{xAxisVisible:!1,yAxisVisible:!1,yAxisTicksVisible:!1,gridHorizontal:!1,yAxisLabelsVisible:!1,yAxisWidth:R}}),a.jsx(P,{onLegendClick:I,tooltipConfig:O,noAnimation:w,noLegend:N,loading:l,onClick:i,onDataPointClick:p,syncId:v,ChartPlaceholder:W??h,dataset:L,measures:b,dimensions:k,chartConfig:_,style:{...t,height:`calc(${t==null?void 0:t.height} * ${(n==null?void 0:n.length)!==0?.8:1})`},className:typeof p=="function"||typeof i=="function"?"has-click-handler":void 0})]})});d.displayName="ColumnChartWithTrend";try{d.displayName="ColumnChartWithTrend",d.__docgenInfo={description:"A `ColumnChartWithTrend` is a data visualization where each category is represented by a rectangle, with the height of the rectangle being proportional to the values being plotted amd a trend line which is displayed above the column chart.",displayName:"ColumnChartWithTrend",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one column in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this column should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: column width, defaults to `auto`\n- `opacity`: column opacity, defaults to `1`\n- `stackId`: columns with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},loading:{defaultValue:null,description:`Flag whether the chart should display a loading indicator.

This can either be a placeholder shimmer (in case the chart has no data yet) or a small
loading bar in the top of the chart (in case the chart has already some data to display).`,name:"loading",required:!1,type:{name:"boolean"}},dataset:{defaultValue:null,description:"The `dataset` is an array of object which will be displayed in the chart.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'Omit<ICartesianChartConfig, "secondYAxis" | "secondYAxisConfig"> & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | ... 1 more ... | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to overwrite internally used tooltip props, so use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}}}}}catch{}try{d.displayName="ColumnChartWithTrend",d.__docgenInfo={description:"A `ColumnChartWithTrend` is a data visualization where each category is represented by a rectangle, with the height of the rectangle being proportional to the values being plotted amd a trend line which is displayed above the column chart.",displayName:"ColumnChartWithTrend",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one column in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this column should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: column width, defaults to `auto`\n- `opacity`: column opacity, defaults to `1`\n- `stackId`: columns with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},loading:{defaultValue:null,description:`Flag whether the chart should display a loading indicator.

This can either be a placeholder shimmer (in case the chart has no data yet) or a small
loading bar in the top of the chart (in case the chart has already some data to display).`,name:"loading",required:!1,type:{name:"boolean"}},dataset:{defaultValue:null,description:"The `dataset` is an array of object which will be displayed in the chart.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},noLegend:{defaultValue:null,description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:null,description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Vertical position of the legend. Can be one of the following: `"top"`,`"middle"`, `"bottom"` (`"middle"` is not supported for: ColumnChartWithTrend, DonutChart, PieChart)\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:'Omit<ICartesianChartConfig, "secondYAxis" | "secondYAxisConfig"> & { margin?: { right?: number; left?: number; top?: number; bottom?: number; }; legendPosition?: "top" | ... 1 more ... | "middle"; legendHorizontalAlign?: "center" | ... 1 more ... | "right"; resizeDebounce?: number; }'}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to overwrite internally used tooltip props, so use with caution!`,name:"tooltipConfig",required:!1,type:{name:"TooltipProps<string | number | (string | number)[], string | number>"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType"}}}}}catch{}const et={title:"ColumnChartWithTrend",component:d,args:{style:{height:"400px"},dataset:U,dimensions:[{accessor:"name",formatter:e=>`${e} 2019`}],measures:[{accessor:"users",label:"Users",formatter:e=>e.toLocaleString(),type:"line"},{accessor:"sessions",label:"Active Sessions",type:"bar"}]}},f={},g={args:{dataset:[]}};var V,D,T;f.parameters={...f.parameters,docs:{...(V=f.parameters)==null?void 0:V.docs,source:{originalSource:"{}",...(T=(D=f.parameters)==null?void 0:D.docs)==null?void 0:T.source}}};var A,S,j;g.parameters={...g.parameters,docs:{...(A=g.parameters)==null?void 0:A.docs,source:{originalSource:`{
  args: {
    dataset: []
  }
}`,...(j=(S=g.parameters)==null?void 0:S.docs)==null?void 0:j.source}}};const tt=["Default","LoadingPlaceholder"];export{f as Default,g as LoadingPlaceholder,tt as __namedExportsOrder,et as default};
