import{M as c,C as d,e as u}from"./chunk-HLWAVYOI-UeCpg4wL.js";import{T as o}from"./index-BkxB40pG.js";import{B as m}from"./Button-a5xMWTkk.js";import"./employee-QIf_hgHb.js";import{A as g}from"./DomRefTable.module-rVGi012t.js";import{D as f}from"./DocsHeader-sc4weluW.js";import{F as h}from"./Footer-jfdx2u5v.js";import{j as t}from"./jsx-runtime-DtaoT6pD.js";import"./index-OjgoNOWw.js";import{D as x}from"./DomRefTable-ek1hVJ0R.js";import{u as p}from"./index-RwE9nQVW.js";import"./iframe-_OlRtZJR.js";import"../sb-preview/runtime.js";import"./index--F0XPsCm.js";import"./index-QYh6idnL.js";import"./mapValues-TkJEqHhn.js";import"./_baseForOwn-SiKZKQog.js";import"./_baseUniq-frCQiV_D.js";import"./index-PPLHz8o0.js";import"./ToggleButton-78njN9eL.js";import"./withWebComponent-ceo0jn6D.js";import"./utils-CrDMzPRG.js";import"./CustomElementsScopeUtils-FvbtGFoH.js";import"./useIsomorphicLayoutEffect-s31TYDr7.js";import"./Icons-3pbvVZUr.js";import"./UI5Element-51XrG2PJ.js";import"./Icon-HNXZSIOG.js";import"./slot-HSrR9XJ-.js";import"./AriaLabelHelper-RbKlVwzD.js";import"./MarkedEvents-aYv14vsS.js";import"./i18n-defaults-RBzcmDt8.js";import"./react-jss.esm-AmlvxLhk.js";import"./index-visvyNcT.js";import"./decline-Q45dXYUl.js";import"./i18n-defaults-n2A5pq_J.js";import"./information-WfdY8QHP.js";import"./alert-TGfQazfI.js";import"./class-map-JXa0-u4l.js";import"./index-S1zyQWjr.js";import"./clsx-2Jv0kmJG.js";import"./ThemingParameters-UghqSl-x.js";import"./addCustomCSSWithScoping-PxRYiixA.js";import"./index-WbINX23N.js";import"./Integer-kog98579.js";import"./index-F2xDrKNT.js";import"./Avatar-hI9OSh5N.js";import"./ResizeHandler-9pqGT1BJ.js";import"./index-06AsSkAh.js";import"./index-pvnqkZ_E.js";import"./Link-DluRE2Z1.js";import"./WrappingType-avPrqc94.js";import"./index-ZYxd7chN.js";import"./TableOfContent-bZnE1URh.js";import"./index-nNeIKPnb.js";import"./Label-z__cPwIf.js";import"./index-2S6zoQWg.js";import"./index-f2x4nzdX.js";import"./Popover-pPQH5XeW.js";import"./PopupUtils-JhQDb1QD.js";import"./getActiveElement-IIKAy3xo.js";import"./PopupsCommon.css-q9U65Wkb.js";import"./FocusableElements-W9IwOAGU.js";import"./isElementHidden-d3-Fo4V6.js";import"./MediaRange-sEMt71Ve.js";import"./style-map-uWW-8QIe.js";import"./BrowserScrollbar.css-HfEGARrw.js";const b=[{name:"accessibilityAttributes",visibility:"public",since:"1.2.0",type:"object",noattribute:"true",description:`An object of strings that defines several additional accessibility attribute values for customization depending on the use case.

It supports the following fields:

<ul> <li><code>expanded</code>: Indicates whether the button, or another grouping element it controls, is currently expanded or collapsed. Accepts the following string values: <ul> <li><code>true</code></li> <li><code>false</code></li> </ul> </li> <li><code>hasPopup</code>: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button. Accepts the following string values: <ul> <li><code>Dialog</code></li> <li><code>Grid</code></li> <li><code>ListBox</code></li> <li><code>Menu</code></li> <li><code>Tree</code></li> </ul> </li> <li><code>controls</code>: Identifies the element (or elements) whose contents or presence are controlled by the button element. Accepts a string value.</li> </ul>`}];function j(e={}){const{wrapper:i}=Object.assign({},p(),e.components);return i?t.jsx(i,{...e,children:t.jsx(n,{})}):n();function n(){const s=Object.assign({h2:"h2"},p(),e.components);return t.jsxs(t.Fragment,{children:[t.jsx(c,{title:"Inputs / ToggleButton",component:o,argTypes:{children:{control:"text"}},args:{design:m.Default,icon:"employee",children:"ToggleButton Text"}}),`
`,t.jsx(f,{}),`
`,t.jsx("br",{}),`
`,t.jsx(s.h2,{id:"example",children:"Example"}),`
`,t.jsx(d,{children:t.jsx(u,{name:"Default",children:a=>t.jsx(o,{...a})})}),`
`,t.jsx(s.h2,{id:"properties",children:"Properties"}),`
`,t.jsx(g,{story:"Default"}),`
`,t.jsx(x,{rows:b}),`
`,t.jsx(h,{})]})}}const l=e=>t.jsx(o,{...e});l.storyName="Default";l.parameters={storySource:{source:`args => {
  return <ToggleButton {...args} />;
}`}};const r={title:"Inputs / ToggleButton",component:o,args:{design:m.Default,icon:"employee",children:"ToggleButton Text"},argTypes:{children:{control:"text"}},tags:["stories-mdx"],includeStories:["defaultStory"]};r.parameters=r.parameters||{};r.parameters.docs={...r.parameters.docs||{},page:j};const Et=["defaultStory"];export{Et as __namedExportsOrder,r as default,l as defaultStory};
//# sourceMappingURL=ToggleButton.stories-nGlCFkvj.js.map
