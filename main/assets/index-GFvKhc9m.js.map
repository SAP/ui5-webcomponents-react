{"version":3,"file":"index-GFvKhc9m.js","sources":["../../packages/main/src/enums/FormBackgroundDesign.ts","../../packages/main/src/components/Form/Form.jss.ts","../../packages/main/src/components/Form/FormContext.ts","../../packages/main/src/components/Form/index.tsx","../../packages/main/src/components/FormGroup/FormGroupTitle.tsx","../../packages/main/src/components/FormGroup/index.tsx","../../packages/main/src/components/FormItem/index.tsx"],"sourcesContent":["export enum FormBackgroundDesign {\n  /**\n   * A solid background color dependent on the theme.\n   */\n  Solid = 'Solid',\n  /**\n   * Transparent background.\n   */\n  Transparent = 'Transparent'\n}\n","import { ThemingParameters } from '@ui5/webcomponents-react-base';\n\nconst styles = {\n  formContainer: {\n    containerType: 'inline-size'\n  },\n  form: {\n    display: 'grid',\n    alignItems: 'center',\n    rowGap: '0.25rem',\n    columnGap: '0.5rem',\n    '--_ui5wcr_form_label_text_align': 'end',\n\n    '@container (max-width: 599px)': {\n      '--_ui5wcr_form_label_span': 'var(--_ui5wcr_form_label_span_s)',\n      '--_ui5wcr_form_columns': 'var(--_ui5wcr_form_columns_s)',\n      gridTemplateColumns: `repeat(calc(12 * var(--_ui5wcr_form_columns)), 1fr)`,\n      '--_ui5wcr_form_content_span': 'calc(12 - var(--_ui5wcr_form_label_span))'\n    },\n    '@container (min-width: 600px) and (max-width: 1023px)': {\n      '--_ui5wcr_form_label_span': 'var(--_ui5wcr_form_label_span_m)',\n      '--_ui5wcr_form_columns': 'var(--_ui5wcr_form_columns_m)',\n      gridTemplateColumns: `repeat(calc(12 * var(--_ui5wcr_form_columns)), 1fr)`,\n      '--_ui5wcr_form_content_span': 'calc(12 - var(--_ui5wcr_form_label_span))'\n    },\n    '@container (min-width: 1024px) and (max-width: 1439px)': {\n      '--_ui5wcr_form_label_span': 'var(--_ui5wcr_form_label_span_l)',\n      '--_ui5wcr_form_columns': 'var(--_ui5wcr_form_columns_l)',\n      gridTemplateColumns: `repeat(calc(12 * var(--_ui5wcr_form_columns)), 1fr)`,\n      '--_ui5wcr_form_content_span': 'calc(12 - var(--_ui5wcr_form_label_span))'\n    },\n    '@container (min-width: 1440px)': {\n      '--_ui5wcr_form_label_span': 'var(--_ui5wcr_form_label_span_xl)',\n      '--_ui5wcr_form_columns': 'var(--_ui5wcr_form_columns_xl)',\n      gridTemplateColumns: `repeat(calc(12 * var(--_ui5wcr_form_columns)), 1fr)`,\n      '--_ui5wcr_form_content_span': 'calc(12 - var(--_ui5wcr_form_label_span))'\n    }\n  },\n  solid: {\n    backgroundColor: ThemingParameters.sapGroup_ContentBackground\n  },\n  transparent: {\n    backgroundColor: 'transparent'\n  },\n  formTitle: {\n    borderBlockEnd: `1px solid ${ThemingParameters.sapGroup_TitleBorderColor}`,\n    marginBlockEnd: '1.75rem',\n    gridColumn: '1 / -1'\n  },\n  labelSpan12: {\n    '--_ui5wcr_form_content_span': 12,\n    '--_ui5wcr_form_label_text_align': 'start',\n    '--_ui5wcr_form_label_span': 12,\n    rowGap: 0\n  }\n};\n\nexport { styles };\n","import { createContext, useContext } from 'react';\nimport type { FormContextType, GroupContextType } from './types.js';\n\nexport const FormContext = createContext<FormContextType>({ labelSpan: null, recalcTrigger: 0 });\n\nexport function useFormContext() {\n  return useContext(FormContext);\n}\n\nexport const GroupContext = createContext<GroupContextType>({});\n\nexport function useFormGroupContext() {\n  return useContext(GroupContext);\n}\n","'use client';\n\nimport { Device, useSyncRef } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport type { ElementType, ReactNode } from 'react';\nimport React, { forwardRef, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FormBackgroundDesign, TitleLevel } from '../../enums/index.js';\nimport type { CommonProps } from '../../interfaces/index.js';\nimport { Title } from '../../webComponents/index.js';\nimport { styles } from './Form.jss.js';\nimport { FormContext } from './FormContext.js';\nimport type { FormContextType, FormElementTypes, FormGroupLayoutInfo, FormItemLayoutInfo, ItemInfo } from './types.js';\n\nconst recalcReducerFn = (prev: number) => {\n  return prev + 1;\n};\n\nconst useStyles = createUseStyles(styles, { name: 'Form' });\n\nexport interface FormPropTypes extends CommonProps {\n  /**\n   * Components that are placed into Form.\n   *\n   * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `FormGroup` or `FormItem` in order to preserve the intended design.\n   */\n  children: ReactNode | ReactNode[];\n  /**\n   * Specifies the background color of the Form content.\n   */\n  backgroundDesign?: FormBackgroundDesign;\n  /**\n   * Form title\n   */\n  titleText?: string;\n  /**\n   * Form columns for small size (`< 600px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   */\n  columnsS?: number;\n  /**\n   * Form columns for medium size (`600px` - `1023px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   *\n   * __Note__: The number of columns for medium size must not be smaller than the number of columns for small size.\n   */\n  columnsM?: number;\n  /**\n   * Form columns for large size (`1024px` - `1439px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   *\n   * __Note:__ The number of columns for large size must not be smaller than the number of columns for medium size.\n   */\n  columnsL?: number;\n  /**\n   * Form columns for extra large size (`>= 1440px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 2\n   *\n   * __Note:__ The number of columns for extra large size must not be smaller than the number of columns for large size.\n   */\n  columnsXL?: number;\n\n  /**\n   * Default span for labels in small size (`< 600px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 12\n   */\n  labelSpanS?: number;\n  /**\n   * Default span for labels in medium size (`600px` - `1023px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 2\n   */\n  labelSpanM?: number;\n  /**\n   * Default span for labels in large size (`1024px` - `1439px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 4\n   */\n  labelSpanL?: number;\n  /**\n   * Default span for labels in extra large size (`>= 1440px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 4\n   */\n  labelSpanXL?: number;\n  /**\n   * Sets the components outer HTML tag.\n   *\n   * __Note:__ For TypeScript the types of `ref` are bound to the default tag name, if you change it you are responsible to set the respective types yourself.\n   */\n  as?: keyof HTMLElementTagNameMap;\n}\n\n/**\n * The `Form` component arranges labels and fields into groups and rows. There are different ways to visualize forms for different screen sizes.\n * It is possible to change the alignment of all labels by setting the CSS `align-items` property, per default all labels are centered.\n *\n * __Note:__ The `Form` calculates its width based on the available space of its container. If the container also dynamically adjusts its width to its contents, you must ensure that you specify a fixed width, either for the container or for the `Form` itself. (e.g. when used inside a 'popover').\n */\nconst Form = forwardRef<HTMLFormElement, FormPropTypes>((props, ref) => {\n  const {\n    as = 'form',\n    backgroundDesign = FormBackgroundDesign.Transparent,\n    children,\n    columnsS = 1,\n    columnsM = 1,\n    columnsL = 1,\n    columnsXL = 2,\n    className,\n    labelSpanS = 12,\n    labelSpanM = 2,\n    labelSpanL = 4,\n    labelSpanXL = 4,\n    titleText,\n    style,\n    ...rest\n  } = props;\n\n  const [items, setItems] = useState<Map<string, ItemInfo>>(() => new Map());\n  const classes = useStyles();\n\n  const columnsMap = new Map();\n  columnsMap.set('Phone', columnsS);\n  columnsMap.set('Tablet', columnsM);\n  columnsMap.set('Desktop', columnsL);\n  columnsMap.set('LargeDesktop', columnsXL);\n\n  const labelSpanMap = new Map();\n  labelSpanMap.set('Phone', labelSpanS);\n  labelSpanMap.set('Tablet', labelSpanM);\n  labelSpanMap.set('Desktop', labelSpanL);\n  labelSpanMap.set('LargeDesktop', labelSpanXL);\n\n  const [componentRef, formRef] = useSyncRef<HTMLFormElement>(ref);\n  // use the window range set as first best guess, if not available use Desktop\n  const [currentRange, setCurrentRange] = useState(Device.getCurrentRange()?.name ?? 'Desktop');\n  const lastRange = useRef(currentRange);\n  useEffect(() => {\n    const observer = new ResizeObserver(([form]) => {\n      const rangeInfo = Device.getCurrentRange(form.contentRect.width);\n      if (rangeInfo && lastRange.current !== rangeInfo.name) {\n        lastRange.current = rangeInfo.name;\n        setCurrentRange(rangeInfo.name);\n      }\n    });\n\n    if (formRef.current) {\n      observer.observe(formRef.current);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [formRef]);\n  const currentLabelSpan = labelSpanMap.get(currentRange);\n  const currentNumberOfColumns = columnsMap.get(currentRange);\n\n  const registerItem = useCallback((id: string, type: FormElementTypes, groupId?: string) => {\n    setItems((prev) => {\n      const clonedMap = new Map(prev);\n      if (groupId) {\n        const groupItem = clonedMap.get(groupId);\n        if (groupItem) {\n          groupItem.formItemIds = new Set(groupItem.formItemIds).add(id);\n        } else {\n          clonedMap.set(groupId, {\n            type: 'formGroup',\n            formItemIds: new Set([id])\n          });\n        }\n      } else {\n        if (!clonedMap.has(id)) {\n          clonedMap.set(id, { type, formItemIds: new Set() });\n        }\n      }\n      return clonedMap;\n    });\n  }, []);\n\n  const unregisterItem = useCallback((id: string, groupId?: string) => {\n    setItems((state) => {\n      const clonedMap = new Map(state);\n      if (groupId) {\n        const groupItem = clonedMap.get(groupId);\n        if (groupItem) {\n          groupItem.formItemIds.delete(id);\n        }\n      } else {\n        clonedMap.delete(id);\n      }\n      return clonedMap;\n    });\n  }, []);\n\n  const formLayoutContextValue = useMemo((): Omit<FormContextType, 'labelSpan' | 'recalcTrigger'> => {\n    const formItems: FormItemLayoutInfo[] = [];\n    const formGroups: FormGroupLayoutInfo[] = [];\n\n    let index = -1;\n    let localColumnIndex = 0;\n    // depending on the labelSpan, each form item takes up either 1 (labelSpan < 12) or 2 (labelSpan == 12) rows\n    const rowsPerFormItem = currentLabelSpan === 12 ? 2 : 1;\n    let rowIndex = (titleText ? 2 : 1) + rowsPerFormItem - 1;\n    // no. of rows in a \"line\" - e.g. when a group has 5 items, the next line needs to start below that group\n    let nextRowIndex = rowIndex;\n    const rowsWithGroup = {};\n\n    items.forEach(({ type, formItemIds }, id) => {\n      const columnIndex = localColumnIndex % currentNumberOfColumns;\n      index++;\n      if (type === 'formGroup') {\n        rowsWithGroup[rowIndex] = true;\n        formGroups.push({ id, index, columnIndex, rowIndex });\n        let localRowIndex = 1;\n        let localIndex = 1;\n\n        if (!formItemIds.size) {\n          nextRowIndex++;\n        }\n        formItemIds.forEach((itemId, _, set) => {\n          formItems.push({\n            id: itemId,\n            index,\n            groupId: id,\n            columnIndex,\n            rowIndex: rowIndex + localRowIndex,\n            lastGroupItem: set.size === localIndex\n          });\n          if (set.size === localIndex) {\n            if (nextRowIndex < rowIndex + localRowIndex + rowsPerFormItem) {\n              nextRowIndex = rowIndex + localRowIndex + rowsPerFormItem;\n            }\n          }\n          localRowIndex += rowsPerFormItem;\n          localIndex++;\n        });\n      } else {\n        if (nextRowIndex < rowIndex + 1) {\n          nextRowIndex += rowsPerFormItem;\n        }\n        formItems.push({ id, index, columnIndex, rowIndex });\n      }\n\n      if ((localColumnIndex + 1) % currentNumberOfColumns === 0) {\n        rowIndex = nextRowIndex;\n      }\n      localColumnIndex++;\n    });\n\n    return { formItems, formGroups, registerItem, unregisterItem, rowsWithGroup };\n  }, [items, registerItem, unregisterItem, currentNumberOfColumns, titleText, currentLabelSpan]);\n  const formClassNames = clsx(classes.form, classes[backgroundDesign.toLowerCase()]);\n  const CustomTag = as as ElementType;\n\n  const prevFormItems = useRef<undefined | FormItemLayoutInfo[]>(undefined);\n  const prevFormGroups = useRef<undefined | FormGroupLayoutInfo[]>(undefined);\n\n  const [recalcTrigger, fireRecalc] = useReducer(recalcReducerFn, 0, undefined);\n  useEffect(() => {\n    if (prevFormItems.current || prevFormGroups.current) {\n      let hasChanged =\n        formLayoutContextValue.formItems.length !== prevFormItems.current.length ||\n        formLayoutContextValue.formGroups.length !== prevFormGroups.current.length;\n      if (!hasChanged) {\n        hasChanged = !formLayoutContextValue.formGroups.every(\n          (item, index) => prevFormGroups.current.findIndex((element) => element.id === item.id) === index\n        );\n      }\n      if (!hasChanged) {\n        hasChanged = !formLayoutContextValue.formItems.every(\n          (item, index) => prevFormItems.current.findIndex((element) => element.id === item.id) === index\n        );\n      }\n      if (hasChanged) {\n        fireRecalc();\n      }\n    }\n    prevFormItems.current = formLayoutContextValue.formItems;\n    prevFormGroups.current = formLayoutContextValue.formGroups;\n  }, [formLayoutContextValue.formItems, formLayoutContextValue.formGroups]);\n\n  return (\n    <FormContext.Provider value={{ ...formLayoutContextValue, labelSpan: currentLabelSpan, recalcTrigger }}>\n      <CustomTag\n        className={clsx(classes.formContainer, className)}\n        suppressHydrationWarning={true}\n        ref={componentRef}\n        style={{\n          ...style,\n          '--_ui5wcr_form_label_span_s': labelSpanS,\n          '--_ui5wcr_form_label_span_m': labelSpanM,\n          '--_ui5wcr_form_label_span_l': labelSpanL,\n          '--_ui5wcr_form_label_span_xl': labelSpanXL,\n          '--_ui5wcr_form_columns_s': columnsS,\n          '--_ui5wcr_form_columns_m': columnsM,\n          '--_ui5wcr_form_columns_l': columnsL,\n          '--_ui5wcr_form_columns_xl': columnsXL\n        }}\n        {...rest}\n      >\n        <div className={formClassNames}>\n          {titleText && (\n            <Title level={TitleLevel.H3} className={classes.formTitle} style={{ gridColumn: '1 / -1' }}>\n              {titleText}\n            </Title>\n          )}\n          {children}\n        </div>\n      </CustomTag>\n    </FormContext.Provider>\n  );\n});\n\nForm.displayName = 'Form';\n\nexport { Form };\n","import { CssSizeVariables, ThemingParameters } from '@ui5/webcomponents-react-base';\nimport type { CSSProperties } from 'react';\nimport React from 'react';\nimport { createUseStyles } from 'react-jss';\n\ninterface FormGroupTitlePropTypes {\n  titleText: string;\n\n  style?: CSSProperties;\n}\n\nconst useStyles = createUseStyles(\n  {\n    title: {\n      gridColumn: '1 / span 12',\n      display: 'flex',\n      alignItems: 'center',\n      height: CssSizeVariables.ui5WcrFormGroupTitleHeight,\n      lineHeight: CssSizeVariables.ui5WcrFormGroupTitleHeight,\n      fontFamily: ThemingParameters.sapFontHeaderFamily,\n      color: ThemingParameters.sapGroup_TitleTextColor,\n      fontSize: ThemingParameters.sapFontHeader6Size,\n      fontWeight: 'bold',\n      margin: 0,\n      marginBlockStart: '1rem'\n    }\n  },\n  { name: 'FormGroupTitle' }\n);\nexport function FormGroupTitle({ titleText, style }: FormGroupTitlePropTypes) {\n  const classes = useStyles();\n  return (\n    <h6\n      className={classes.title}\n      title={titleText}\n      aria-label={titleText}\n      data-component-name=\"FormGroupTitle\"\n      style={style}\n    >\n      {titleText}\n    </h6>\n  );\n}\n","'use client';\n\nimport { useIsomorphicId } from '@ui5/webcomponents-react-base';\nimport type { ReactNode } from 'react';\nimport React, { useEffect, useMemo } from 'react';\nimport { GroupContext, useFormContext } from '../Form/FormContext.js';\nimport { FormGroupTitle } from './FormGroupTitle.js';\n\nexport interface FormGroupPropTypes {\n  /**\n   * Title of the FormGroup.\n   */\n  titleText?: string;\n  /**\n   * Content of the FormGroup.\n   *\n   * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `FormItem` in order to preserve the intended design.\n   */\n  children: ReactNode | ReactNode[];\n}\n\n/**\n * The `FormGroup` encapsulates `FormItems` into groups.\n *\n * __Note:__ `FormGroup` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `titleText` and `children`, especially no `className`, `style` or `ref`.\n */\nconst FormGroup = (props: FormGroupPropTypes) => {\n  const { titleText, children } = props;\n  const { formGroups: layoutInfos, registerItem, unregisterItem, labelSpan, recalcTrigger } = useFormContext();\n  const uniqueId = useIsomorphicId();\n\n  useEffect(() => {\n    registerItem?.(uniqueId, 'formGroup');\n    return () => unregisterItem?.(uniqueId);\n  }, [uniqueId, registerItem, unregisterItem, recalcTrigger]);\n\n  const layoutInfo = useMemo(\n    () => layoutInfos?.find(({ id: groupId }) => uniqueId === groupId),\n    [layoutInfos, uniqueId]\n  );\n\n  if (!layoutInfo) return null;\n  const { columnIndex, rowIndex } = layoutInfo;\n\n  return (\n    <GroupContext.Provider value={{ id: uniqueId }}>\n      <>\n        <FormGroupTitle\n          titleText={titleText}\n          style={{\n            display: titleText ? 'unset' : 'none',\n            gridColumnStart: columnIndex * 12 + 1,\n            gridRowStart: labelSpan === 12 ? rowIndex - 1 : rowIndex\n          }}\n        />\n        {children}\n      </>\n    </GroupContext.Provider>\n  );\n};\n\nFormGroup.displayName = 'FormGroup';\n\nexport { FormGroup };\n","'use client';\n\nimport { useIsomorphicId } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport type { CSSProperties, ReactElement, ReactNode } from 'react';\nimport React, { cloneElement, Fragment, isValidElement, useEffect, useMemo } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { WrappingType } from '../../enums/index.js';\nimport { flattenFragments } from '../../internal/utils.js';\nimport type { LabelPropTypes } from '../../webComponents/Label/index.js';\nimport { Label } from '../../webComponents/Label/index.js';\nimport { useFormContext, useFormGroupContext } from '../Form/FormContext.js';\n\nexport interface FormItemPropTypes {\n  /**\n   * Label of the FormItem. Can be either a string or a `Label` component.\n   */\n  label?: string | ReactElement;\n  /**\n   * Content of the FormItem. Can be an arbitrary React Node.\n   */\n  children: ReactNode | ReactNode[];\n}\n\ninterface InternalProps extends FormItemPropTypes {\n  columnIndex?: number;\n  rowIndex?: number;\n}\n\nconst CENTER_ALIGNED_CHILDREN = new Set(['CheckBox', 'RadioButton', 'Switch', 'RangeSlider', 'Slider']);\n\nconst useStyles = createUseStyles(\n  {\n    label: {\n      gridColumnEnd: 'span var(--_ui5wcr_form_label_span)',\n      justifySelf: 'var(--_ui5wcr_form_label_text_align)',\n      textAlign: 'var(--_ui5wcr_form_label_text_align)',\n      '&[data-label-span=\"12\"]': {\n        justifySelf: 'start',\n        paddingBlockEnd: '0.25rem'\n      },\n      '&:has(+ $content > [ui5-checkbox])': {\n        alignSelf: 'center'\n      },\n      '&:has(+ $content > [ui5-radio-button])': {\n        alignSelf: 'center'\n      },\n      '&:has(+ $content > [ui5-switch])': {\n        alignSelf: 'center'\n      },\n      '&:has(+ $content > [ui5-range-slider])': {\n        alignSelf: 'center'\n      },\n      '&:has(+ $content > [ui5-slider])': {\n        alignSelf: 'center'\n      }\n    },\n    content: {\n      display: 'flex',\n      gridColumnEnd: 'span var(--_ui5wcr_form_content_span)',\n      '&[data-label-span=\"12\"]': {\n        gridColumnEnd: 'span 12',\n        paddingBlockEnd: '0.625rem'\n      }\n    },\n    lastGroupItem: {\n      marginBlockEnd: '1rem'\n    }\n  },\n  { name: 'FormItem' }\n);\n\nfunction FormItemLabel({ label, style, className }: { label: ReactNode; style?: CSSProperties; className?: string }) {\n  const classes = useStyles();\n  const { labelSpan } = useFormContext();\n\n  if (typeof label === 'string') {\n    return (\n      <Label\n        className={clsx(classes.label, className)}\n        style={style}\n        wrappingType={WrappingType.Normal}\n        data-label-span={labelSpan}\n      >\n        {label ? `${label}:` : ''}\n      </Label>\n    );\n  }\n\n  if (isValidElement(label)) {\n    const { showColon, wrappingType, style: labelStyle, children } = label.props;\n    return cloneElement<LabelPropTypes & { 'data-label-span'?: number }>(\n      label,\n      {\n        showColon: showColon ?? true,\n        wrappingType: wrappingType ?? WrappingType.Normal,\n        className: clsx(classes.label, className, label.props.className),\n        style: {\n          ...style,\n          ...(labelStyle || {})\n        },\n        'data-label-span': labelSpan\n      },\n      children ?? ''\n    );\n  }\n\n  return null;\n}\n\nconst getContentForHtmlLabel = (label: ReactNode) => {\n  if (typeof label === 'string') {\n    return label;\n  } else if (isValidElement(label) && typeof label.props?.children === 'string') {\n    return label.props.children;\n  } else {\n    return '';\n  }\n};\n\n/**\n * A `FormItem` represents a row in a `Form`. A `FormItem` is a combination of one label and a component associated to this label.\n *\n * __Note__: The `FormItem` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `label` and `children`, especially no `className`, `style` or `ref`.\n */\nconst FormItem = (props: FormItemPropTypes) => {\n  const uniqueId = useIsomorphicId();\n  const { label, children } = props as InternalProps;\n  const {\n    formItems: layoutInfos,\n    registerItem,\n    unregisterItem,\n    labelSpan,\n    rowsWithGroup,\n    recalcTrigger\n  } = useFormContext();\n  const groupContext = useFormGroupContext();\n  const classes = useStyles();\n\n  useEffect(() => {\n    registerItem?.(uniqueId, 'formItem', groupContext.id);\n    return () => {\n      unregisterItem?.(uniqueId, groupContext.id);\n    };\n  }, [uniqueId, registerItem, unregisterItem, groupContext.id, recalcTrigger]);\n\n  const layoutInfo = useMemo(() => layoutInfos?.find(({ id: itemId }) => uniqueId === itemId), [layoutInfos, uniqueId]);\n\n  if (layoutInfos && !layoutInfo) return null;\n\n  const { columnIndex, rowIndex, lastGroupItem } = layoutInfo;\n\n  const gridColumnStart = (columnIndex ?? 0) * 12 + 1;\n\n  const contentGridColumnStart =\n    columnIndex != null ? (labelSpan === 12 ? gridColumnStart : gridColumnStart + (labelSpan ?? 0)) : undefined;\n\n  const calculatedGridRowIndex = (() => {\n    if (!layoutInfo.groupId && rowsWithGroup[rowIndex]) {\n      return rowIndex + 1;\n    } else return rowIndex ?? 0;\n  })();\n\n  const calculatedGridRowStart = calculatedGridRowIndex ?? 0;\n\n  return (\n    <>\n      <FormItemLabel\n        label={label}\n        style={{\n          gridColumnStart,\n          gridRowStart: labelSpan === 12 ? calculatedGridRowIndex - 1 : calculatedGridRowIndex ?? undefined,\n          // TODO remove this line as soon as Firefox enables :has by default. https://caniuse.com/css-has\n          alignSelf: CENTER_ALIGNED_CHILDREN.has((children as any)?.type?.displayName) ? 'center' : undefined\n        }}\n        className={clsx(labelSpan !== 12 && lastGroupItem && classes.lastGroupItem)}\n      />\n      <div\n        data-id={uniqueId}\n        className={clsx(classes.content, lastGroupItem && classes.lastGroupItem)}\n        style={{\n          gridColumnStart: contentGridColumnStart,\n          gridRowStart: rowIndex != null ? calculatedGridRowStart : undefined\n        }}\n        data-label-span={labelSpan}\n      >\n        {flattenFragments(children).map((child, index) => {\n          // @ts-expect-error: type can't be string because of `isValidElement`\n          if (isValidElement(child) && child.type && child.type.$$typeof !== Symbol.for('react.portal')) {\n            const content = getContentForHtmlLabel(label);\n            const childId = child?.props?.id;\n            return (\n              <Fragment key={`${content}-${uniqueId}-${index}`}>\n                {/*@ts-expect-error: child is ReactElement*/}\n                {cloneElement(child, { id: childId ?? `${uniqueId}-${index}` })}\n                <label htmlFor={childId ?? `${uniqueId}-${index}`} style={{ display: 'none' }} aria-hidden={true}>\n                  {content}\n                </label>\n              </Fragment>\n            );\n          }\n          return undefined;\n        })}\n      </div>\n    </>\n  );\n};\n\nFormItem.displayName = 'FormItem';\n\nexport { FormItem };\n"],"names":["FormBackgroundDesign","styles","ThemingParameters","FormContext","createContext","useFormContext","useContext","GroupContext","useFormGroupContext","recalcReducerFn","prev","useStyles","createUseStyles","Form","forwardRef","props","ref","as","backgroundDesign","children","columnsS","columnsM","columnsL","columnsXL","className","labelSpanS","labelSpanM","labelSpanL","labelSpanXL","titleText","style","rest","items","setItems","useState","classes","columnsMap","labelSpanMap","componentRef","formRef","useSyncRef","currentRange","setCurrentRange","Device.getCurrentRange","lastRange","useRef","useEffect","observer","form","rangeInfo","currentLabelSpan","currentNumberOfColumns","registerItem","useCallback","id","type","groupId","clonedMap","groupItem","unregisterItem","state","formLayoutContextValue","useMemo","formItems","formGroups","index","localColumnIndex","rowsPerFormItem","rowIndex","nextRowIndex","rowsWithGroup","formItemIds","columnIndex","localRowIndex","localIndex","itemId","_","set","formClassNames","clsx","CustomTag","prevFormItems","prevFormGroups","recalcTrigger","fireRecalc","useReducer","hasChanged","item","element","jsx","jsxs","Title","TitleLevel","CssSizeVariables","FormGroupTitle","FormGroup","layoutInfos","labelSpan","uniqueId","useIsomorphicId","layoutInfo","Fragment","CENTER_ALIGNED_CHILDREN","FormItemLabel","label","Label","WrappingType","isValidElement","showColon","wrappingType","labelStyle","cloneElement","getContentForHtmlLabel","_a","FormItem","groupContext","lastGroupItem","gridColumnStart","contentGridColumnStart","calculatedGridRowIndex","calculatedGridRowStart","flattenFragments","child","content","childId","Fragment2"],"mappings":"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"}