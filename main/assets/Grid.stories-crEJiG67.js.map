{"version":3,"file":"Grid.stories-crEJiG67.js","sources":["../../packages/main/src/enums/GridPosition.ts","../../packages/base/src/hooks/useViewportRange.ts","../../packages/main/src/components/Grid/Grid.jss.ts","../../packages/main/src/components/Grid/index.tsx"],"sourcesContent":["export enum GridPosition {\n  Left = 'Left',\n  Center = 'Center',\n  Right = 'Right'\n}\n","'use client';\n\nimport { useEffect, useState } from 'react';\nimport { getCurrentRange, attachMediaHandler, detachMediaHandler } from '../Device/index.js';\n\nexport const useViewportRange = () => {\n  const [currentRange, setCurrentRange] = useState(getCurrentRange()?.name);\n\n  useEffect(() => {\n    let isMounted = true;\n    const handler = ({ name: range }) => {\n      if (isMounted === true) {\n        setCurrentRange(range);\n      }\n    };\n    attachMediaHandler(handler);\n    return () => {\n      isMounted = false;\n      detachMediaHandler(handler);\n    };\n  }, [setCurrentRange]);\n\n  return currentRange;\n};\n","const generateGridSpans = () => {\n  const gridSpan = {};\n  for (let i = 1; i <= 12; i++) {\n    gridSpan[`gridSpan${i}`] = { gridColumn: `span ${i}` };\n  }\n  return gridSpan;\n};\n\nexport const styles = {\n  grid: {\n    display: 'grid',\n    gridTemplateColumns: `repeat(12, 1fr)`\n  },\n  ...generateGridSpans(),\n  positionCenter: {\n    marginInline: 'auto'\n  },\n  positionRight: {\n    marginInline: 'auto 0px'\n  }\n};\n","'use client';\n\nimport { useViewportRange } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport type { CSSProperties, ReactNode } from 'react';\nimport React, { forwardRef, isValidElement } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { GridPosition } from '../../enums/index.js';\nimport type { CommonProps } from '../../interfaces/index.js';\nimport { flattenFragments } from '../../internal/utils.js';\nimport { styles } from './Grid.jss.js';\n\nexport interface GridPropTypes extends CommonProps {\n  /**\n   * Vertical spacing between the rows in the Grid. If not specified, then 1rem.\n   */\n  vSpacing?: CSSProperties['height'];\n  /**\n   * Horizontal spacing between the content in the Grid. If not specified, then 1rem.\n   */\n  hSpacing?: CSSProperties['width'];\n  /**\n   * Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".\n   */\n  position?: GridPosition | keyof typeof GridPosition;\n  /**\n   * A string type that represents Grid's default span values for very large, large, medium and small screens for the whole Grid.\n   * Allowed values are separated by space Letters XL, L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\".\n   * Note that the parameters has to be provided in the order very large, large, medium, small.\n   *\n   * You can override this default span on each child element by setting the prop `data-layout-span`.\n   */\n  defaultSpan?: string;\n  /**\n   * Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for very large, large, medium and small screens.\n   * Allowed values are separated by space Letters XL, L, M or S followed by number of columns from 0 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\".\n   * Note that the parameters has to be provided in the order very-large, large, medium, small.\n   *\n   * You can override this default indent on each child element by setting the prop `data-layout-indent`.\n   */\n  defaultIndent?: string;\n  /**\n   * Components that are placed into Grid layout.\n   */\n  children?: ReactNode | ReactNode[];\n}\n\nconst INDENT_PATTERN =\n  /^([X][L](?<LargeDesktop>[0-9]|1[0-2]))? ?([L](?<Desktop>[0-9]|1[0-2]))? ?([M](?<Tablet>[0-9]|1[0-2]))? ?([S](?<Phone>[0-9]|1[0-2]))?$/i;\nconst SPAN_PATTERN =\n  /^([X][L](?<LargeDesktop>[1-9]|1[0-2]))? ?([L](?<Desktop>[1-9]|1[0-2]))? ?([M](?<Tablet>[1-9]|1[0-2]))? ?([S](?<Phone>[1-9]|1[0-2]))?$/i;\n\nconst DefaultSpanMap = new Map();\nDefaultSpanMap.set('Phone', 1);\nDefaultSpanMap.set('Tablet', 2);\nDefaultSpanMap.set('Desktop', 4);\nDefaultSpanMap.set('LargeDesktop', 4);\n\nconst DefaultIndentMap = new Map();\nDefaultIndentMap.set('Phone', 0);\nDefaultIndentMap.set('Tablet', 0);\nDefaultIndentMap.set('Desktop', 0);\nDefaultIndentMap.set('LargeDesktop', 0);\n\nconst getSpanFromString = (span, currentRange) => {\n  const spanConfig = SPAN_PATTERN.exec(span);\n  return spanConfig?.groups[currentRange] ?? DefaultSpanMap.get(currentRange);\n};\n\nconst getIndentFromString = (indent, currentRange) => {\n  const indentConfig = INDENT_PATTERN.exec(indent);\n  return indentConfig?.groups[currentRange] ?? DefaultIndentMap.get(currentRange);\n};\n\nconst useStyles = createUseStyles(styles, { name: 'Grid' });\n/**\n * A layout container component used for aligning items with various sizes in a simple grid.\n */\nconst Grid = forwardRef<HTMLDivElement, GridPropTypes>((props, ref) => {\n  const { position, children, hSpacing, vSpacing, style, className, slot, defaultIndent, defaultSpan, ...rest } = props;\n\n  const classes = useStyles();\n  const currentRange = useViewportRange();\n  const gridClasses = clsx(\n    classes.grid,\n    GridPosition.Center === position && classes.positionCenter,\n    GridPosition.Right === position && classes.positionRight,\n    className\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={gridClasses}\n      style={{ gridRowGap: vSpacing, gridColumnGap: hSpacing, ...style }}\n      slot={slot}\n      {...rest}\n    >\n      {flattenFragments(children, Infinity).map((child) => {\n        if (!isValidElement(child)) {\n          return null;\n        }\n\n        const childSpan = getSpanFromString(child.props['data-layout-span'] ?? defaultSpan, currentRange);\n        const childClass = classes[`gridSpan${childSpan}`];\n\n        const childrenWithGridLayout = [\n          <div className={childClass} key={child.key}>\n            {child}\n          </div>\n        ];\n\n        const indentSpan = getIndentFromString(child.props['data-layout-indent'] ?? defaultIndent, currentRange);\n        if (indentSpan && indentSpan > 0) {\n          childrenWithGridLayout.unshift(\n            <span\n              className={classes[`gridSpan${indentSpan}`]}\n              key={`${child.key}-indent`}\n              data-component-name=\"GridIndentSpacer\"\n              aria-hidden=\"true\"\n            />\n          );\n        }\n        return childrenWithGridLayout;\n      })}\n    </div>\n  );\n});\n\nGrid.displayName = 'Grid';\n\nGrid.defaultProps = {\n  hSpacing: '1rem',\n  vSpacing: '1rem',\n  defaultIndent: 'XL0 L0 M0 S0',\n  defaultSpan: 'XL3 L3 M6 S12'\n};\n\nexport { Grid };\n"],"names":["GridPosition","useViewportRange","currentRange","setCurrentRange","useState","_a","getCurrentRange","useEffect","isMounted","handler","range","attachMediaHandler","detachMediaHandler","generateGridSpans","gridSpan","i","styles","INDENT_PATTERN","SPAN_PATTERN","DefaultSpanMap","DefaultIndentMap","getSpanFromString","span","spanConfig","getIndentFromString","indent","indentConfig","useStyles","createUseStyles","Grid","forwardRef","props","ref","position","children","hSpacing","vSpacing","style","className","slot","defaultIndent","defaultSpan","rest","classes","gridClasses","clsx","jsx","flattenFragments","child","isValidElement","childSpan","childClass","childrenWithGridLayout","indentSpan"],"mappings":"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"}