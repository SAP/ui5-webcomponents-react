import{j as r}from"./jsx-runtime-DtaoT6pD.js";import{c as b}from"./clsx-c3LcQGjR.js";import{r as g}from"./index-OjgoNOWw.js";import{c as T}from"./react-jss.esm-tmBtHfec.js";import{u as _,E as S}from"./i18n-defaults-PmTGElot.js";import{T as t}from"./ThemingParameters-UghqSl-x.js";const W={text:{fontFamily:t.sapFontFamily,fontSize:t.sapFontSize,fontWeight:"normal",color:t.sapTextColor,display:"inline-block",boxSizing:"border-box",whiteSpace:"pre-line",wordWrap:"break-word",maxWidth:"100%","&::selection":{background:t.sapSelectedColor,color:t.sapContent_ContrastTextColor}},renderWhitespace:{whiteSpace:"pre-wrap"},noWrap:{textOverflow:"ellipsis",whiteSpace:"nowrap",wordWrap:"normal",overflow:"hidden","&$renderWhitespace":{whiteSpace:"pre"}},maxLines:{display:"-webkit-box",WebkitBoxOrient:"vertical",overflow:"hidden",WebkitLineClamp:"var(--_ui5wcr_maxLines)"},hyphenated:{hyphens:"auto"},emptyIndicator:{lineHeight:"normal",color:t.sapTextColor},pseudoInvisibleText:{fontSize:0,position:"absolute",userSelect:"none",left:0,top:0}},N=T(W,{name:"Text"}),o=g.forwardRef((s,p)=>{const{children:i,renderWhitespace:l,wrapping:d=!0,className:c,style:m,maxLines:n,hyphenated:h,emptyIndicator:u,...f}=s,e=N(),y=_("@ui5/webcomponents-react"),x=b(e.text,d===!1&&e.noWrap,l&&e.renderWhitespace,typeof n=="number"&&e.maxLines,h&&e.hyphenated,c),a=u&&!i,w=a?r.jsx("span",{"aria-hidden":a,"data-component-name":"TextEmptyIndicator",className:e.emptyIndicator,children:"â€“"}):i;return r.jsxs("span",{ref:p,style:{"--_ui5wcr_maxLines":typeof n=="number"?n:void 0,...m},className:x,...f,children:[w,a&&r.jsx("span",{className:e.pseudoInvisibleText,"data-component-name":"TextEmptyTextContainer",children:y.getText(S)})]})});o.displayName="Text";try{o.displayName="Text",o.__docgenInfo={description:"The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n\n__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.",displayName:"Text",props:{children:{defaultValue:null,description:"Pass the text as direct child of Text",name:"children",required:!1,type:{name:"ReactNode"}},renderWhitespace:{defaultValue:null,description:"Defines how white-space inside <code>Text</code> is handled. If set to true, sequences of white space are preserved.",name:"renderWhitespace",required:!1,type:{name:"boolean"}},wrapping:{defaultValue:null,description:"Defines whether the text wraps when there is not enough space.",name:"wrapping",required:!1,type:{name:"boolean"}},maxLines:{defaultValue:null,description:"Limits the number of lines for wrapping texts.",name:"maxLines",required:!1,type:{name:"number"}},emptyIndicator:{defaultValue:null,description:`Specifies if an empty indicator should be displayed when there is no text.
@since 1.23.0`,name:"emptyIndicator",required:!1,type:{name:"boolean"}},hyphenated:{defaultValue:null,description:"Defines the type of text wrapping to be used (hyphenated or normal).\n\n__Note:__ This prop only takes effect if the `wrapping` prop is set to `true`.\n@since 1.23.0",name:"hyphenated",required:!1,type:{name:"boolean"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}}}}}catch{}export{o as T};
//# sourceMappingURL=index-ETl9kWYS.js.map
