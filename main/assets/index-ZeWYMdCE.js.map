{"version":3,"file":"index-ZeWYMdCE.js","sources":["../../packages/charts/src/components/ComposedChart/Placeholder.tsx","../../packages/charts/src/components/ComposedChart/index.tsx"],"sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React from 'react';\nimport ContentLoader from 'react-content-loader/dist/react-content-loader.es.js';\nimport type { IChartMeasure } from '../../interfaces/IChartMeasure.js';\n\nconst barContentVertical = (\n  <>\n    <rect x=\"20\" y=\"20\" width=\"85\" height=\"15\" />\n    <rect x=\"20\" y=\"40\" width=\"117\" height=\"15\" />\n    <rect x=\"20\" y=\"60\" width=\"67\" height=\"15\" />\n    <rect x=\"20\" y=\"80\" width=\"75\" height=\"15\" />\n    <rect x=\"20\" y=\"100\" width=\"125\" height=\"15\" />\n    <rect x=\"20\" y=\"120\" width=\"60\" height=\"15\" />\n  </>\n);\n\nconst barContentHorizontal = (\n  <>\n    <rect x=\"20\" y=\"50\" width=\"15\" height=\"85\" />\n    <rect x=\"40\" y=\"18\" width=\"15\" height=\"117\" />\n    <rect x=\"60\" y=\"68\" width=\"15\" height=\"67\" />\n    <rect x=\"80\" y=\"60\" width=\"15\" height=\"75\" />\n    <rect x=\"100\" y=\"10\" width=\"15\" height=\"125\" />\n    <rect x=\"120\" y=\"75\" width=\"15\" height=\"60\" />\n  </>\n);\n\nconst lineContentVertical = (\n  <>\n    <path\n      d=\"M20 20 L75 40 L85 60 L125 80 L105 100 L90 120 L55 135 L92 120 L107 100 L127 80 L87 60 L77 40 L22 20 Z\"\n      fill=\"none\"\n      strokeWidth=\"2\"\n    />\n  </>\n);\n\nconst lineContentHorizontal = (\n  <>\n    <path\n      d=\"M20 135 L40 80 L60 70 L80 30 L100 50 L120 65 L135 100 L120 67 L100 52 L80 32 L60 72 L40 82 L20 137 Z\"\n      fill=\"none\"\n      strokeWidth=\"2\"\n    />\n  </>\n);\n\ninterface ComposedChartPlaceholderPropTypes {\n  layout: 'vertical' | 'horizontal';\n  measures: (IChartMeasure & { type: string })[];\n}\n\nexport const ComposedChartPlaceholder = ({ layout, measures }: ComposedChartPlaceholderPropTypes) => {\n  const distinctElements = new Set(measures.map((item) => item.type));\n\n  return (\n    <ContentLoader\n      viewBox=\"0 0 165 145\"\n      preserveAspectRatio=\"xMidYMid meet\"\n      width=\"100%\"\n      height=\"100%\"\n      speed={2}\n      backgroundColor={ThemingParameters.sapContent_ImagePlaceholderBackground}\n      foregroundColor={ThemingParameters.sapContent_ImagePlaceholderForegroundColor}\n      backgroundOpacity={ThemingParameters.sapContent_DisabledOpacity as any}\n    >\n      {layout === 'vertical' && <rect x=\"20\" y=\"10\" width=\"1\" height=\"135\" />}\n      {layout === 'horizontal' && <rect x=\"10\" y=\"135\" width=\"135\" height=\"1\" />}\n      {layout === 'vertical' && distinctElements.has('bar') && barContentVertical}\n      {layout === 'horizontal' && distinctElements.has('bar') && barContentHorizontal}\n      {layout === 'vertical' && (distinctElements.has('line') || distinctElements.has('area')) && lineContentVertical}\n      {layout === 'horizontal' &&\n        (distinctElements.has('line') || distinctElements.has('area')) &&\n        lineContentHorizontal}\n    </ContentLoader>\n  );\n};\n","'use client';\n\nimport { enrichEventWithDetails, ThemingParameters, useIsRTL, useSyncRef } from '@ui5/webcomponents-react-base';\nimport type { CSSProperties, FC } from 'react';\nimport React, { forwardRef, useCallback } from 'react';\nimport {\n  Area,\n  Bar,\n  Brush,\n  CartesianGrid,\n  Cell,\n  ComposedChart as ComposedChartLib,\n  LabelList,\n  Legend,\n  Line,\n  ReferenceLine,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { getValueByDataKey } from 'recharts/lib/util/ChartUtils.js';\nimport { useChartMargin } from '../../hooks/useChartMargin.js';\nimport { useLabelFormatter } from '../../hooks/useLabelFormatter.js';\nimport { useLegendItemClick } from '../../hooks/useLegendItemClick.js';\nimport { useLongestYAxisLabel } from '../../hooks/useLongestYAxisLabel.js';\nimport { useObserveXAxisHeights } from '../../hooks/useObserveXAxisHeights.js';\nimport { useOnClickInternal } from '../../hooks/useOnClickInternal.js';\nimport { usePrepareDimensionsAndMeasures } from '../../hooks/usePrepareDimensionsAndMeasures.js';\nimport { useTooltipFormatter } from '../../hooks/useTooltipFormatter.js';\nimport type { IChartBaseProps } from '../../interfaces/IChartBaseProps.js';\nimport type { IChartDimension } from '../../interfaces/IChartDimension.js';\nimport type { IChartMeasure } from '../../interfaces/IChartMeasure.js';\nimport { ChartContainer } from '../../internal/ChartContainer.js';\nimport { ChartDataLabel } from '../../internal/ChartDataLabel.js';\nimport { defaultFormatter } from '../../internal/defaults.js';\nimport { tickLineConfig, tooltipContentStyle, tooltipFillOpacity } from '../../internal/staticProps.js';\nimport { getCellColors, resolvePrimaryAndSecondaryMeasures } from '../../internal/Utils.js';\nimport { XAxisTicks } from '../../internal/XAxisTicks.js';\nimport { YAxisTicks } from '../../internal/YAxisTicks.js';\nimport { ComposedChartPlaceholder } from './Placeholder.js';\n\nconst dimensionDefaults = {\n  formatter: defaultFormatter\n};\n\nconst measureDefaults = {\n  formatter: defaultFormatter,\n  opacity: 1\n};\n\ninterface MeasureConfig extends IChartMeasure {\n  /**\n   * width of the current chart element, defaults to `1` for `lines` and `20` for bars\n   */\n  width?: number;\n  /**\n   * Opacity\n   * @default 1\n   */\n  opacity?: number;\n  /**\n   * Chart type\n   */\n  type: AvailableChartTypes;\n  /**\n   * bar Stack ID\n   * @default undefined\n   */\n  stackId?: string;\n  /**\n   * Highlight color of defined elements\n   * @param value {string | number} Current value of the highlighted measure\n   * @param measure {IChartMeasure} Current measure object\n   * @param dataElement {object} Current data element\n   */\n  highlightColor?: (value: number, measure: MeasureConfig, dataElement: Record<string, any>) => CSSProperties['color'];\n}\n\ninterface DimensionConfig extends IChartDimension {\n  interval?: number;\n}\n\nexport interface ComposedChartProps extends IChartBaseProps {\n  /**\n   * An array of config objects. Each object will define one dimension of the chart.\n   *\n   * **Required Properties**\n   * - `accessor`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * **Optional Properties**\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `interval`: number that controls how many ticks are rendered on the x axis\n   *\n   */\n  dimensions: DimensionConfig[];\n  /**\n   * An array of config objects. Each object is defining one element in the chart.\n   *\n   * **Required properties**\n   * - `accessor`: string containing the path to the dataset key this element should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   * - `type`: string which chart element to show. Possible values: `line`, `bar`, `area`.\n   *\n   * **Optional properties**\n   *\n   * - `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n   * - `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `hideDataLabel`: flag whether the data labels should be hidden in the chart for this element.\n   * - `DataLabel`: a custom component to be used for the data label\n   * - `width`: width of the current chart element, defaults to `1` for `lines` and `20` for bars\n   * - `opacity`: element opacity, defaults to `1`\n   * - `stackId`: bars with the same stackId will be stacked\n   * - `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   *    defined condition. Overwrites code>color</code> of the element.\n   *\n   */\n  measures: MeasureConfig[];\n  /**\n   * layout for showing measures. `horizontal` bars would equal the column chart, `vertical` would be a bar chart.\n   * Default Value: `horizontal`\n   */\n  layout?: 'horizontal' | 'vertical';\n}\n\nconst ChartTypes = {\n  line: Line,\n  bar: Bar,\n  area: Area\n};\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\ntype AvailableChartTypes = 'line' | 'bar' | 'area' | string;\n\n/**\n * The `ComposedChart` enables you to combine different chart types in one chart, e.g. showing bars together with lines.\n */\nconst ComposedChart = forwardRef<HTMLDivElement, ComposedChartProps>((props, ref) => {\n  const {\n    loading,\n    dataset,\n    onDataPointClick,\n    noLegend,\n    noAnimation,\n    tooltipConfig,\n    onLegendClick,\n    onClick,\n    layout,\n    style,\n    className,\n    slot,\n    syncId,\n    ChartPlaceholder,\n    children,\n    ...rest\n  } = props;\n\n  const [componentRef, chartRef] = useSyncRef<any>(ref);\n\n  const chartConfig = {\n    yAxisLabelsVisible: true,\n    yAxisVisible: false,\n    xAxisVisible: true,\n    gridStroke: ThemingParameters.sapList_BorderColor,\n    gridHorizontal: true,\n    gridVertical: false,\n    legendPosition: 'bottom',\n    legendHorizontalAlign: 'left',\n    zoomingTool: false,\n    resizeDebounce: 250,\n    yAxisWidth: null,\n    yAxisConfig: {},\n    xAxisConfig: {},\n    secondYAxisConfig: {},\n    secondXAxisConfig: {},\n    ...props.chartConfig\n  };\n  const { referenceLine } = chartConfig;\n\n  const { dimensions, measures } = usePrepareDimensionsAndMeasures(\n    props.dimensions,\n    props.measures,\n    dimensionDefaults,\n    measureDefaults\n  );\n\n  const tooltipValueFormatter = useTooltipFormatter(measures);\n\n  const primaryDimension = dimensions[0];\n  const { primaryMeasure, secondaryMeasure } = resolvePrimaryAndSecondaryMeasures(\n    measures,\n    chartConfig?.secondYAxis?.dataKey\n  );\n\n  const labelFormatter = useLabelFormatter(primaryDimension);\n\n  const dataKeys = measures.map(({ accessor }) => accessor);\n  const colorSecondY = chartConfig.secondYAxis\n    ? dataKeys.findIndex((key) => key === chartConfig.secondYAxis?.dataKey)\n    : 0;\n\n  const valueAccessor =\n    (attribute) =>\n    ({ payload }) => {\n      return getValueByDataKey(payload, attribute);\n    };\n\n  const onDataPointClickInternal = (payload, eventOrIndex, event) => {\n    if (typeof onDataPointClick === 'function') {\n      if (typeof eventOrIndex === 'number') {\n        const payloadValueLength = Array.isArray(payload?.value);\n        onDataPointClick(\n          enrichEventWithDetails(event, {\n            value: payloadValueLength ? payload.value[1] - payload.value[0] : payload.value,\n            dataIndex: payload.index ?? eventOrIndex,\n            dataKey: payloadValueLength\n              ? Object.keys(payload).filter((key) =>\n                  payload.value.length\n                    ? payload[key] === payload.value[1] - payload.value[0]\n                    : payload[key] === payload.value && key !== 'value'\n                )[0]\n              : payload.dataKey ??\n                Object.keys(payload).find((key) => payload[key] && payload[key] === payload.value && key !== 'value'),\n            payload: payload.payload\n          })\n        );\n      } else {\n        onDataPointClick(\n          enrichEventWithDetails({} as any, {\n            value: Array.isArray(eventOrIndex.value)\n              ? eventOrIndex.value[1] - eventOrIndex.value[0]\n              : eventOrIndex.value,\n            dataKey: eventOrIndex.dataKey,\n            dataIndex: eventOrIndex.index,\n            payload: eventOrIndex.payload\n          })\n        );\n      }\n    }\n  };\n\n  const onItemLegendClick = useLegendItemClick(onLegendClick);\n  const onClickInternal = useOnClickInternal(onClick);\n\n  const isBigDataSet = dataset?.length > 30 ?? false;\n  const primaryDimensionAccessor = primaryDimension?.accessor;\n\n  const [yAxisWidth, legendPosition] = useLongestYAxisLabel(\n    dataset,\n    layout === 'vertical' ? dimensions : measures,\n    chartConfig.legendPosition\n  );\n\n  const marginChart = useChartMargin(chartConfig.margin, chartConfig.zoomingTool);\n  const xAxisHeights = useObserveXAxisHeights(chartRef, layout === 'vertical' ? 1 : props.dimensions.length);\n\n  const measureAxisProps = {\n    axisLine: chartConfig.yAxisVisible,\n    tickLine: tickLineConfig,\n    tickFormatter: primaryMeasure?.formatter,\n    interval: 0\n  };\n\n  const Placeholder = useCallback(() => {\n    return <ComposedChartPlaceholder layout={layout} measures={measures} />;\n  }, [layout, measures]);\n\n  const { chartConfig: _0, dimensions: _1, measures: _2, ...propsWithoutOmitted } = rest;\n  const isRTL = useIsRTL(chartRef);\n\n  return (\n    <ChartContainer\n      ref={componentRef}\n      loading={loading}\n      dataset={dataset}\n      Placeholder={ChartPlaceholder ?? Placeholder}\n      style={style}\n      className={className}\n      slot={slot}\n      resizeDebounce={chartConfig.resizeDebounce}\n      {...propsWithoutOmitted}\n    >\n      <ComposedChartLib\n        syncId={syncId}\n        onClick={onClickInternal}\n        stackOffset=\"sign\"\n        margin={marginChart}\n        data={dataset}\n        layout={layout}\n        className={\n          typeof onDataPointClick === 'function' || typeof onClick === 'function' ? 'has-click-handler' : undefined\n        }\n      >\n        <CartesianGrid\n          vertical={chartConfig.gridVertical}\n          horizontal={chartConfig.gridHorizontal}\n          stroke={chartConfig.gridStroke}\n        />\n        {dimensions.map((dimension, index) => {\n          let AxisComponent;\n          const axisProps: any = {\n            dataKey: dimension.accessor,\n            interval: dimension?.interval ?? (isBigDataSet ? 'preserveStart' : 0),\n            tickLine: index < 1,\n            axisLine: index < 1,\n            allowDuplicatedCategory: index === 0\n          };\n\n          if (layout === 'vertical') {\n            axisProps.type = 'category';\n            axisProps.visible = false;\n            axisProps.hide = !chartConfig.yAxisVisible;\n            axisProps.tick = <YAxisTicks config={dimension} />;\n            axisProps.yAxisId = index;\n            axisProps.width = chartConfig.yAxisWidth ?? yAxisWidth;\n            AxisComponent = YAxis;\n            axisProps.orientation = isRTL ? 'right' : 'left';\n          } else {\n            axisProps.dataKey = dimension.accessor;\n            axisProps.tick = <XAxisTicks config={dimension} />;\n            axisProps.hide = !chartConfig.xAxisVisible;\n            axisProps.xAxisId = index;\n            axisProps.height = xAxisHeights[index];\n            AxisComponent = XAxis;\n            axisProps.reversed = isRTL;\n          }\n\n          return <AxisComponent key={dimension.accessor} {...axisProps} />;\n        })}\n        {layout === 'horizontal' && (\n          <YAxis\n            {...measureAxisProps}\n            yAxisId=\"primary\"\n            width={chartConfig.yAxisWidth ?? yAxisWidth}\n            orientation={isRTL ? 'right' : 'left'}\n            tick={chartConfig.yAxisLabelsVisible ? <YAxisTicks config={primaryMeasure} /> : false}\n            {...chartConfig.yAxisConfig}\n          />\n        )}\n        {layout === 'vertical' && (\n          <XAxis\n            {...measureAxisProps}\n            reversed={isRTL}\n            xAxisId=\"primary\"\n            type=\"number\"\n            tick={<XAxisTicks config={primaryMeasure} />}\n            {...chartConfig.xAxisConfig}\n          />\n        )}\n\n        {chartConfig.secondYAxis?.dataKey && layout === 'horizontal' && (\n          <YAxis\n            dataKey={chartConfig.secondYAxis.dataKey}\n            axisLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            tick={\n              <YAxisTicks\n                config={secondaryMeasure}\n                secondYAxisConfig={{\n                  color: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n                }}\n              />\n            }\n            tickLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            label={{\n              value: chartConfig.secondYAxis.name,\n              offset: 2,\n              angle: +90,\n              position: 'center'\n            }}\n            orientation={isRTL ? 'left' : 'right'}\n            interval={0}\n            yAxisId=\"secondary\"\n            {...chartConfig.secondYAxisConfig}\n          />\n        )}\n        {chartConfig.secondYAxis?.dataKey && layout === 'vertical' && (\n          <XAxis\n            dataKey={chartConfig.secondYAxis.dataKey}\n            axisLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            tick={\n              <XAxisTicks\n                config={secondaryMeasure}\n                secondYAxisConfig={{\n                  color: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n                }}\n              />\n            }\n            tickLine={{\n              stroke: chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`\n            }}\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            label={{ value: chartConfig.secondYAxis.name, offset: 2, angle: +90, position: 'center' }}\n            orientation=\"top\"\n            interval={0}\n            xAxisId=\"secondary\"\n            type=\"number\"\n            {...chartConfig.secondXAxisConfig}\n          />\n        )}\n        {referenceLine && (\n          <ReferenceLine\n            {...referenceLine}\n            stroke={referenceLine?.color ?? referenceLine?.stroke}\n            y={referenceLine?.value ? (layout === 'horizontal' ? referenceLine?.value : undefined) : referenceLine?.y}\n            x={referenceLine?.value ? (layout === 'vertical' ? referenceLine?.value : undefined) : referenceLine?.x}\n            yAxisId={referenceLine?.yAxisId ?? layout === 'horizontal' ? 'primary' : undefined}\n            xAxisId={referenceLine?.xAxisId ?? layout === 'vertical' ? 'primary' : undefined}\n            label={referenceLine?.label}\n          />\n        )}\n        {/*ToDo: remove conditional rendering once `active` is working again (https://github.com/recharts/recharts/issues/2703)*/}\n        {tooltipConfig?.active !== false && (\n          <Tooltip\n            cursor={tooltipFillOpacity}\n            formatter={tooltipValueFormatter}\n            contentStyle={tooltipContentStyle}\n            labelFormatter={labelFormatter}\n            {...tooltipConfig}\n          />\n        )}\n        {!noLegend && (\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          <Legend\n            verticalAlign={chartConfig.legendPosition}\n            align={chartConfig.legendHorizontalAlign}\n            onClick={onItemLegendClick}\n            wrapperStyle={legendPosition}\n          />\n        )}\n        {measures?.map((element, index) => {\n          const ChartElement = ChartTypes[element.type] as any as FC<any>;\n\n          const chartElementProps: any = {\n            isAnimationActive: noAnimation === false\n          };\n          let labelPosition = 'top';\n\n          switch (element.type) {\n            case 'line':\n              chartElementProps.activeDot = {\n                onClick: onDataPointClickInternal\n              };\n              chartElementProps.strokeWidth = element.width;\n              chartElementProps.strokeOpacity = element.opacity;\n              chartElementProps.dot = element.showDot ?? !isBigDataSet;\n              break;\n            case 'bar':\n              chartElementProps.hide = element.hide;\n              chartElementProps.fillOpacity = element.opacity;\n              chartElementProps.strokeOpacity = element.opacity;\n              chartElementProps.barSize = element.width;\n              chartElementProps.onClick = onDataPointClickInternal;\n              chartElementProps.stackId = element.stackId ?? undefined;\n              chartElementProps.labelPosition = element.stackId ? 'insideTop' : 'top';\n              if (layout === 'vertical') {\n                labelPosition = 'insideRight';\n              } else {\n                labelPosition = 'insideTop';\n              }\n              break;\n            case 'area':\n              chartElementProps.dot = !isBigDataSet;\n              chartElementProps.fillOpacity = 0.3;\n              chartElementProps.strokeOpacity = element.opacity;\n              chartElementProps.strokeWidth = element.width;\n              chartElementProps.activeDot = {\n                onClick: onDataPointClickInternal\n              };\n              break;\n          }\n\n          if (layout === 'vertical') {\n            chartElementProps.xAxisId = chartConfig.secondYAxis?.dataKey === element.accessor ? 'secondary' : 'primary';\n          } else {\n            chartElementProps.yAxisId = chartConfig.secondYAxis?.dataKey === element.accessor ? 'secondary' : 'primary';\n          }\n          return (\n            <ChartElement\n              key={element.accessor}\n              name={element.label ?? element.accessor}\n              label={\n                element.type === 'bar' || isBigDataSet ? undefined : (\n                  <ChartDataLabel config={element} chartType={element.type} position={labelPosition} />\n                )\n              }\n              stroke={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n              fill={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n              type=\"monotone\"\n              dataKey={element.accessor}\n              {...chartElementProps}\n            >\n              {element.type === 'bar' && (\n                <>\n                  <LabelList\n                    data={dataset}\n                    valueAccessor={valueAccessor(element.accessor)}\n                    content={<ChartDataLabel config={element} chartType=\"column\" position={'insideTop'} />}\n                  />\n                  {dataset.map((data, i) => {\n                    return (\n                      <Cell\n                        key={i}\n                        fill={getCellColors(element, data, index)}\n                        stroke={getCellColors(element, data, index)}\n                      />\n                    );\n                  })}\n                </>\n              )}\n            </ChartElement>\n          );\n        })}\n        {chartConfig.zoomingTool && (\n          <Brush\n            y={10}\n            dataKey={primaryDimensionAccessor}\n            tickFormatter={primaryDimension?.formatter}\n            stroke={ThemingParameters.sapObjectHeader_BorderColor}\n            travellerWidth={10}\n            height={20}\n          />\n        )}\n        {children}\n      </ComposedChartLib>\n    </ChartContainer>\n  );\n});\n\nComposedChart.defaultProps = {\n  noLegend: false,\n  noAnimation: false,\n  layout: 'horizontal'\n};\n\nComposedChart.displayName = 'ComposedChart';\n\nexport { ComposedChart };\n"],"names":["barContentVertical","jsxs","Fragment","jsx","barContentHorizontal","lineContentVertical","lineContentHorizontal","ComposedChartPlaceholder","layout","measures","distinctElements","item","ContentLoader","ThemingParameters","dimensionDefaults","defaultFormatter","measureDefaults","ChartTypes","Line","Bar","Area","ComposedChart","forwardRef","props","ref","loading","dataset","onDataPointClick","noLegend","noAnimation","tooltipConfig","onLegendClick","onClick","style","className","slot","syncId","ChartPlaceholder","children","rest","componentRef","chartRef","useSyncRef","chartConfig","referenceLine","dimensions","usePrepareDimensionsAndMeasures","tooltipValueFormatter","useTooltipFormatter","primaryDimension","primaryMeasure","secondaryMeasure","resolvePrimaryAndSecondaryMeasures","_a","labelFormatter","useLabelFormatter","dataKeys","accessor","colorSecondY","key","valueAccessor","attribute","payload","getValueByDataKey","onDataPointClickInternal","eventOrIndex","event","payloadValueLength","enrichEventWithDetails","onItemLegendClick","useLegendItemClick","onClickInternal","useOnClickInternal","isBigDataSet","primaryDimensionAccessor","yAxisWidth","legendPosition","useLongestYAxisLabel","marginChart","useChartMargin","xAxisHeights","useObserveXAxisHeights","measureAxisProps","tickLineConfig","Placeholder","useCallback","_0","_1","_2","propsWithoutOmitted","isRTL","useIsRTL","ChartContainer","ComposedChartLib","CartesianGrid","dimension","index","AxisComponent","axisProps","YAxisTicks","YAxis","XAxisTicks","XAxis","_b","_c","ReferenceLine","Tooltip","tooltipFillOpacity","tooltipContentStyle","Legend","element","ChartElement","chartElementProps","labelPosition","ChartDataLabel","LabelList","data","i","Cell","getCellColors","Brush"],"mappings":"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"}