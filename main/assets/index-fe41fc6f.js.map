{"version":3,"mappings":"yJA+JA,MAAAA,EAAAC,EAAa,WACX,CACA,iBACE,oBACA,iBACA,YACA,aACA,UACA,aACA,OACA,aACA,YACA,EACF,kBACiB,WACR,uFACiF,IAAAC,EAAA,8CAAAC,KAAA,uzBAE5F,EAEAH,EAAA,mBAEAA,EAAA,cAAoB,sBACF,cACL,QAAAI,EAAA,KACc,KAAAC,EAAA,KACV,WAAAC,EAAA,GAEjB","names":["List","withWebComponent","__vitePreload","n","ListGrowingMode","ListMode","ListSeparators"],"sources":["../../packages/main/src/webComponents/List/index.tsx"],"sourcesContent":["'use client';\n\nimport '@ui5/webcomponents/dist/List.js';\nimport type {\n  ListItemClickEventDetail,\n  ListItemCloseEventDetail,\n  ListItemDeleteEventDetail,\n  ListItemToggleEventDetail,\n  ListSelectionChangeEventDetail\n} from '@ui5/webcomponents/dist/List.js';\nimport type { ReactNode } from 'react';\nimport { ListSeparators, ListMode, ListGrowingMode } from '../../enums/index.js';\nimport type { Ui5CustomEvent, CommonProps, Ui5DomRef } from '../../interfaces/index.js';\nimport { withWebComponent } from '../../internal/withWebComponent.js';\nimport type { UI5WCSlotsNode } from '../../types/index.js';\n\ninterface ListAttributes {\n  /**\n   * Defines the accessible name of the component.\n   */\n  accessibleName?: string;\n  /**\n   * Defines the IDs of the elements that label the input.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Defines the accessible role of the component.\n   */\n  accessibleRole?: string;\n  /**\n   * Defines if the component would display a loading indicator over the list.\n   */\n  busy?: boolean;\n  /**\n   * Defines the delay in milliseconds, after which the busy indicator will show up for this component.\n   */\n  busyDelay?: number;\n  /**\n   * Defines the footer text.\n   */\n  footerText?: string;\n  /**\n   * Defines whether the component will have growing capability either by pressing a `More` button, or via user scroll. In both cases `onLoadMore` event is fired.\n   *\n   * Available options:\n   *\n   * `Button` - Shows a `More` button at the bottom of the list, pressing of which triggers the `onLoadMore` event.\n   * `Scroll` - The `onLoadMore` event is triggered when the user scrolls to the bottom of the list;\n   * `None` (default) - The growing is off.\n   *\n   * **Restrictions:** `growing=\"Scroll\"` is not supported for Internet Explorer, on IE the component will fallback to `growing=\"Button\"`.\n   */\n  growing?: ListGrowingMode | keyof typeof ListGrowingMode;\n  /**\n   * Defines the component header text.\n   *\n   * **Note:** If `header` is set this property is ignored.\n   */\n  headerText?: string;\n  /**\n   * Determines whether the component is indented.\n   */\n  indent?: boolean;\n  /**\n   * Defines the mode of the component.\n   *\n   * **Note:** Available options are `None`, `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`, `MultiSelect`, and `Delete`.\n   */\n  mode?: ListMode | keyof typeof ListMode;\n  /**\n   * Defines the text that is displayed when the component contains no items.\n   */\n  noDataText?: string;\n  /**\n   * Defines the item separator style that is used.\n   *\n   * **Notes:**\n   *\n   * *   Avalaible options are `All`, `Inner`, and `None`.\n   * *   When set to `None`, none of the items are separated by horizontal lines.\n   * *   When set to `Inner`, the first item doesn't have a top separator and the last item doesn't have a bottom separator.\n   */\n  separators?: ListSeparators | keyof typeof ListSeparators;\n}\n\nexport interface ListDomRef extends ListAttributes, Ui5DomRef {}\n\nexport interface ListPropTypes extends ListAttributes, CommonProps {\n  /**\n   * Defines the items of the component.\n   *\n   * **Note:** Use `StandardListItem`, `CustomListItem`, and `GroupHeaderListItem` for the intended design.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the component header.\n   *\n   * **Note:** When `header` is set, the `headerText` property is ignored.\n   *\n   * __Note:__ This prop will be rendered as [slot](https://www.w3schools.com/tags/tag_slot.asp) (`slot=\"header\"`).\n   * Since you can't change the DOM order of slots when declaring them within a prop, it might prove beneficial to manually mount them as part of the component's children, especially when facing problems with the reading order of screen readers.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-handling-slots--docs).\n   */\n  header?: UI5WCSlotsNode | UI5WCSlotsNode[];\n  /**\n   * Fired when an item is activated, unless the item's `type` property is set to `Inactive`.\n   */\n  onItemClick?: (event: Ui5CustomEvent<ListDomRef, ListItemClickEventDetail>) => void;\n  /**\n   * Fired when the `Close` button of any item is clicked\n   *\n   * **Note:** This event is only applicable to list items that can be closed (such as notification list items), not to be confused with `onItemDelete`.\n   */\n  onItemClose?: (event: Ui5CustomEvent<ListDomRef, ListItemCloseEventDetail>) => void;\n  /**\n   * Fired when the Delete button of any item is pressed.\n   *\n   * **Note:** A Delete button is displayed on each item, when the component `mode` property is set to `Delete`.\n   */\n  onItemDelete?: (event: Ui5CustomEvent<ListDomRef, ListItemDeleteEventDetail>) => void;\n  /**\n   * Fired when the `Toggle` button of any item is clicked.\n   *\n   * **Note:** This event is only applicable to list items that can be toggled (such as notification group list items).\n   */\n  onItemToggle?: (event: Ui5CustomEvent<ListDomRef, ListItemToggleEventDetail>) => void;\n  /**\n   * Fired when the user scrolls to the bottom of the list.\n   *\n   * **Note:** The event is fired when the `growing='Scroll'` property is enabled.\n   */\n  onLoadMore?: (event: Ui5CustomEvent<ListDomRef>) => void;\n  /**\n   * Fired when selection is changed by user interaction in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect` modes.\n   */\n  onSelectionChange?: (event: Ui5CustomEvent<ListDomRef, ListSelectionChangeEventDetail>) => void;\n}\n\n/**\n * The `List` component allows displaying a list of items, advanced keyboard handling support for navigating between items, and predefined modes to improve the development efficiency.\n *\n * The `List` is a container for the available list items:\n *\n * *   `StandardListItem`\n * *   `CustomListItem`\n * *   `GroupHeaderListItem`\n *\n *\n *\n * To benefit from the built-in selection mechanism, you can use the available selection modes, such as `SingleSelect`, `MultiSelect` and `Delete`.\n *\n * Additionally, the `List` provides header, footer, and customization for the list item separators.\n *\n * __Note:__ This component is a web component developed by the UI5 Web Componentsâ€™ team.\n *\n * [UI5 Web Components Storybook](https://sap.github.io/ui5-webcomponents/playground/?path=/docs/main-List)\n */\nconst List = withWebComponent<ListPropTypes, ListDomRef>(\n  'ui5-list',\n  [\n    'accessibleName',\n    'accessibleNameRef',\n    'accessibleRole',\n    'busyDelay',\n    'footerText',\n    'growing',\n    'headerText',\n    'mode',\n    'noDataText',\n    'separators'\n  ],\n  ['busy', 'indent'],\n  ['header'],\n  ['item-click', 'item-close', 'item-delete', 'item-toggle', 'load-more', 'selection-change'],\n  () => import('@ui5/webcomponents/dist/List.js')\n);\n\nList.displayName = 'List';\n\nList.defaultProps = {\n  accessibleRole: 'list',\n  busyDelay: 1000,\n  growing: ListGrowingMode.None,\n  mode: ListMode.None,\n  separators: ListSeparators.All\n};\n\nexport { List };\n"],"file":"assets/index-fe41fc6f.js"}