{"version":3,"file":"TabbableElements-aYIPY3zp.js","sources":["../../node_modules/@ui5/webcomponents-base/dist/util/getNormalizedTarget.js","../../node_modules/@ui5/webcomponents-base/dist/util/isElementInView.js","../../node_modules/@ui5/webcomponents-base/dist/util/isElementTabbable.js","../../node_modules/@ui5/webcomponents-base/dist/util/TabbableElements.js"],"sourcesContent":["/**\n * Returns the normalized event target in cases when it has shadow root.\n * @param {Object} target The original event target\n * @returns {Object} The normalized target\n */\nconst getNormalizedTarget = (target) => {\n    let element = target;\n    if (target.shadowRoot && target.shadowRoot.activeElement) {\n        element = target.shadowRoot.activeElement;\n    }\n    return element;\n};\nexport default getNormalizedTarget;\n//# sourceMappingURL=getNormalizedTarget.js.map","/**\n * Determines if the element is within the viewport.\n * @param el {HTMLElement}\n */\nconst isElementInView = (el) => {\n    const rect = el.getBoundingClientRect();\n    return (rect.top >= 0 && rect.left >= 0\n        && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\n        && rect.right <= (window.innerWidth || document.documentElement.clientWidth));\n};\nexport default isElementInView;\n//# sourceMappingURL=isElementInView.js.map","import isElementHidden from \"./isElementHidden.js\";\n/**\n * Returns if the HTMLElement is tabbable.\n *\n * @public\n * @param { HTMLElement } el the component to operate on (component that slots or contains within its shadow root the items the user navigates among)\n * @returns { boolean } true if the element is tabbable or false - if not\n */\nconst isElementTabbable = (el) => {\n    if (!el) {\n        return false;\n    }\n    const nodeName = el.nodeName.toLowerCase();\n    if (el.hasAttribute(\"data-sap-no-tab-ref\")) {\n        return false;\n    }\n    if (isElementHidden(el)) {\n        return false;\n    }\n    const tabIndex = el.getAttribute(\"tabindex\");\n    if (tabIndex !== null && tabIndex !== undefined) {\n        return parseInt(tabIndex) >= 0;\n    }\n    if (nodeName === \"a\" || /input|select|textarea|button|object/.test(nodeName)) {\n        return !el.disabled;\n    }\n    return false;\n};\nexport default isElementTabbable;\n//# sourceMappingURL=isElementTabbable.js.map","import isElementTabbable from \"./isElementTabbable.js\";\n/**\n * Returns the tabbable elements within the provided HTMLElement.\n *\n * @public\n * @param { HTMLElement } el the component to operate on (component that slots or contains within its shadow root the items the user navigates among)\n * @returns { Array<HTMLElement> } the tabbable elements\n */\nconst getTabbableElements = (el) => {\n    return getTabbables([...el.children]);\n};\n/**\n * Returns the last tabbable element within the provided HTMLElement.\n *\n * @public\n * @param { HTMLElement } el the component to operate on (component that slots or contains within its shadow root the items the user navigates among)\n * @returns { HTMLElement | null } the last tabbable element or \"null\" if not found\n */\nconst getLastTabbableElement = (el) => {\n    const tabbables = getTabbables([...el.children]);\n    return tabbables.length ? tabbables[tabbables.length - 1] : null;\n};\nconst getTabbables = (nodes, tabbables) => {\n    const tabbableElements = tabbables || [];\n    if (!nodes) {\n        return tabbableElements;\n    }\n    nodes.forEach(currentNode => {\n        if (currentNode.nodeType === Node.TEXT_NODE || currentNode.nodeType === Node.COMMENT_NODE) {\n            return;\n        }\n        let currentElement = currentNode;\n        if (currentElement.hasAttribute(\"data-sap-no-tab-ref\")) {\n            return;\n        }\n        if (currentElement.shadowRoot) {\n            // get the root node of the ShadowDom (1st none style tag)\n            const children = currentElement.shadowRoot.children;\n            currentElement = Array.from(children).find(node => node.tagName !== \"STYLE\");\n        }\n        if (!currentElement) {\n            return;\n        }\n        if (isElementTabbable(currentElement)) {\n            tabbableElements.push(currentElement);\n        }\n        if (currentElement.tagName === \"SLOT\") {\n            getTabbables(currentElement.assignedNodes(), tabbableElements);\n        }\n        else {\n            getTabbables([...currentElement.children], tabbableElements);\n        }\n    });\n    return tabbableElements;\n};\nexport { getTabbableElements, getLastTabbableElement, };\n//# sourceMappingURL=TabbableElements.js.map"],"names":["getNormalizedTarget","target","element","isElementInView","el","rect","isElementTabbable","nodeName","isElementHidden","tabIndex","getTabbableElements","getTabbables","getLastTabbableElement","tabbables","nodes","tabbableElements","currentNode","currentElement","children","node"],"mappings":"kDAKK,MAACA,EAAuBC,GAAW,CACpC,IAAIC,EAAUD,EACd,OAAIA,EAAO,YAAcA,EAAO,WAAW,gBACvCC,EAAUD,EAAO,WAAW,eAEzBC,CACX,ECPMC,EAAmBC,GAAO,CAC5B,MAAMC,EAAOD,EAAG,wBAChB,OAAQC,EAAK,KAAO,GAAKA,EAAK,MAAQ,GAC/BA,EAAK,SAAW,OAAO,aAAe,SAAS,gBAAgB,eAC/DA,EAAK,QAAU,OAAO,YAAc,SAAS,gBAAgB,YACxE,ECDMC,EAAqBF,GAAO,CAC9B,GAAI,CAACA,EACD,MAAO,GAEX,MAAMG,EAAWH,EAAG,SAAS,YAAW,EAIxC,GAHIA,EAAG,aAAa,qBAAqB,GAGrCI,EAAgBJ,CAAE,EAClB,MAAO,GAEX,MAAMK,EAAWL,EAAG,aAAa,UAAU,EAC3C,OAAIK,GAAa,KACN,SAASA,CAAQ,GAAK,EAE7BF,IAAa,KAAO,sCAAsC,KAAKA,CAAQ,EAChE,CAACH,EAAG,SAER,EACX,ECnBMM,EAAuBN,GAClBO,EAAa,CAAC,GAAGP,EAAG,QAAQ,CAAC,EASlCQ,EAA0BR,GAAO,CACnC,MAAMS,EAAYF,EAAa,CAAC,GAAGP,EAAG,QAAQ,CAAC,EAC/C,OAAOS,EAAU,OAASA,EAAUA,EAAU,OAAS,CAAC,EAAI,IAChE,EACMF,EAAe,CAACG,EAAOD,IAAc,CACvC,MAAME,EAAmBF,GAAa,GACtC,OAAKC,GAGLA,EAAM,QAAQE,GAAe,CACzB,GAAIA,EAAY,WAAa,KAAK,WAAaA,EAAY,WAAa,KAAK,aACzE,OAEJ,IAAIC,EAAiBD,EACrB,GAAI,CAAAC,EAAe,aAAa,qBAAqB,EAGrD,IAAIA,EAAe,WAAY,CAE3B,MAAMC,EAAWD,EAAe,WAAW,SAC3CA,EAAiB,MAAM,KAAKC,CAAQ,EAAE,KAAKC,GAAQA,EAAK,UAAY,OAAO,CAC9E,CACIF,IAGDX,EAAkBW,CAAc,GAChCF,EAAiB,KAAKE,CAAc,EAEpCA,EAAe,UAAY,OAC3BN,EAAaM,EAAe,cAAe,EAAEF,CAAgB,EAG7DJ,EAAa,CAAC,GAAGM,EAAe,QAAQ,EAAGF,CAAgB,GAEvE,CAAK,EACMA,CACX","x_google_ignoreList":[0,1,2,3]}