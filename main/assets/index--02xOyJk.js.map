{"version":3,"mappings":"sKA8HA,MAAAA,EAAAC,EAAe,aACb,kEACoE,wBAC7C,8BACM,wCACY,IAAAC,EAAA,wCAAAC,KAAA,iMAE3C,EAEAH,EAAA,qBAEAA,EAAA,cAAsB,WAAAI,EAAA,IAEtB","names":["Select","withWebComponent","__vitePreload","n","ValueState"],"sources":["../../packages/main/src/webComponents/Select/index.tsx"],"sourcesContent":["'use client';\n\nimport '@ui5/webcomponents/dist/Select.js';\nimport type { SelectChangeEventDetail, SelectLiveChangeEventDetail } from '@ui5/webcomponents/dist/Select.js';\nimport type { ReactNode } from 'react';\nimport { ValueState } from '../../enums/index.js';\nimport type { CommonProps, Ui5CustomEvent, Ui5DomRef } from '../../interfaces/index.js';\nimport { withWebComponent } from '../../internal/withWebComponent.js';\nimport type { UI5WCSlotsNode } from '../../types/index.js';\n\ninterface SelectAttributes {\n  /**\n   * Defines the accessible ARIA name of the component.\n   */\n  accessibleName?: string;\n  /**\n   * Receives id(or many ids) of the elements that label the select.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Defines whether the component is in disabled state.\n   *\n   * **Note:** A disabled component is noninteractive.\n   */\n  disabled?: boolean;\n  /**\n   * Defines the ID of the component's options menu, as an alternative to defining the selection's drop-down menu.\n   *\n   * **Note:** Usage of `SelectMenu` is recommended.\n   */\n  menu?: string;\n  /**\n   * Determines the name with which the component will be submitted in an HTML form. The value of the component will be the value of the currently selected `Option`.\n   *\n   * **Important:** For the `name` property to have effect, you must add the following import to your project: `import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n   *\n   * **Note:** When set, a native `input` HTML element will be created inside the `Select` so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit a form.\n   */\n  name?: string;\n  /**\n   * Defines whether the component is required.\n   */\n  required?: boolean;\n  /**\n   * Defines the value state of the component.\n   */\n  valueState?: ValueState | keyof typeof ValueState;\n}\n\nexport interface SelectDomRef extends Omit<SelectAttributes, 'menu'>, Ui5DomRef {\n  /**\n   * Defines a reference (ID or DOM element) of the component's options menu, as an alternative to defining the selection's drop-down menu.\n   *\n   * **Note:** Usage of `SelectMenu` is recommended.\n   */\n  menu?: string | HTMLElement;\n  /**\n   * Currently selected `Option` element.\n   */\n  readonly selectedOption: ReactNode;\n}\n\nexport interface SelectPropTypes extends SelectAttributes, Omit<CommonProps, 'onChange'> {\n  /**\n   * Defines the component options.\n   *\n   * **Note:** Only one selected option is allowed. If more than one option is defined as selected, the last one would be considered as the selected one.\n   *\n   * **Note:** Use the `Option` component to define the desired options.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the HTML element that will be displayed in the component input part, representing the selected option.\n   *\n   * **Note:** If not specified and `SelectMenuOption` is used, either the option's `display-text` or its textContent will be displayed.\n   *\n   * **Note:** If not specified and `Option` is used, the option's textContent will be displayed.\n   *\n   * __Note:__ The content of the prop will be rendered into a [&lt;slot&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot) by assigning the respective [slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot) attribute (`slot=\"label\"`).\n   * Since you can't change the DOM order of slots when declaring them within a prop, it might prove beneficial to manually mount them as part of the component's children, especially when facing problems with the reading order of screen readers.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-handling-slots--docs).\n   */\n  label?: UI5WCSlotsNode | UI5WCSlotsNode[];\n  /**\n   * Defines the value state message that will be displayed as pop up under the component.\n   *\n   * **Note:** If not specified, a default text (in the respective language) will be displayed.\n   *\n   * **Note:** The `valueStateMessage` would be displayed, when the component is in `Information`, `Warning` or `Error` value state.\n   *\n   * **Note:** If the component has `suggestionItems`, the `valueStateMessage` would be displayed as part of the same popover, if used on desktop, or dialog - on phone.\n   *\n   * __Note:__ The content of the prop will be rendered into a [&lt;slot&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot) by assigning the respective [slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot) attribute (`slot=\"valueStateMessage\"`).\n   * Since you can't change the DOM order of slots when declaring them within a prop, it might prove beneficial to manually mount them as part of the component's children, especially when facing problems with the reading order of screen readers.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-handling-slots--docs).\n   */\n  valueStateMessage?: UI5WCSlotsNode | UI5WCSlotsNode[];\n  /**\n   * Fired when the selected option changes.\n   */\n  onChange?: (event: Ui5CustomEvent<SelectDomRef, SelectChangeEventDetail>) => void;\n  /**\n   * Fired after the component's dropdown menu closes.\n   */\n  onClose?: (event: Ui5CustomEvent<SelectDomRef>) => void;\n  /**\n   * Fired when the user navigates through the options, but the selection is not finalized, or when pressing the ESC key to revert the current selection.\n   */\n  onLiveChange?: (event: Ui5CustomEvent<SelectDomRef, SelectLiveChangeEventDetail>) => void;\n  /**\n   * Fired after the component's dropdown menu opens.\n   */\n  onOpen?: (event: Ui5CustomEvent<SelectDomRef>) => void;\n}\n\n/**\n * The `Select` component is used to create a drop-down list.\n *\n * __Note:__ This component is a web component developed by the UI5 Web Componentsâ€™ team.\n *\n * [UI5 Web Components Storybook](https://sap.github.io/ui5-webcomponents/playground/?path=/docs/main-Select)\n */\nconst Select = withWebComponent<SelectPropTypes, SelectDomRef>(\n  'ui5-select',\n  ['accessibleName', 'accessibleNameRef', 'menu', 'name', 'valueState'],\n  ['disabled', 'required'],\n  ['label', 'valueStateMessage'],\n  ['change', 'close', 'live-change', 'open'],\n  () => import('@ui5/webcomponents/dist/Select.js')\n);\n\nSelect.displayName = 'Select';\n\nSelect.defaultProps = {\n  valueState: ValueState.None\n};\n\nexport { Select };\n"],"file":"assets/index--02xOyJk.js"}