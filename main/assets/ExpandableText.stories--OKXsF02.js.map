{"version":3,"file":"ExpandableText.stories--OKXsF02.js","sources":["../../packages/main/src/components/ExpandableText/index.tsx"],"sourcesContent":["'use client';\n\nimport { useI18nBundle, useIsomorphicId } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport React, { forwardRef, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { createUseStyles } from 'react-jss';\nimport { CLOSE_POPOVER, SHOW_FULL_TEXT, SHOW_LESS, SHOW_MORE } from '../../i18n/i18n-defaults.js';\nimport type { CommonProps } from '../../interfaces/index.js';\nimport { useCanRenderPortal } from '../../internal/ssr.js';\nimport { getUi5TagWithSuffix } from '../../internal/utils.js';\nimport type { LinkDomRef } from '../../webComponents/index.js';\nimport { Link } from '../../webComponents/index.js';\nimport { ResponsivePopover } from '../../webComponents/ResponsivePopover/index.js';\nimport type { TextPropTypes } from '../Text/index.js';\nimport { Text } from '../Text/index.js';\nimport { TextStyles } from '../Text/Text.jss.js';\n\nexport interface ExpandableTextPropTypes\n  extends Omit<TextPropTypes, 'maxLines' | 'wrapping' | 'children'>,\n    CommonProps {\n  /**\n   * Determines the text to be displayed.\n   */\n  children?: string;\n  /**\n   * Specifies the maximum number of characters from the beginning of the text field that are shown initially.\n   *\n   * @default 100\n   */\n  maxCharacters?: number;\n  /**\n   * Determines if the full text should be displayed inside a `ResponsivePopover` or in-place.\n   */\n  showOverflowInPopover?: boolean;\n  /**\n   * Defines where modals are rendered into via `React.createPortal`.\n   *\n   * You can find out more about this [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-working-with-portals--page).\n   *\n   * @default document.body\n   */\n  portalContainer?: Element;\n}\n\nconst useStyles = createUseStyles(\n  {\n    expandableText: { ...TextStyles.text },\n    text: { display: 'inline' },\n    ellipsis: { wordSpacing: '0.125rem' },\n    popover: { maxWidth: '30rem', '&::part(content)': { padding: '1rem' } }\n  },\n  { name: 'ExpandableText' }\n);\n/**\n * The `ExpandableText` component can be used to display long texts inside a table, list or form.\n *\n * Initially, only the first characters from the text are shown with a \"Show More\" link which allows the full text to be displayed. The `showOverflowInPopover` property determines if the full text will be displayed expanded in place (default) or in a popover (`showOverflowInPopover: true`). If the text is expanded a \"Show Less\" link is displayed, which allows collapsing the text field.\n *\n * @since 1.23.0\n */\nconst ExpandableText = forwardRef<HTMLSpanElement, ExpandableTextPropTypes>((props, ref) => {\n  const {\n    children,\n    emptyIndicator,\n    renderWhitespace,\n    hyphenated,\n    showOverflowInPopover,\n    maxCharacters = 100,\n    portalContainer,\n    className,\n    ...rest\n  } = props;\n  const [collapsed, setCollapsed] = useState(true);\n  const [popoverOpen, setPopoverOpen] = useState(false);\n  const linkRef = useRef<LinkDomRef>(null);\n  const classes = useStyles();\n  const uniqueId = useIsomorphicId();\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n  const trimmedChildren = renderWhitespace ? children : children?.replace(/\\s+/g, ' ').trim();\n  const isOverflow = trimmedChildren?.length >= maxCharacters;\n  const strippedChildren =\n    isOverflow && (collapsed || showOverflowInPopover) ? trimmedChildren?.slice(0, maxCharacters) : children;\n\n  const handleClick = () => {\n    if (showOverflowInPopover) {\n      setPopoverOpen((prev) => !prev);\n    }\n    setCollapsed((prev) => !prev);\n  };\n\n  const closePopover = () => {\n    setCollapsed(true);\n    setPopoverOpen(false);\n  };\n\n  useEffect(() => {\n    const tagName = getUi5TagWithSuffix('ui5-link');\n    void customElements.whenDefined(tagName).then(() => {\n      if (linkRef.current) {\n        if (showOverflowInPopover) {\n          linkRef.current.accessibilityAttributes = { hasPopup: 'Dialog' };\n        } else {\n          linkRef.current.accessibilityAttributes = { expanded: !collapsed };\n        }\n      }\n    });\n  }, [collapsed, showOverflowInPopover]);\n\n  const canRenderPortal = useCanRenderPortal();\n  if (showOverflowInPopover && !canRenderPortal) {\n    return null;\n  }\n  return (\n    <span className={clsx(classes.expandableText, className)} {...rest} ref={ref}>\n      <Text\n        emptyIndicator={emptyIndicator}\n        renderWhitespace={renderWhitespace}\n        hyphenated={hyphenated}\n        className={classes.text}\n      >\n        {strippedChildren}\n      </Text>\n      {isOverflow && (\n        <>\n          <span className={classes.ellipsis}>{showOverflowInPopover || collapsed ? '... ' : ' '}</span>\n          <Link\n            accessibleName={\n              showOverflowInPopover\n                ? collapsed\n                  ? i18nBundle.getText(CLOSE_POPOVER)\n                  : i18nBundle.getText(SHOW_FULL_TEXT)\n                : undefined\n            }\n            accessibleRole=\"button\"\n            onClick={handleClick}\n            ref={linkRef}\n            id={`${uniqueId}-link`}\n          >\n            {collapsed ? i18nBundle.getText(SHOW_MORE) : i18nBundle.getText(SHOW_LESS)}\n          </Link>\n        </>\n      )}\n      {showOverflowInPopover &&\n        popoverOpen &&\n        createPortal(\n          <ResponsivePopover opener={`${uniqueId}-link`} open onAfterClose={closePopover} className={classes.popover}>\n            <Text renderWhitespace={renderWhitespace} hyphenated={hyphenated} className={classes.text}>\n              {children}\n            </Text>\n          </ResponsivePopover>,\n          portalContainer ?? document.body\n        )}\n    </span>\n  );\n});\n\nExpandableText.displayName = 'ExpandableText';\n\nexport { ExpandableText };\n"],"names":["useStyles","createUseStyles","TextStyles","ExpandableText","forwardRef","props","ref","children","emptyIndicator","renderWhitespace","hyphenated","showOverflowInPopover","maxCharacters","portalContainer","className","rest","collapsed","setCollapsed","useState","popoverOpen","setPopoverOpen","linkRef","useRef","classes","uniqueId","useIsomorphicId","i18nBundle","useI18nBundle","trimmedChildren","isOverflow","strippedChildren","handleClick","prev","closePopover","useEffect","tagName","getUi5TagWithSuffix","canRenderPortal","useCanRenderPortal","jsxs","clsx","jsx","Text","Fragment","Link","CLOSE_POPOVER","SHOW_FULL_TEXT","SHOW_MORE","SHOW_LESS","createPortal","ResponsivePopover"],"mappings":"6iBA6CA,MAAAA,EAAAC,EAAkB,CAChB,eAAA,CAAA,GAAAC,EAAA,IAAA,EACuC,KAAA,CAAA,QAAA,QAAA,EACX,SAAA,CAAA,YAAA,UAAA,EACU,QAAA,CAAA,SAAA,QAAA,mBAAA,CAAA,QAAA,OAAA,CACkC,EACxE,CAAA,KAAA,gBAAA,CAEF,EAQAC,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CACE,KAAA,CAAM,SAAAC,EACJ,eAAAC,EACA,iBAAAC,EACA,WAAAC,EACA,sBAAAC,EACA,cAAAC,EAAA,IACgB,gBAAAC,EAChB,UAAAC,EACA,GAAAC,CACG,EAAAV,EAEL,CAAAW,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EACAG,EAAAC,SAAA,IAAA,EACAC,EAAAvB,IACAwB,EAAAC,IACAC,EAAAC,EAAA,0BAAA,EACAC,EAAAnB,EAAAF,EAAAA,GAAA,YAAAA,EAAA,QAAA,OAAA,KAAA,OACAsB,GAAAD,GAAA,YAAAA,EAAA,SAAAhB,EACAkB,EAAAD,IAAAb,GAAAL,GAAAiB,GAAA,YAAAA,EAAA,MAAA,EAAAhB,GAAAL,EAGAwB,EAAA,IAAA,CACEpB,GACES,EAAAY,GAAA,CAAAA,CAAA,EAEFf,EAAAe,GAAA,CAAAA,CAAA,CAA4B,EAG9BC,EAAA,IAAA,CACEhB,EAAA,EAAA,EACAG,EAAA,EAAA,CAAoB,EAGtBc,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAAC,EAAA,UAAA,EACA,eAAA,YAAAD,CAAA,EAAA,KAAA,IAAA,CACEd,EAAA,UACEV,EACEU,EAAA,QAAA,wBAAA,CAAA,SAAA,QAAA,EAEAA,EAAA,QAAA,wBAAA,CAAA,SAAA,CAAAL,CAAA,EAEJ,CAAA,CACD,EAAA,CAAAA,EAAAL,CAAA,CAAA,EAGH,MAAA0B,EAAAC,IACA,OAAA3B,GAAA,CAAA0B,EACE,KAEFE,OAAA,OAAA,CAAA,UAAAC,EAAAjB,EAAA,eAAAT,CAAA,EAAA,GAAAC,EAAA,IAAAT,EAAA,SAAA,CAEImC,EAAA,IAAAC,EAAC,CAAA,eAAAlC,EACC,iBAAAC,EACA,WAAAC,EACA,UAAAa,EAAA,KACmB,SAAAO,CAElB,CAAA,EACHD,GAAAU,EAAA,KAAAI,WAAA,CAAA,SAAA,CAGIF,EAAAA,IAAA,OAAA,CAAA,UAAAlB,EAAA,SAAA,SAAAZ,GAAAK,EAAA,OAAA,GAAA,CAAA,EAAsFyB,EAAA,IACtFG,EAAC,CAAA,eAAAjC,EAAAK,EAAAU,EAAA,QAAAmB,CAAA,EAAAnB,EAAA,QAAAoB,CAAA,EAAA,OAMO,eAAA,SAES,QAAAf,EACN,IAAAV,EACJ,GAAA,GAAAG,CAAA,QACU,SAAAR,EAAAU,EAAA,QAAAqB,CAAA,EAAArB,EAAA,QAAAsB,CAAA,CAE0D,CAAA,CAC3E,EAAA,EACFrC,GAAAQ,GAAA8B,EAAA,aAIAR,EAAAA,IAAAS,EAAA,CAAA,OAAA,GAAA1B,CAAA,QAAA,KAAA,GAAA,aAAAS,EAAA,UAAAV,EAAA,QAAA,SAAAkB,MAAAC,EAAA,CAAA,iBAAAjC,EAAA,WAAAC,EAAA,UAAAa,EAAA,KAAA,SAAAhB,CAAA,CAAA,CAAA,CAAA,EAKEM,GAAA,SAAA,IAC4B,CAC9B,CAAA,CAAA,CAGR,CAAA,EAEAV,EAAA,YAAA;;;"}